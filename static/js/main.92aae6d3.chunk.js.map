{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/util/EditCourse.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/MainPage.tsx","components/util/DropLogic.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","PreReqSameSemesterToast","Toast","bg","className","errMsg","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","EditCourse","useState","course","nameText","setNameText","onHide","setDisplay","closeButton","Badge","Row","Col","placeholder","type","value","onChange","e","target","style","textAlign","Button","variant","onClick","tmpSemesters","semesterCourses","tmpSemester","ind1","i","length","semesternum","semesterNumber","splice","courses","setSemesterCourses","getSemesterStr","semesterNum","Semester","setCourses","credits","setCredits","func1","console","log","forEach","Object","values","useEffect","find","semesters","push","courseSetter","getCredits","tmpCourses","count","Accordion","defaultActiveKey","eventKey","xs","tmpSemesterCourses","theSemester","droppableId","Table","droppableProps","map","section","lg","SemesterTable","Array","fill","elem","semestersCourses","DropdownMenu","clickFunc","setConcentration","CONCENTRATIONS","NavDropdown","title","id","as","CourseContainer","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","lab","labCourses","setLabCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","ochem","ochemCourses","setOchemCourses","data","dataCourses","setDataCourses","SecurityConc","cybersecurity","secCourses","setSecCourses","DataScienceConc","mathCourses","setMathCourses","HPCConc","track","learningCourses","setLearningCourses","dataTrackCourses","setDataTrackCourses","NetworksConc","systemsCourses","setSystemsCourses","TheoryConc","discCourses","setDiscCourses","contCourses","setContCourses","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","setSemesters","MainPage","concentrationContainers","toastDisplay","setToastDisplay","toastMessage","setToastMessage","setTimeout","displayToast","msg","onDragEnd","result","destination","includes","source","parseInt","substring","lastIndexOf","entries","theCourse","semesterNum1Id","semesterNum2Id","semesterNum1","semesterNum2","oneFound","twoFound","semester1","semester2","ind2","semester1Courses","sourceCourse","semester2Courses","tmpConcentrationContainers","chkTmpSemesterCourses","chkSemesterDropId","chkSemesterNumber","chkTmpSemester","chkTmpContainer","chkTmpConcCourse","insertingCourseName","chkTmpSemesterCourses2","chkTmp2CourseNames","chkTmp2CoursePreReqs","prereqs","preReqs","revPreReqs","join","tmpContainer","tmpConcCourses","tmpConcCourse","semesterDropId","tmpSemesterCourses2","sourceId","tmpConcContainers","tmpConcContainer","tmpConcContainerCourses","tmpConcContainer1","tmpConcContainer2","tmpConc1Courses","tmpConc2Courses","tmpConc1Course","onDragEndLogic","Container","Navbar","expand","Brand","href","Toggle","Collapse","Nav","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92aae6d3.chunk.js","sourcesContent":["import { Modal, Toast } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;\n\n\nexport const PreReqSameSemesterToast = (props: { errMsg: string, display: boolean }): JSX.Element => {\n\n    return(\n        <>\n            <Toast show={props.display} bg=\"danger\" >\n                <Toast.Header>\n                    <strong className=\"me-auto\">Invalid Course Selected</strong>\n                    <small>Close</small>\n                </Toast.Header>\n                <Toast.Body>\n                    {props.errMsg}\n                </Toast.Body>\n            </Toast>\n        </>\n    );\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import React, { useState } from \"react\";\nimport { Modal, Button, Badge, Row, Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\nexport const EditCourse = (props: {display: boolean, setDisplay: React.Dispatch<React.SetStateAction<boolean>>, course: CourseType, setCourses: React.Dispatch<React.SetStateAction<CourseType[]>>, semesterNumber: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    return (\n        <Modal show={true} onHide={() => props.setDisplay(false)}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Badge bg=\"primary\">Edit Course Details</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col>\n                        Enter name here:\n                    </Col>\n                    <Col>\n                        <input placeholder=\"Enter Course Name\"type=\"textbox\" value={nameText} \n                            onChange={(e) =>{\n                                setNameText(e.target.value);\n                            }\n                            }/>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{ display: \"block\", textAlign: \"center\" }}>\n                <Button variant=\"outline-primary\" onClick={() => {\n                    props.setDisplay(!props.display);\n                    const tmpSemesters: SemesterType[] = props.semesterCourses;\n                    let tmpSemester: SemesterType = tmpSemesters[0];\n                    let ind1 = -1;\n                    for(let i = 0; i < tmpSemesters.length; i++){\n                        if(tmpSemesters[i].semesternum === props.semesterNumber){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind1 = i;\n                            break;\n                        }\n                    }\n                    for(let i=0;i<tmpSemester.courses.length;i++){\n                        if(tmpSemester.courses[i].name===props.course.name){\n                            //found course\n                            tmpSemester.courses[i].name = nameText;\n                        }\n                    }\n                    tmpSemesters.splice(ind1,0,tmpSemester);\n                    props.setSemesterCourses([...tmpSemesters]);\n                }}>Submit Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Table, ListGroup, Accordion, Col, Button, Row, Badge } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: { ind: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [credits, setCredits] = useState<number>(0);\n\n    const func1 = (courses: CourseType[]) => {\n        console.log(\"---calling func1 with---\");\n        courses.forEach(e => console.log(Object.values(e)));\n        setCourses(courses);\n        //getCredits(props.semesterCourses, props.ind);\n    };\n\n    useEffect(() => {\n\n        console.log(\"rendering semester\");\n        if(!props.semesterCourses.find(e => e.semesternum == props.ind+1)){\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({semesternum: props.ind+1, courses: courses, courseSetter: func1});\n            props.setSemesterCourses(semesters);\n        }\n    }, []);\n\n    useEffect(() => {\n\n        console.log(\"----courses are now----\");\n        courses.forEach(e => console.log(Object.values(e)));\n\n        // verify that course you are trying to add is not a prereq of course in current semester\n\n\n        getCredits(courses);\n\n    }, [courses]);\n\n    const getCredits = (courses: CourseType[]) => {\n        console.log(\"inside getCredits\");\n        console.log(courses);\n        const tmpCourses: CourseType[] = courses;\n        console.log(tmpCourses);\n        let count=0;\n        for(let i=0;i<tmpCourses.length;i++){\n            count+=tmpCourses[i].credits;\n        }\n        console.log(\"count is: \" + count);\n        setCredits(count);\n    };\n    \n\n    return(\n        <Accordion key={`accordion ${props.ind}`} defaultActiveKey=\"0\">\n            <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>\n                    <Col xs={2}>\n                        {`Semester ${props.ind+1}`}\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => {\n                        \n                            const tmpSemesterCourses = [...props.semesterCourses];\n\n                            let theSemester = tmpSemesterCourses[0];\n\n                            let ind1 = 0;\n\n                            for(let i = 0; i < tmpSemesterCourses.length; i++){\n\n                                if(tmpSemesterCourses[i].semesternum === props.ind+1){\n                                    // found semester\n                                    ind1 = i;\n                                    theSemester = tmpSemesterCourses.splice(i,1)[0];\n                                    break;\n                                }\n\n                            }\n\n                            theSemester.courses = [];\n                            theSemester.courseSetter([]);\n\n                            tmpSemesterCourses.splice(ind1,0,theSemester);\n\n                            props.setSemesterCourses([...tmpSemesterCourses]);\n                        }}></Button>\n                    </Col>\n                    <Col>\n                        <Badge>\n                            {`Credits: ${credits}`}\n                        </Badge>\n                    </Col>\n                    \n                </Accordion.Header>\n                <Accordion.Body>\n                    <Col key={`semester-table-col-${props.ind}`}>\n                        <Droppable droppableId={`semester-table-${props.ind+1}`}>\n                            {(prov: DroppableProvided) =>\n                                <Table key={`semester-table-table-${props.ind}`}>\n                                    <thead>\n                                        <tr>\n                                            <td>{`${getSemesterStr(props.ind+1)}`}</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                                        <tr>\n                                            <td>\n                                                <ListGroup>\n                                                    {\n                                                        courses.map((e, i) =>\n                                                            <>\n                                                                <ListGroup.Item key={i}>\n                                                                    <Row>\n                                                                        <Col>\n                                                                            <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                                        </Col>\n                                                                        <Col xs lg=\"1\">\n                                                                            <Button variant=\"danger\" onClick={() => {\n                                                                                const tmpCourses: CourseType[] = [...courses];\n                                                                                for(let i = 0; i < tmpCourses.length; i++){\n                                                                                    const theCourse: CourseType = tmpCourses[i];\n                                                                                    if(theCourse.name === e.name){\n                                                                                        // found course\n                                                                                        tmpCourses.splice(i,1);\n                                                                                    }\n                                                                                }\n                                                                                setCourses([...tmpCourses]);\n                                                                                const tmpSemesters: SemesterType[] = props.semesterCourses;\n                                                                                let tmpSemester: SemesterType = tmpSemesters[0];\n                                                                                for(let i = 0; i < tmpSemesters.length; i++){\n                                                                                    tmpSemester = tmpSemesters[i];\n                                                                                    if(tmpSemester.semesternum === props.ind+1){\n                                                                                        // found semester\n                                                                                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                                                                                        tmpSemester.courses = [...tmpCourses];\n                                                                                        tmpSemester.courseSetter([...tmpCourses]);\n                                                                                        tmpSemesters.splice(i,0,tmpSemester);\n                                                                                        props.setSemesterCourses([...tmpSemesters]);\n                                                                                        return e.name;\n                                                                                    }\n                                                                                }\n\n                                                                                return e.name;\n                                                                            }}></Button>\n                                                                            <Button variant=\"warning\" onClick={()=>{\n                                                                                setDisplay(!display);\n                                                                            }}>\n                                                                            </Button>\n                                                                            {display && <EditCourse display={display} setDisplay={setDisplay} course={e} setCourses={setCourses} semesterNumber={props.ind+1} semesterCourses={props.semesterCourses} setSemesterCourses={props.setSemesterCourses} ></EditCourse>}\n                                                                        </Col>\n                                                                    </Row>\n                                                                </ListGroup.Item>\n                                                            </>\n                                                        )\n                                                    }\n                                                </ListGroup>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            }\n                        </Droppable>\n                    </Col>\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    );\n\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number, semestersCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n\n    return(\n        <>\n            {\n                new Array(props.semesters).fill(0).map((elem, ind) =>\n                    <Semester ind={ind} key={`semester-table-key-${ind}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />\n                )\n            }\n        </>\n    );\n};\n","import { NavDropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu(props: { setConcentration: React.Dispatch<React.SetStateAction<Concentration>>, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element{\n    \n    const clickFunc = (ind: number) => {\n\n        const tmpSemesterCourses = [...props.semesterCourses];\n\n        for(let i = 0; i < tmpSemesterCourses.length; i++){\n\n            const tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n            tmpSemester.courses = [];\n            tmpSemester.courseSetter([]);\n            tmpSemesterCourses.splice(i,0,tmpSemester);\n\n        }\n        props.setSemesterCourses([...tmpSemesterCourses]);\n\n        props.setConcentration(CONCENTRATIONS[ind]);\n\n    };\n\n    return <div>\n        <NavDropdown title=\"Concentrations\" id=\"basic-navbar-nav\">\n\n            <NavDropdown.Item as=\"button\" onClick={()=>{\n                clickFunc(0);\n            }}>AI and Robotics</NavDropdown.Item>\n\n\n            <NavDropdown.Item as=\"button\" onClick={()=>{\n                clickFunc(1);\n            }}>Bioinformatics</NavDropdown.Item>\n\n\n            <NavDropdown.Item as=\"button\" onClick={()=>{\n                clickFunc(2);\n            }}>Cybersecurity</NavDropdown.Item>\n\n\n            <NavDropdown.Item as=\"button\" onClick={()=>{\n                clickFunc(3);\n            }}>Data Science</NavDropdown.Item>\n\n\n            <NavDropdown.Item as=\"button\" onClick={()=>{\n                clickFunc(4);\n            }}>High-Performance Computing</NavDropdown.Item>\n\n\n            <NavDropdown.Item as=\"button\" onClick={()=>{\n                clickFunc(5);\n            }}>Networks and Systems</NavDropdown.Item>\n\n\n            <NavDropdown.Item as=\"button\" onClick={()=>{\n                clickFunc(6);\n            }}>Theory</NavDropdown.Item>\n\n        </NavDropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[], name: string}): JSX.Element => {\n\n    return(\n        <>\n            <Droppable droppableId={props.name}>\n                {(prov) =>\n                    <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                        {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                        {prov.placeholder}\n                    </ListGroup>\n                }\n            </Droppable>\n        </>\n    );\n};","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport function AIConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>} ): JSX.Element{\n    \n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].lab));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone-1\",\n                    \"courses\": capstone1Courses,\n                    \"setCourses\": setCapstone1Courses\n\n                },\n                {\n                    \"name\": \"general-1\",\n                    \"courses\": general1Courses,\n                    \"setCourses\": setGeneral1Courses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"capstone-2\",\n                    \"courses\": capstone2Courses,\n                    \"setCourses\": setCapstone2Courses\n                },\n                {\n                    \"name\": \"general-2\",\n                    \"courses\": general2Courses,\n                    \"setCourses\": setGeneral2Courses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                }\n\n            ]\n\n        );\n    },[]);\n\n    return<div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name={\"core\"}  />\n        <CourseContainer courses={capstone1Courses} name={\"capstone-1\"} />\n        <CourseContainer courses={general1Courses} name={\"general-1\"} />\n        <p>Choose a Two-Course Lab Sequence:</p>\n        <CourseContainer courses={labCourses} name={\"lab-1\"} />\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name={\"writing\"} />\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={capstone2Courses} name={\"capstone-2\"} />\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={general2Courses} name={\"general-2\"} />\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={electiveCourses} name={\"elective\"} />\n    </div>;\n}\n\nexport function BioConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].lab));\n    const [ochemCourses,setOchemCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.ochem));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.elective));\n    const [dataCourses,setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.data));\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"electives\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"data science\",\n                    \"courses\": dataCourses,\n                    \"setCourses\": setDataCourses\n                },\n                {\n                    \"name\": \"ochem\",\n                    \"courses\": ochemCourses,\n                    \"setCourses\": setOchemCourses\n                }\n\n            ]\n\n        );\n    }, []);\n\n    return(\n        <div>\n            <h2>Bioinformatics</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Chem Sequence:</p>\n            <CourseContainer courses={labCourses} name={\"lab-1\"} />\n            <p>Choose One Organic Chem Sequence:</p>\n            <CourseContainer courses={ochemCourses} name={\"ochem-1\"} />\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Data Analysis Course:</p>\n            <CourseContainer courses={dataCourses} name=\"data\"/>\n            <p>Select Two from the Following:</p>\n            <CourseContainer courses={electiveCourses} name=\"electives\"/>\n        </div>\n    );\n}\n\nexport function SecurityConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].lab));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.elective));\n    const [secCourses,setSecCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.cybersecurity));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"electives\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"cybersecurity\",\n                    \"courses\": secCourses,\n                    \"setCourses\": setSecCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Cybersecurity</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose a Two-Course Lab Sequence:</p>\n            <CourseContainer courses={labCourses} name={\"lab-1\"} />\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stats\"/>\n            <p>Select Two Advanced Reqs:</p>\n            <CourseContainer courses={secCourses} name=\"security\"/>\n            <p>Select Two from the Following:</p>\n            <CourseContainer courses={electiveCourses} name=\"electives\"/>\n        </div>\n    );\n}\n\nexport function DataScienceConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].writing));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].lab));\n    const [dataCourses,setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.data));\n    const [mathCourses,setMathCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.stats));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"electives\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"data science\",\n                    \"courses\": dataCourses,\n                    \"setCourses\": setDataCourses\n                },\n                {\n                    \"name\": \"math\",\n                    \"courses\": mathCourses,\n                    \"setCourses\": setMathCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return<div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose a Two-Course Lab Sequence:</p>\n        <CourseContainer courses={labCourses} name={\"lab-1\"} />\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <p>Select One Advanced Data Science:</p>\n        <CourseContainer courses={dataCourses} name=\"data science\"/>\n        <p>Select One Advanced Math:</p>\n        <CourseContainer courses={mathCourses} name=\"math\"/>\n        <p>Select One of the Following:</p>\n        <CourseContainer courses={electiveCourses} name=\"electives\"/>\n    </div>;\n}\n\nexport function HPCConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].writing));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].lab));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.stats));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.elective));\n    const [mathCourses,setMathCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.data));\n    const [dataCourses,setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.track));\n    const [learningCourses,setLearningCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.cybersecurity));\n    const [dataTrackCourses,setDataTrackCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.ochem));\n    \n    \n    //Note: It'd be a real hassle to redesign the json to accomadate everything in here, so the HPC json is kind of\n    //a mess.\n\n    useEffect(() => {\n\n        props.setConcentrationContainers(\n\n            [\n\n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"stats\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"math\",\n                    \"courses\": mathCourses,\n                    \"setCourses\": setMathCourses\n                },\n                {\n                    \"name\": \"data\",\n                    \"courses\": dataCourses,\n                    \"setCourses\": setDataCourses\n                },\n                {\n                    \"name\": \"machine learning\",\n                    \"courses\": learningCourses,\n                    \"setCourses\": setLearningCourses\n                },\n                {\n                    \"name\": \"data track\",\n                    \"courses\": dataTrackCourses,\n                    \"setCourses\": setDataTrackCourses\n                }\n\n            ]\n\n        );\n    \n    },[]);\n\n\n    return<div>\n        <h2>High-Performance Computing</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose a Two-Course Lab Sequence:</p>\n        <CourseContainer courses={labCourses} name={\"lab-1\"} />\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <h5>Choose one of the follwing tracks:</h5>\n        <h5>Applied Math Track</h5>\n        <CourseContainer courses={electiveCourses} name=\"elecitve\"/>\n        <CourseContainer courses={mathCourses} name=\"elecitve\"/>\n        <CourseContainer courses={statCourses} name=\"MATH\"/>\n        <h5>Data Track</h5>\n        <CourseContainer courses={dataCourses} name=\"data\"/>\n        <CourseContainer courses={dataTrackCourses} name=\"data\"/>\n        <p>Choose one Machine Learning Course:</p>\n        <CourseContainer courses={learningCourses} name=\"data\"/>\n    </div>;\n}\n\nexport function NetworksConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].lab));\n    const [secCourses,setSecCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.cybersecurity));\n    const [systemsCourses,setSystemsCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"security\",\n                    \"courses\": secCourses,\n                    \"setCourses\": setSecCourses\n                },\n                {\n                    \"name\": \"systems\",\n                    \"courses\": systemsCourses,\n                    \"setCourses\": setSystemsCourses\n                },\n                {\n                    \"name\": \"electives\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    \n    return(\n        <div>\n            <h2>Networks and Systems</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose a Two-Course Lab Sequence:</p>\n            <CourseContainer courses={labCourses} name={\"lab-1\"} />\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Security Requirement:</p>\n            <CourseContainer courses={secCourses} name=\"stat\"/>\n            <p>Select Two Systems Requirements:</p>\n            <CourseContainer courses={systemsCourses} name=\"stat\"/>\n            <p>Select Two of the Following:</p>\n            <CourseContainer courses={electiveCourses} name=\"stat\"/>\n        </div>\n    );\n}\n\nexport function TheoryConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].lab));\n    const [discCourses,setDiscCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.track));\n    const [contCourses,setContCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.cybersecurity));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                }\n                ,\n                {\n                    \"name\": \"discTrack\",\n                    \"courses\": discCourses,\n                    \"setCourses\": setDiscCourses\n                }\n                ,\n                {\n                    \"name\": \"contTrack\",\n                    \"courses\": contCourses,\n                    \"setCourses\": setContCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Theory</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose a Two-Course Lab Sequence:</p>\n            <CourseContainer courses={labCourses} name={\"lab-1\"} />\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <h5>Select One of the Following Four-Course Tracks:</h5>\n            <p>Discrete:</p>\n            <CourseContainer courses={discCourses} name=\"stat\"/>\n            <p>Continuous:</p>\n            <CourseContainer courses={contCourses} name=\"stat\"/>\n\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport function DisplayCourseList(props: {concentration: Concentration, setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>> }): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n\n        const allCourses = COURSES as CourseType[];\n\n        const tmparr: CourseType[] = stringCourses.map(e => [...allCourses.filter(i => i.name == e)]).flat(2);\n\n        return tmparr;\n\n    }\n\n    if (props.concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></AIConc>;\n    } else if (props.concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></BioConc>;\n    } else if (props.concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers} ></SecurityConc>;\n    } else if (props.concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></DataScienceConc>;\n    } else if (props.concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></HPCConc>;\n    } else if (props.concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></NetworksConc>;\n    } else if (props.concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: { setSemesters: React.Dispatch<React.SetStateAction<number>>, semesters: number}): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }}>Add Semester</Button>;","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Container, Row, Col, Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { onDragEndLogic } from \"./util/DropLogic\";\nimport { PreReqSameSemesterToast } from \"./util/Notifications\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]); // is initialized to the first concentration container, contains all of the parts of the concentration, outlined in the comment below\n    const [toastDisplay, setToastDisplay] = useState<boolean>(false);\n    const [toastMessage, setToastMessage] = useState<string>(\"\");\n\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },5000);\n    },[]);\n\n    const displayToast = (msg: string) => {\n        setToastDisplay(true);\n        setToastMessage(msg);\n        setTimeout(() => {\n            setToastDisplay(false);\n        },5000); \n    };\n\n    const onDragEnd = (result: DropResult) => {\n        onDragEndLogic(result,concentrationContainers,setConcentrationContainers,semesterCourses,setSemesterCourses,displayToast);\n    };\n\n    return (\n        <>\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            >\n                <Container>\n                    <br />\n                    <Row>\n                        <Col>\n                            {<WelcomeToast display={display}/>}\n                            {<PreReqSameSemesterToast errMsg={toastMessage} display={toastDisplay} />}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Navbar bg=\"light\" expand=\"lg\">\n                            <Container>\n                                <Navbar.Brand href=\"#home\">UDCIS Course Scheduler</Navbar.Brand>\n                                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                                <Navbar.Collapse id=\"basic-navbar-nav\">\n                                    <Nav className=\"me-auto\">\n                                        <NavDropdown title=\"Useful Links\" id=\"basic-navbar-nav\">\n                                            <NavDropdown.Item href=\"https://udapps.nss.udel.edu/CoursesSearch/\">Course Search</NavDropdown.Item>\n                                            <NavDropdown.Item href=\"https://www.cis.udel.edu/academics/undergraduate-programs/resources/courses/\">CISC Undergraduate Courses</NavDropdown.Item>\n                                            <NavDropdown.Item href=\"https://webreg.nss.udel.edu/registration/schedule/\">Registration Add/Drop</NavDropdown.Item>\n                                            <NavDropdown.Item href=\"https://ud-cis-teaching.github.io/student-guidance/\">UD CIS Student Guidance</NavDropdown.Item>\n                                        </NavDropdown>\n                                        <DropdownMenu setConcentration={setConcentration} semesterCourses={semesterCourses} setSemesterCourses={setSemesterCourses}></DropdownMenu>\n                                        <AddSemesterButton setSemesters={setSemesters} semesters={semesters} />\n                                    </Nav>\n                                </Navbar.Collapse>\n                            </Container>\n                        </Navbar>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <br/>\n                            <DisplayCourseList concentration={concentration} setConcentrationContainers={setConcentrationContainers} ></DisplayCourseList>\n                        </Col>\n                        <Col>\n                            <br/>\n                            <br/>\n                            <br/>\n                            <br/>\n                            <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </DragDropContext>\n        </>\n    );\n};\n","import React from \"react\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const onDragEndLogic = (result: DropResult, \n    concentrationContainers: ConcentrationContainerType[], \n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>,\n    semesterCourses: SemesterType[],\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>,\n    displayToast: (msg: string) => void ): void => {\n\n\n    if (!result.destination) {\n        return;\n    }\n    \n    /*\n\n    If where you are dropping TO is a semester\n\n    */\n\n    if(result.destination.droppableId.includes(\"semester-table\")){\n        \n        /*\n\n         If where you are dropping FROM is not a semester, then go into this if\n\n         Case: Concentration Courses ---> Semester\n\n        */\n\n        if(!result.source.droppableId.includes(\"semester-table\")){\n\n            console.log(\"from conc container\");\n\n            const tmpConcentrationContainers = [...concentrationContainers];\n\n\n            const chkTmpSemesterCourses = [...semesterCourses];\n            const chkSemesterDropId = result.destination.droppableId;\n            const chkSemesterNumber = parseInt(chkSemesterDropId.substring(chkSemesterDropId.lastIndexOf(\"-\")+1));\n            let chkTmpSemester: SemesterType = [...chkTmpSemesterCourses][0];\n            for(let i = 0; i < semesterCourses.length; i++){\n\n                if(semesterCourses[i].semesternum == chkSemesterNumber){\n                    chkTmpSemester = chkTmpSemesterCourses[i];\n                    break;\n                }\n\n            }\n\n            let chkTmpContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n            for(let i = 0; i < concentrationContainers.length; i++){ // finding container , ex: core, capstone\n\n                if(concentrationContainers[i].name === result.source.droppableId){\n                    chkTmpContainer = tmpConcentrationContainers[i];\n                    break;\n                }\n\n            }\n\n            const chkTmpConcCourses = chkTmpContainer.courses;\n            const chkTmpConcCourse = chkTmpConcCourses[result.source.index];\n\n            const insertingCourseName = chkTmpConcCourse.name;\n\n            // got course\n\n            \n            const chkTmpSemesterCourses2 = [...chkTmpSemester.courses];\n\n            const chkTmp2CourseNames = chkTmpSemesterCourses2.map(e => e.name);\n            const chkTmp2CoursePreReqs = chkTmpSemesterCourses2.map(e => e.prereqs).flat(2);\n\n            console.log(`chk2tmpcoursenames = ${chkTmp2CourseNames}`);\n            console.log(`chktmp2CoursePrereqs = ${chkTmp2CoursePreReqs}`);\n\n            const preReqs = chkTmpSemesterCourses2.filter(e => e.prereqs.includes(insertingCourseName)).map(e => e.name); // prereqs if you are inserting a lower level course that's a prereq to a higher level course in the semester\n            const revPreReqs = chkTmp2CourseNames.filter(e => chkTmpConcCourse.prereqs.includes(e)); // prereqs if you are inserting a high level course that's a prereq for a lower level course in the semester\n\n            console.log(\"PREREQS is : \" + Object.values(preReqs));\n\n            if(preReqs.length > 0){\n                // ERROR -- PRE-REQUISITE ERROR\n                const errorMsg = `You are trying to insert course ${insertingCourseName} when the course${preReqs.length > 1? \"s\": \"\"} ${preReqs.join(\",\")} has the course ${insertingCourseName} listed as a pre-requisite`;\n                displayToast(errorMsg);\n                return;\n            } else if(revPreReqs.length > 0){\n                const errorMsg = `You are trying to insert course ${insertingCourseName} when the course${preReqs.length > 1? \"s\": \"\"} ${preReqs.join(\",\")} has ${revPreReqs.join(\"\")} listed as a pre-requisite`;\n                displayToast(errorMsg);\n                return;\n            }\n\n            \n\n\n\n            let tmpContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n            let ind1 = -1;\n            for(let i = 0; i < concentrationContainers.length; i++){ // finding container , ex: core, capstone\n\n                if(concentrationContainers[i].name === result.source.droppableId){\n                    tmpContainer = tmpConcentrationContainers.splice(i,1)[0];\n                    ind1 = i;\n                    break;\n                }\n\n            }\n\n            const tmpConcCourses = tmpContainer.courses;\n            const tmpConcCourse = tmpConcCourses.splice(result.source.index,1)[0];\n            tmpContainer.setCourses(tmpConcCourses);\n            tmpConcentrationContainers.splice(ind1,0,tmpContainer)[0];\n            setConcentrationContainers(tmpConcentrationContainers);\n            \n            // move spliced course to semester table\n            // get semester number from id\n            const tmpSemesterCourses = [...semesterCourses];\n            const semesterDropId = result.destination.droppableId;\n            const semesterNumber = parseInt(semesterDropId.substring(semesterDropId.lastIndexOf(\"-\")+1));\n            let tmpSemester: SemesterType = [...tmpSemesterCourses][0];\n            let ind2 = -1;\n            for(let i = 0; i < semesterCourses.length; i++){\n\n                if(semesterCourses[i].semesternum == semesterNumber){\n                    tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n                    ind2 = i;\n                    break;\n                }\n\n            }\n            \n            const tmpSemesterCourses2 = [...tmpSemester.courses]; \n            if(tmpSemesterCourses2.length === 0){\n                tmpSemesterCourses2.push(tmpConcCourse);\n                tmpSemester.courses = tmpSemesterCourses2;\n                tmpSemester.courseSetter(tmpSemesterCourses2);\n                tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                setSemesterCourses(tmpSemesterCourses);\n            } else{\n\n                tmpSemesterCourses2.splice(result.destination.index,0,tmpConcCourse);\n                tmpSemester.courses = tmpSemesterCourses2;\n                tmpSemester.courseSetter(tmpSemesterCourses2);\n                tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                setSemesterCourses(tmpSemesterCourses);\n\n            }\n        } else if(result.source.droppableId === result.destination.droppableId){\n\n            // dropping in same table\n            console.log(\"dropping in same table\");\n\n            if(result.source.droppableId.includes(\"semester-table\")){\n                \n                console.log(\"within same semester table\");\n\n                const semesterNum = parseInt(result.source.droppableId.substring(result.source.droppableId.lastIndexOf(\"-\")+1));\n\n                const tmpSemesters: SemesterType[] = [...semesterCourses];\n                \n                let tmpSemester: SemesterType = tmpSemesters[0];\n\n                let ind = 0;\n\n                for(let i = 0; i < tmpSemesters.length; i++){\n\n                    if(tmpSemesters[i].semesternum == semesterNum){\n                        // found semester\n                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                        ind = i;\n                        break;\n                    }\n\n                }\n\n                console.log(Object.entries(tmpSemester));\n\n                const courses: CourseType[] = [...tmpSemester.courses];\n                console.log(\"----before any splicing----\");\n                courses.forEach(e => console.log(Object.values(e)));\n                const theCourse: CourseType = courses.splice(result.source.index,1)[0]; // gets 108\n                console.log(`---spliced course--- : ${Object.values(theCourse)}`);\n                console.log(\"----before----\");\n                courses.forEach(e => console.log(Object.values(e)));\n                courses.splice(result.destination.index,0,theCourse);\n                console.log(\"----after----\");\n                courses.forEach(e => console.log(Object.values(e)));\n                tmpSemester.courseSetter([...courses]);\n                tmpSemester.courses = [...courses];\n                console.log(\"----after setting----\");\n                tmpSemester.courses.forEach(e => console.log(Object.values(e)));\n                tmpSemesters.splice(ind,0,tmpSemester);\n                console.log(\"----before setting semesters----\");\n                setSemesterCourses(tmpSemesters);\n\n            }\n\n\n\n        } else if(result.source.droppableId.includes(\"semester-table\") && result.destination.droppableId.includes(\"semester-table\")){\n\n            // dropping from one semester table to the next\n\n            console.log(\"semestertable --> semestertable\");\n\n            const semesterNum1Id = result.source.droppableId;\n            const semesterNum2Id = result.destination.droppableId;\n\n            //console.log(`semesterNum1Id = ${semesterNum1Id}`);\n            //console.log(`semesterNum2Id = ${semesterNum2Id}`);\n\n            const semesterNum1 = parseInt(semesterNum1Id.substring(semesterNum1Id.lastIndexOf(\"-\")+1));\n\n            const semesterNum2 = parseInt(semesterNum2Id.substring(semesterNum2Id.lastIndexOf(\"-\")+1));\n\n            // got the numbers of semester1 and semester2\n\n            const tmpSemesters = [...semesterCourses];\n\n            let oneFound = false;\n            let twoFound = false;\n            let semester1 = tmpSemesters[0];\n            let semester2 = tmpSemesters[0];\n            //console.log(`semester1# = ${semesterNum1}`);\n            //console.log(`semester2# = ${semesterNum2}`);\n\n            let i = 0;\n\n            let ind1 = 0;\n            let ind2 = 0;\n\n            for(i = 0; !oneFound || !twoFound ;){\n\n                const theSemester = tmpSemesters[i];\n                if(theSemester){\n                    //console.log(`the semester = ${Object.entries(theSemester)}, onefound = ${oneFound} and twofound = ${twoFound}, semesterstatus = ${theSemester === null || theSemester == undefined}`);\n                } else{\n                    //console.log(\"semester is null\");\n                }\n\n\n                if(oneFound && twoFound){\n                    break;\n                } else if(!oneFound && theSemester.semesternum == semesterNum1){\n                    //console.log(\"splicing first semester\");\n                    oneFound = true;\n                    semester1 = tmpSemesters.splice(i,1)[0];\n                    ind1 = i;\n                    i = 0;\n                    continue;\n                } else if(!twoFound && theSemester.semesternum == semesterNum2){\n                    //console.log(\"splicing second semester\");\n                    twoFound = true;\n                    semester2 = tmpSemesters.splice(i,1)[0];\n                    ind2 = i;\n                    i = 0;\n                    continue;\n                } else{\n                    i++;\n                }\n                //console.log(\"else\");\n                //console.log(Object.values(tmpSemesters));\n\n            }\n\n            // got both semesters\n\n            // splice from source\n\n            const semester1Courses: CourseType[] = [...semester1.courses];\n            const sourceCourse = semester1Courses.splice(result.source.index,1)[0];\n            semester1.courseSetter(semester1Courses);\n            semester1.courses = [...semester1Courses];\n\n            const semester2Courses: CourseType[] = [...semester2.courses];\n            semester2Courses.splice(result.destination.index,0,sourceCourse);\n            semester2.courses = [...semester2Courses];\n            semester2.courseSetter([...semester2Courses]);\n\n            tmpSemesters.splice(ind1,0,semester1);\n            tmpSemesters.splice(ind2,0,semester2);\n            setSemesterCourses(tmpSemesters);\n\n        }\n    } else{\n\n        if ( result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\") ) {\n            \n            const tmpSemesters: SemesterType[] = [...semesterCourses];\n\n            const sourceId: string = result.source.droppableId;\n            const semesterNum: number = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\")));\n            let tmpSemester: SemesterType = tmpSemesters[0];\n            let ind = -1;\n\n            for(let i = 0; i < tmpSemesters.length; i++){\n\n                if(tmpSemesters[i].semesternum === semesterNum){\n                    // found semester\n                    tmpSemester = tmpSemesters.splice(i,1)[0];\n                    ind = i;\n                    break;\n                }\n\n            }\n\n            const tmpSemesterCourses: CourseType[] = [...tmpSemester.courses];\n            const theCourse: CourseType = tmpSemesterCourses.splice(result.source.index,1)[0];\n\n            tmpSemester.courses = [...tmpSemesterCourses];\n            tmpSemester.courseSetter([...tmpSemesterCourses]);\n\n            tmpSemesters.splice(ind,0,tmpSemester);\n\n            setSemesterCourses(tmpSemesters);\n\n            // semester updated\n\n\n            const tmpConcContainers = [...concentrationContainers];\n\n            let tmpConcContainer: ConcentrationContainerType = tmpConcContainers[0];\n\n            let ind2 = -1;\n\n            for(let i = 0; i < tmpConcContainers.length; i++){\n\n                if(tmpConcContainers[i].name === result.destination.droppableId){\n                    // found concentration container\n                    tmpConcContainer = tmpConcContainers.splice(i,1)[0];\n                    ind2 = i;\n                    break;\n                }\n\n            }\n\n            const tmpConcContainerCourses = [...tmpConcContainer.courses];\n\n            tmpConcContainerCourses.splice(result.destination.index,0,theCourse);\n\n            tmpConcContainer.courses = [...tmpConcContainerCourses];\n            \n            tmpConcContainer.setCourses([...tmpConcContainerCourses]);\n\n            // found concentration container\n\n            tmpConcContainers.splice(ind2,0,tmpConcContainer);\n\n            setConcentrationContainers(tmpConcContainers);\n\n\n\n\n        } else if(result.source.droppableId !== result.destination.droppableId && !result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\")){\n            // dropping from core --> language for instance\n            const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n            let tmpConcContainer1: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n            let tmpConcContainer2: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n            let ind1 = -1;\n\n            let ind2 = -1;\n\n            for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                if(ind1 !== -1 && ind2 !== -1){\n                    break;\n                } else if(tmpConcentrationContainers[i].name == result.source.droppableId){\n                    tmpConcContainer1 = tmpConcentrationContainers[i];\n                    ind1 = i;\n                    continue;\n                } else if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                    tmpConcContainer2 = tmpConcentrationContainers[i];\n                    ind2 = i;\n                    continue;\n                }\n\n            }\n\n            const tmpConc1Courses: CourseType[] = [...tmpConcContainer1.courses];\n\n            const tmpConc2Courses: CourseType[] = [...tmpConcContainer2.courses];\n\n            const tmpConc1Course: CourseType = tmpConc1Courses.splice(result.source.index,1)[0];\n\n            tmpConcContainer1.courses = [...tmpConc1Courses];\n\n            tmpConcContainer1.setCourses([...tmpConc1Courses]);\n\n            tmpConc2Courses.splice(result.destination.index,0,tmpConc1Course);\n\n            tmpConcContainer2.courses = [...tmpConc2Courses];\n\n            tmpConcContainer2.setCourses([...tmpConc2Courses]);\n\n            tmpConcentrationContainers.splice(ind1,0,tmpConcContainer1);\n\n            tmpConcentrationContainers.splice(ind2,0,tmpConcContainer2);\n\n            setConcentrationContainers([...tmpConcentrationContainers]);\n\n        } else {\n\n            console.log(\"container --> container\");\n\n            const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n            let tmpConcContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n            let ind1 = -1;\n            \n            for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                    // found container\n                    tmpConcContainer = tmpConcentrationContainers.splice(i,1)[0];\n                    ind1 = i;\n                    break;\n                }\n\n            }\n\n            const tmpConcCourses: CourseType[] = [...tmpConcContainer.courses];\n\n            const tmpConcCourse: CourseType = tmpConcCourses.splice(result.source.index,1)[0];\n\n            // spliced course, now place course\n\n            tmpConcCourses.splice(result.destination.index,0,tmpConcCourse);\n\n            tmpConcContainer.courses = tmpConcCourses;\n\n            tmpConcContainer.setCourses([...tmpConcCourses]);\n\n            tmpConcentrationContainers.splice(ind1,0,tmpConcContainer);\n\n            setConcentrationContainers(tmpConcentrationContainers);\n\n        }\n\n    }\n};","import React from \"react\";\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}