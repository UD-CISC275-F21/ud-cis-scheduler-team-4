{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/util/EditCourse.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/MainPage.tsx","components/util/DropLogic.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","EditCourse","useState","course","nameText","setNameText","onHide","setDisplay","closeButton","Badge","bg","Row","Col","placeholder","type","value","onChange","e","target","style","textAlign","Button","variant","onClick","tmpSemesters","semesterCourses","tmpSemester","ind1","i","length","semesternum","semesterNumber","splice","courses","setSemesterCourses","getSemesterStr","semesterNum","Semester","setCourses","credits","setCredits","func1","console","log","forEach","Object","values","useEffect","find","semesters","push","courseSetter","getCredits","tmpCourses","count","Accordion","defaultActiveKey","eventKey","xs","tmpSemesterCourses","theSemester","droppableId","Table","droppableProps","map","section","lg","SemesterTable","Array","fill","elem","semestersCourses","DropdownMenu","clickFunc","setConcentration","CONCENTRATIONS","Dropdown","Toggle","id","Menu","as","CourseContainer","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","lab","labCourses","setLabCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","ochem","ochemCourses","setOchemCourses","data","dataCourses","setDataCourses","SecurityConc","cybersecurity","secCourses","setSecCourses","DataScienceConc","mathCourses","setMathCourses","HPCConc","track","learningCourses","setLearningCourses","dataTrackCourses","setDataTrackCourses","NetworksConc","systemsCourses","setSystemsCourses","TheoryConc","discCourses","setDiscCourses","contCourses","setContCourses","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","setSemesters","MainPage","concentrationContainers","setTimeout","onDragEnd","result","destination","includes","source","parseInt","substring","lastIndexOf","entries","theCourse","semesterNum1Id","semesterNum2Id","semesterNum1","semesterNum2","oneFound","twoFound","semester1","semester2","ind2","semester1Courses","sourceCourse","semester2Courses","tmpConcentrationContainers","tmpContainer","tmpConcCourses","tmpConcCourse","semesterDropId","tmpSemesterCourses2","sourceId","tmpConcContainers","tmpConcContainer","tmpConcContainerCourses","tmpConcContainer1","tmpConcContainer2","tmpConc1Courses","tmpConc2Courses","tmpConc1Course","onDragEndLogic","Container","href","rel","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80154bf2.chunk.js","sourcesContent":["import { Modal, Toast } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;\n\n\nexport const PreReqSameSemesterToast = (props: { errorCourse: string, causeCourse: string }): JSX.Element => {\n\n    const [show, setShow] = useState<boolean>(true);\n\n    const toggleShow = () => setShow(!show);\n\n    return(\n        <>\n\n            <Toast show={show} onClose={toggleShow}>\n                <Toast.Header>\n                    <strong className=\"me-auto\">Invalid Course Selected</strong>\n                    <small>Close</small>\n                </Toast.Header>\n                <Toast.Body>\n                    {`You are trying to take the course ${props.causeCourse} which is a pre-requisite for the course ${props.errorCourse}`}\n                </Toast.Body>\n            </Toast>\n        </>\n    );\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import React, { useState } from \"react\";\nimport { Modal, Button, Badge, Row, Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\nexport const EditCourse = (props: {display: boolean, setDisplay: React.Dispatch<React.SetStateAction<boolean>>, course: CourseType, setCourses: React.Dispatch<React.SetStateAction<CourseType[]>>, semesterNumber: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    return (\n        <Modal show={true} onHide={() => props.setDisplay(false)}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Badge bg=\"primary\">Edit Course Details</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col>\n                        Enter name here:\n                    </Col>\n                    <Col>\n                        <input placeholder=\"Enter Course Name\"type=\"textbox\" value={nameText} \n                            onChange={(e) =>{\n                                setNameText(e.target.value);\n                            }\n                            }/>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{ display: \"block\", textAlign: \"center\" }}>\n                <Button variant=\"outline-primary\" onClick={() => {\n                    props.setDisplay(!props.display);\n                    const tmpSemesters: SemesterType[] = props.semesterCourses;\n                    let tmpSemester: SemesterType = tmpSemesters[0];\n                    let ind1 = -1;\n                    for(let i = 0; i < tmpSemesters.length; i++){\n                        if(tmpSemesters[i].semesternum === props.semesterNumber){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind1 = i;\n                            break;\n                        }\n                    }\n                    for(let i=0;i<tmpSemester.courses.length;i++){\n                        if(tmpSemester.courses[i].name===props.course.name){\n                            //found course\n                            tmpSemester.courses[i].name = nameText;\n                        }\n                    }\n                    tmpSemesters.splice(ind1,0,tmpSemester);\n                    props.setSemesterCourses([...tmpSemesters]);\n                }}>Submit Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, ListGroup, Accordion, Col, Button, Row, Badge } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: { ind: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [credits, setCredits] = useState<number>(0);\n\n    const func1 = (courses: CourseType[]) => {\n        console.log(\"---calling func1 with---\");\n        courses.forEach(e => console.log(Object.values(e)));\n        setCourses(courses);\n        //getCredits(props.semesterCourses, props.ind);\n    };\n\n    useEffect(() => {\n\n        console.log(\"rendering semester\");\n        if(!props.semesterCourses.find(e => e.semesternum == props.ind+1)){\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({semesternum: props.ind+1, courses: courses, courseSetter: func1});\n            props.setSemesterCourses(semesters);\n        }\n    }, []);\n\n    useEffect(() => {\n\n        console.log(\"----courses are now----\");\n        courses.forEach(e => console.log(Object.values(e)));\n\n        // verify that course you are trying to add is not a prereq of course in current semester\n\n        //const preReqs = courses.map(e => e.prereqs);\n\n\n        getCredits(courses);\n\n    }, [courses]);\n\n    const getCredits = (courses: CourseType[]) => {\n        console.log(\"inside getCredits\");\n        console.log(courses);\n        const tmpCourses: CourseType[] = courses;\n        console.log(tmpCourses);\n        let count=0;\n        for(let i=0;i<tmpCourses.length;i++){\n            count+=tmpCourses[i].credits;\n        }\n        console.log(\"count is: \" + count);\n        setCredits(count);\n    };\n    \n\n    return(\n        <Accordion key={`accordion ${props.ind}`} defaultActiveKey=\"0\">\n            <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>\n                    <Col xs={2}>\n                        {`Semester ${props.ind+1}`}\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => {\n                        \n                            const tmpSemesterCourses = [...props.semesterCourses];\n\n                            let theSemester = tmpSemesterCourses[0];\n\n                            let ind1 = 0;\n\n                            for(let i = 0; i < tmpSemesterCourses.length; i++){\n\n                                if(tmpSemesterCourses[i].semesternum === props.ind+1){\n                                    // found semester\n                                    ind1 = i;\n                                    theSemester = tmpSemesterCourses.splice(i,1)[0];\n                                    break;\n                                }\n\n                            }\n\n                            theSemester.courses = [];\n                            theSemester.courseSetter([]);\n\n                            tmpSemesterCourses.splice(ind1,0,theSemester);\n\n                            props.setSemesterCourses([...tmpSemesterCourses]);\n                        }}></Button>\n                    </Col>\n                    <Col>\n                        <Badge>\n                            {`Credits: ${credits}`}\n                        </Badge>\n                    </Col>\n                    \n                </Accordion.Header>\n                <Accordion.Body>\n                    <Col key={`semester-table-col-${props.ind}`}>\n                        <Droppable droppableId={`semester-table-${props.ind+1}`}>\n                            {(prov: DroppableProvided) =>\n                                <Table key={`semester-table-table-${props.ind}`}>\n                                    <thead>\n                                        <tr>\n                                            <td>{`${getSemesterStr(props.ind+1)}`}</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                                        <tr>\n                                            <td>\n                                                <ListGroup>\n                                                    {\n                                                        courses.map((e, i) =>\n                                                            <>\n                                                                <ListGroup.Item key={i}>\n                                                                    <Row>\n                                                                        <Col>\n                                                                            <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                                        </Col>\n                                                                        <Col xs lg=\"1\">\n                                                                            <Button variant=\"danger\" onClick={() => {\n                                                                                const tmpCourses: CourseType[] = [...courses];\n                                                                                for(let i = 0; i < tmpCourses.length; i++){\n                                                                                    const theCourse: CourseType = tmpCourses[i];\n                                                                                    if(theCourse.name === e.name){\n                                                                                        // found course\n                                                                                        tmpCourses.splice(i,1);\n                                                                                    }\n                                                                                }\n                                                                                setCourses([...tmpCourses]);\n                                                                                const tmpSemesters: SemesterType[] = props.semesterCourses;\n                                                                                let tmpSemester: SemesterType = tmpSemesters[0];\n                                                                                for(let i = 0; i < tmpSemesters.length; i++){\n                                                                                    tmpSemester = tmpSemesters[i];\n                                                                                    if(tmpSemester.semesternum === props.ind+1){\n                                                                                        // found semester\n                                                                                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                                                                                        tmpSemester.courses = [...tmpCourses];\n                                                                                        tmpSemester.courseSetter([...tmpCourses]);\n                                                                                        tmpSemesters.splice(i,0,tmpSemester);\n                                                                                        props.setSemesterCourses([...tmpSemesters]);\n                                                                                        return e.name;\n                                                                                    }\n                                                                                }\n\n                                                                                return e.name;\n                                                                            }}></Button>\n                                                                            <Button variant=\"warning\" onClick={()=>{\n                                                                                setDisplay(!display);\n                                                                            }}>\n                                                                            </Button>\n                                                                            {display && <EditCourse display={display} setDisplay={setDisplay} course={e} setCourses={setCourses} semesterNumber={props.ind+1} semesterCourses={props.semesterCourses} setSemesterCourses={props.setSemesterCourses} ></EditCourse>}\n                                                                        </Col>\n                                                                    </Row>\n                                                                </ListGroup.Item>\n                                                            </>\n                                                        )\n                                                    }\n                                                </ListGroup>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            }\n                        </Droppable>\n                    </Col>\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    );\n\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number, semestersCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n\n    return(\n        <>\n            {\n                new Array(props.semesters).fill(0).map((elem, ind) =>\n                    <Semester ind={ind} key={`semester-table-key-${ind}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />\n                )\n            }\n        </>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu(props: { setConcentration: React.Dispatch<React.SetStateAction<Concentration>>, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element{\n    \n    const clickFunc = (ind: number) => {\n\n        const tmpSemesterCourses = [...props.semesterCourses];\n\n        for(let i = 0; i < tmpSemesterCourses.length; i++){\n\n            const tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n            tmpSemester.courses = [];\n            tmpSemester.courseSetter([]);\n            tmpSemesterCourses.splice(i,0,tmpSemester);\n\n        }\n        props.setSemesterCourses([...tmpSemesterCourses]);\n\n        props.setConcentration(CONCENTRATIONS[ind]);\n\n    };\n\n    return <div>\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Concentrations:\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                \n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(0);\n                }}>AI and Robotics</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(1);\n                }}>Bioinformatics</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(2);\n                }}>Cybersecurity</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(3);\n                }}>Data Science</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(4);\n                }}>High-Performance Computing</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(5);\n                }}>Networks and Systems</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(6);\n                }}>Theory</Dropdown.Item>\n\n            </Dropdown.Menu>\n        </Dropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[], name: string}): JSX.Element => {\n\n    return(\n        <>\n            <Droppable droppableId={props.name}>\n                {(prov) =>\n                    <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                        {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                        {prov.placeholder}\n                    </ListGroup>\n                }\n            </Droppable>\n        </>\n    );\n};","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport function AIConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>} ): JSX.Element{\n    \n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].lab));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone-1\",\n                    \"courses\": capstone1Courses,\n                    \"setCourses\": setCapstone1Courses\n\n                },\n                {\n                    \"name\": \"general-1\",\n                    \"courses\": general1Courses,\n                    \"setCourses\": setGeneral1Courses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"capstone-2\",\n                    \"courses\": capstone2Courses,\n                    \"setCourses\": setCapstone2Courses\n                },\n                {\n                    \"name\": \"general-2\",\n                    \"courses\": general2Courses,\n                    \"setCourses\": setGeneral2Courses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                }\n\n            ]\n\n        );\n    },[]);\n\n    return<div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name={\"core\"}  />\n        <CourseContainer courses={capstone1Courses} name={\"capstone-1\"} />\n        <CourseContainer courses={general1Courses} name={\"general-1\"} />\n        <p>Choose a Two-Course Lab Sequence:</p>\n        <CourseContainer courses={labCourses} name={\"lab-1\"} />\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name={\"writing\"} />\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={capstone2Courses} name={\"capstone-2\"} />\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={general2Courses} name={\"general-2\"} />\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={electiveCourses} name={\"elective\"} />\n    </div>;\n}\n\nexport function BioConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].lab));\n    const [ochemCourses,setOchemCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.ochem));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.elective));\n    const [dataCourses,setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.data));\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"electives\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"data science\",\n                    \"courses\": dataCourses,\n                    \"setCourses\": setDataCourses\n                },\n                {\n                    \"name\": \"ochem\",\n                    \"courses\": ochemCourses,\n                    \"setCourses\": setOchemCourses\n                }\n\n            ]\n\n        );\n    }, []);\n\n    return(\n        <div>\n            <h2>Bioinformatics</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Chem Sequence:</p>\n            <CourseContainer courses={labCourses} name={\"lab-1\"} />\n            <p>Choose One Organic Chem Sequence:</p>\n            <CourseContainer courses={ochemCourses} name={\"ochem-1\"} />\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Data Analysis Course:</p>\n            <CourseContainer courses={dataCourses} name=\"data\"/>\n            <p>Select Two from the Following:</p>\n            <CourseContainer courses={electiveCourses} name=\"electives\"/>\n        </div>\n    );\n}\n\nexport function SecurityConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].lab));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.elective));\n    const [secCourses,setSecCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.cybersecurity));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"electives\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"cybersecurity\",\n                    \"courses\": secCourses,\n                    \"setCourses\": setSecCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Cybersecurity</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose a Two-Course Lab Sequence:</p>\n            <CourseContainer courses={labCourses} name={\"lab-1\"} />\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stats\"/>\n            <p>Select Two Advanced Reqs:</p>\n            <CourseContainer courses={secCourses} name=\"security\"/>\n            <p>Select Two from the Following:</p>\n            <CourseContainer courses={electiveCourses} name=\"electives\"/>\n        </div>\n    );\n}\n\nexport function DataScienceConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].writing));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].lab));\n    const [dataCourses,setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.data));\n    const [mathCourses,setMathCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.stats));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"electives\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"data science\",\n                    \"courses\": dataCourses,\n                    \"setCourses\": setDataCourses\n                },\n                {\n                    \"name\": \"math\",\n                    \"courses\": mathCourses,\n                    \"setCourses\": setMathCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return<div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose a Two-Course Lab Sequence:</p>\n        <CourseContainer courses={labCourses} name={\"lab-1\"} />\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <p>Select One Advanced Data Science:</p>\n        <CourseContainer courses={dataCourses} name=\"data science\"/>\n        <p>Select One Advanced Math:</p>\n        <CourseContainer courses={mathCourses} name=\"math\"/>\n        <p>Select One of the Following:</p>\n        <CourseContainer courses={electiveCourses} name=\"electives\"/>\n    </div>;\n}\n\nexport function HPCConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].writing));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].lab));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.stats));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.elective));\n    const [mathCourses,setMathCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.data));\n    const [dataCourses,setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.track));\n    const [learningCourses,setLearningCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.cybersecurity));\n    const [dataTrackCourses,setDataTrackCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.ochem));\n    \n    \n    //Note: It'd be a real hassle to redesign the json to accomadate everything in here, so the HPC json is kind of\n    //a mess.\n\n    useEffect(() => {\n\n        props.setConcentrationContainers(\n\n            [\n\n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"stats\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                },\n                {\n                    \"name\": \"math\",\n                    \"courses\": mathCourses,\n                    \"setCourses\": setMathCourses\n                },\n                {\n                    \"name\": \"data\",\n                    \"courses\": dataCourses,\n                    \"setCourses\": setDataCourses\n                },\n                {\n                    \"name\": \"machine learning\",\n                    \"courses\": learningCourses,\n                    \"setCourses\": setLearningCourses\n                },\n                {\n                    \"name\": \"data track\",\n                    \"courses\": dataTrackCourses,\n                    \"setCourses\": setDataTrackCourses\n                }\n\n            ]\n\n        );\n    \n    },[]);\n\n\n    return<div>\n        <h2>High-Performance Computing</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose a Two-Course Lab Sequence:</p>\n        <CourseContainer courses={labCourses} name={\"lab-1\"} />\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <h5>Choose one of the follwing tracks:</h5>\n        <h5>Applied Math Track</h5>\n        <CourseContainer courses={electiveCourses} name=\"elecitve\"/>\n        <CourseContainer courses={mathCourses} name=\"elecitve\"/>\n        <CourseContainer courses={statCourses} name=\"MATH\"/>\n        <h5>Data Track</h5>\n        <CourseContainer courses={dataCourses} name=\"data\"/>\n        <CourseContainer courses={dataTrackCourses} name=\"data\"/>\n        <p>Choose one Machine Learning Course:</p>\n        <CourseContainer courses={learningCourses} name=\"data\"/>\n    </div>;\n}\n\nexport function NetworksConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].lab));\n    const [secCourses,setSecCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.cybersecurity));\n    const [systemsCourses,setSystemsCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                },\n                {\n                    \"name\": \"security\",\n                    \"courses\": secCourses,\n                    \"setCourses\": setSecCourses\n                },\n                {\n                    \"name\": \"systems\",\n                    \"courses\": systemsCourses,\n                    \"setCourses\": setSystemsCourses\n                },\n                {\n                    \"name\": \"electives\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    \n    return(\n        <div>\n            <h2>Networks and Systems</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose a Two-Course Lab Sequence:</p>\n            <CourseContainer courses={labCourses} name={\"lab-1\"} />\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Security Requirement:</p>\n            <CourseContainer courses={secCourses} name=\"stat\"/>\n            <p>Select Two Systems Requirements:</p>\n            <CourseContainer courses={systemsCourses} name=\"stat\"/>\n            <p>Select Two of the Following:</p>\n            <CourseContainer courses={electiveCourses} name=\"stat\"/>\n        </div>\n    );\n}\n\nexport function TheoryConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n    const [labCourses,setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].lab));\n    const [discCourses,setDiscCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.track));\n    const [contCourses,setContCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.cybersecurity));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                },\n                {\n                    \"name\": \"lab\",\n                    \"courses\": labCourses,\n                    \"setCourses\": setLabCourses\n                }\n                ,\n                {\n                    \"name\": \"discTrack\",\n                    \"courses\": discCourses,\n                    \"setCourses\": setDiscCourses\n                }\n                ,\n                {\n                    \"name\": \"contTrack\",\n                    \"courses\": contCourses,\n                    \"setCourses\": setContCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Theory</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose a Two-Course Lab Sequence:</p>\n            <CourseContainer courses={labCourses} name={\"lab-1\"} />\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <h5>Select One of the Following Four-Course Tracks:</h5>\n            <p>Discrete:</p>\n            <CourseContainer courses={discCourses} name=\"stat\"/>\n            <p>Continuous:</p>\n            <CourseContainer courses={contCourses} name=\"stat\"/>\n\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport function DisplayCourseList(props: {concentration: Concentration, setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>> }): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n\n        const allCourses = COURSES as CourseType[];\n\n        const tmparr: CourseType[] = stringCourses.map(e => [...allCourses.filter(i => i.name == e)]).flat(2);\n\n        return tmparr;\n\n    }\n\n    if (props.concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></AIConc>;\n    } else if (props.concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></BioConc>;\n    } else if (props.concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers} ></SecurityConc>;\n    } else if (props.concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></DataScienceConc>;\n    } else if (props.concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></HPCConc>;\n    } else if (props.concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></NetworksConc>;\n    } else if (props.concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: { setSemesters: React.Dispatch<React.SetStateAction<number>>, semesters: number}): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }}>Add Semester</Button>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { onDragEndLogic } from \"./util/DropLogic\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]); // is initialized to the first concentration container, contains all of the parts of the concentration, outlined in the comment below\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },1);\n    },[]);\n\n    const onDragEnd = (result: DropResult) => {\n        onDragEndLogic(result,concentrationContainers,setConcentrationContainers,semesterCourses,setSemesterCourses);\n    };\n\n    return (\n        <>\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            >\n                <Container>\n                    <br />\n                    <Row>\n                        <Col>\n                            {<WelcomeToast display={display}/>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Badge bg=\"primary\"><h1>Course Scheduler</h1></Badge>\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col>\n                            <DropdownMenu setConcentration={setConcentration} semesterCourses={semesterCourses} setSemesterCourses={setSemesterCourses}></DropdownMenu>\n                        </Col>\n                        <Col>\n                            <h3>Useful Links:</h3>\n                            <a href=\"https://udapps.nss.udel.edu/CoursesSearch/\" target=\"_blank\" rel=\"noopener noreferrer\">Courses Search</a> \n                            <div>\n                                <a href=\"https://www.cis.udel.edu/academics/undergraduate-programs/resources/courses/\" target=\"_blank\" rel=\"noopener noreferrer\">Course Descriptions</a>\n                            </div>\n                            <a href=\"https://webreg.nss.udel.edu/registration/schedule/\" target=\"_blank\" rel=\"noopener noreferrer\">Blue Hen Planner</a>\n                        </Col>\n                        <br />\n                        <Col>\n                            <AddSemesterButton setSemesters={setSemesters} semesters={semesters} />\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            <DisplayCourseList concentration={concentration} setConcentrationContainers={setConcentrationContainers} ></DisplayCourseList>\n                        </Col>\n                        <Col>\n                            <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </DragDropContext>\n        </>\n    );\n};\n","import React from \"react\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const onDragEndLogic = (result: DropResult, \n    concentrationContainers: ConcentrationContainerType[], \n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>,\n    semesterCourses: SemesterType[],\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> ): void => {\n\n\n    if (!result.destination) {\n        return;\n    }if(result.destination.droppableId.includes(\"semester-table\")){\n        \n        if(!result.source.droppableId.includes(\"semester-table\")){\n\n            console.log(\"from conc container\");\n\n            const tmpConcentrationContainers = [...concentrationContainers];\n\n            let tmpContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n            let ind1 = -1;\n            for(let i = 0; i < concentrationContainers.length; i++){ // finding container , ex: core, capstone\n\n                if(concentrationContainers[i].name === result.source.droppableId){\n                    tmpContainer = tmpConcentrationContainers.splice(i,1)[0];\n                    ind1 = i;\n                    break;\n                }\n\n            }\n\n            const tmpConcCourses = tmpContainer.courses;\n            const tmpConcCourse = tmpConcCourses.splice(result.source.index,1)[0];\n            tmpContainer.setCourses(tmpConcCourses);\n            tmpConcentrationContainers.splice(ind1,0,tmpContainer)[0];\n            setConcentrationContainers(tmpConcentrationContainers);\n            \n            // move spliced course to semester table\n            // get semester number from id\n            const tmpSemesterCourses = [...semesterCourses];\n            const semesterDropId = result.destination.droppableId;\n            const semesterNumber = parseInt(semesterDropId.substring(semesterDropId.lastIndexOf(\"-\")+1));\n            let tmpSemester: SemesterType = [...tmpSemesterCourses][0];\n            let ind2 = -1;\n            for(let i = 0; i < semesterCourses.length; i++){\n\n                if(semesterCourses[i].semesternum == semesterNumber){\n                    tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n                    ind2 = i;\n                    break;\n                }\n\n            }\n            \n            const tmpSemesterCourses2 = [...tmpSemester.courses]; \n            if(tmpSemesterCourses2.length === 0){\n                tmpSemesterCourses2.push(tmpConcCourse);\n                tmpSemester.courses = tmpSemesterCourses2;\n                tmpSemester.courseSetter(tmpSemesterCourses2);\n                tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                setSemesterCourses(tmpSemesterCourses);\n            } else{\n\n                tmpSemesterCourses2.splice(result.destination.index,0,tmpConcCourse);\n                tmpSemester.courses = tmpSemesterCourses2;\n                tmpSemester.courseSetter(tmpSemesterCourses2);\n                tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                setSemesterCourses(tmpSemesterCourses);\n\n            }\n        } else if(result.source.droppableId === result.destination.droppableId){\n\n            // dropping in same table\n            console.log(\"dropping in same table\");\n\n            if(result.source.droppableId.includes(\"semester-table\")){\n                \n                console.log(\"within same semester table\");\n\n                const semesterNum = parseInt(result.source.droppableId.substring(result.source.droppableId.lastIndexOf(\"-\")+1));\n\n                const tmpSemesters: SemesterType[] = [...semesterCourses];\n                \n                let tmpSemester: SemesterType = tmpSemesters[0];\n\n                let ind = 0;\n\n                for(let i = 0; i < tmpSemesters.length; i++){\n\n                    if(tmpSemesters[i].semesternum == semesterNum){\n                        // found semester\n                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                        ind = i;\n                        break;\n                    }\n\n                }\n\n                console.log(Object.entries(tmpSemester));\n\n                const courses: CourseType[] = [...tmpSemester.courses];\n                console.log(\"----before any splicing----\");\n                courses.forEach(e => console.log(Object.values(e)));\n                const theCourse: CourseType = courses.splice(result.source.index,1)[0]; // gets 108\n                console.log(`---spliced course--- : ${Object.values(theCourse)}`);\n                console.log(\"----before----\");\n                courses.forEach(e => console.log(Object.values(e)));\n                courses.splice(result.destination.index,0,theCourse);\n                console.log(\"----after----\");\n                courses.forEach(e => console.log(Object.values(e)));\n                tmpSemester.courseSetter([...courses]);\n                tmpSemester.courses = [...courses];\n                console.log(\"----after setting----\");\n                tmpSemester.courses.forEach(e => console.log(Object.values(e)));\n                tmpSemesters.splice(ind,0,tmpSemester);\n                console.log(\"----before setting semesters----\");\n                setSemesterCourses(tmpSemesters);\n\n            }\n\n\n\n        } else if(result.source.droppableId.includes(\"semester-table\") && result.destination.droppableId.includes(\"semester-table\")){\n\n            // dropping from one semester table to the next\n\n            console.log(\"semestertable --> semestertable\");\n\n            const semesterNum1Id = result.source.droppableId;\n            const semesterNum2Id = result.destination.droppableId;\n\n            //console.log(`semesterNum1Id = ${semesterNum1Id}`);\n            //console.log(`semesterNum2Id = ${semesterNum2Id}`);\n\n            const semesterNum1 = parseInt(semesterNum1Id.substring(semesterNum1Id.lastIndexOf(\"-\")+1));\n\n            const semesterNum2 = parseInt(semesterNum2Id.substring(semesterNum2Id.lastIndexOf(\"-\")+1));\n\n            // got the numbers of semester1 and semester2\n\n            const tmpSemesters = [...semesterCourses];\n\n            let oneFound = false;\n            let twoFound = false;\n            let semester1 = tmpSemesters[0];\n            let semester2 = tmpSemesters[0];\n            //console.log(`semester1# = ${semesterNum1}`);\n            //console.log(`semester2# = ${semesterNum2}`);\n\n            let i = 0;\n\n            let ind1 = 0;\n            let ind2 = 0;\n\n            for(i = 0; !oneFound || !twoFound ;){\n\n                const theSemester = tmpSemesters[i];\n                if(theSemester){\n                    //console.log(`the semester = ${Object.entries(theSemester)}, onefound = ${oneFound} and twofound = ${twoFound}, semesterstatus = ${theSemester === null || theSemester == undefined}`);\n                } else{\n                    //console.log(\"semester is null\");\n                }\n\n\n                if(oneFound && twoFound){\n                    break;\n                } else if(!oneFound && theSemester.semesternum == semesterNum1){\n                    //console.log(\"splicing first semester\");\n                    oneFound = true;\n                    semester1 = tmpSemesters.splice(i,1)[0];\n                    ind1 = i;\n                    i = 0;\n                    continue;\n                } else if(!twoFound && theSemester.semesternum == semesterNum2){\n                    //console.log(\"splicing second semester\");\n                    twoFound = true;\n                    semester2 = tmpSemesters.splice(i,1)[0];\n                    ind2 = i;\n                    i = 0;\n                    continue;\n                } else{\n                    i++;\n                }\n                //console.log(\"else\");\n                //console.log(Object.values(tmpSemesters));\n\n            }\n\n            // got both semesters\n\n            // splice from source\n\n            const semester1Courses: CourseType[] = [...semester1.courses];\n            const sourceCourse = semester1Courses.splice(result.source.index,1)[0];\n            semester1.courseSetter(semester1Courses);\n            semester1.courses = [...semester1Courses];\n\n            const semester2Courses: CourseType[] = [...semester2.courses];\n            semester2Courses.splice(result.destination.index,0,sourceCourse);\n            semester2.courses = [...semester2Courses];\n            semester2.courseSetter([...semester2Courses]);\n\n            tmpSemesters.splice(ind1,0,semester1);\n            tmpSemesters.splice(ind2,0,semester2);\n            setSemesterCourses(tmpSemesters);\n\n        }\n    } else{\n\n        if ( result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\") ) {\n            \n            const tmpSemesters: SemesterType[] = [...semesterCourses];\n\n            const sourceId: string = result.source.droppableId;\n            const semesterNum: number = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\")));\n            let tmpSemester: SemesterType = tmpSemesters[0];\n            let ind = -1;\n\n            for(let i = 0; i < tmpSemesters.length; i++){\n\n                if(tmpSemesters[i].semesternum === semesterNum){\n                    // found semester\n                    tmpSemester = tmpSemesters.splice(i,1)[0];\n                    ind = i;\n                    break;\n                }\n\n            }\n\n            const tmpSemesterCourses: CourseType[] = [...tmpSemester.courses];\n            const theCourse: CourseType = tmpSemesterCourses.splice(result.source.index,1)[0];\n\n            tmpSemester.courses = [...tmpSemesterCourses];\n            tmpSemester.courseSetter([...tmpSemesterCourses]);\n\n            tmpSemesters.splice(ind,0,tmpSemester);\n\n            setSemesterCourses(tmpSemesters);\n\n            // semester updated\n\n\n            const tmpConcContainers = [...concentrationContainers];\n\n            let tmpConcContainer: ConcentrationContainerType = tmpConcContainers[0];\n\n            let ind2 = -1;\n\n            for(let i = 0; i < tmpConcContainers.length; i++){\n\n                if(tmpConcContainers[i].name === result.destination.droppableId){\n                    // found concentration container\n                    tmpConcContainer = tmpConcContainers.splice(i,1)[0];\n                    ind2 = i;\n                    break;\n                }\n\n            }\n\n            const tmpConcContainerCourses = [...tmpConcContainer.courses];\n\n            tmpConcContainerCourses.splice(result.destination.index,0,theCourse);\n\n            tmpConcContainer.courses = [...tmpConcContainerCourses];\n            \n            tmpConcContainer.setCourses([...tmpConcContainerCourses]);\n\n            // found concentration container\n\n            tmpConcContainers.splice(ind2,0,tmpConcContainer);\n\n            setConcentrationContainers(tmpConcContainers);\n\n\n\n\n        } else if(result.source.droppableId !== result.destination.droppableId && !result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\")){\n            // dropping from core --> language for instance\n            const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n            let tmpConcContainer1: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n            let tmpConcContainer2: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n            let ind1 = -1;\n\n            let ind2 = -1;\n\n            for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                if(ind1 !== -1 && ind2 !== -1){\n                    break;\n                } else if(tmpConcentrationContainers[i].name == result.source.droppableId){\n                    tmpConcContainer1 = tmpConcentrationContainers[i];\n                    ind1 = i;\n                    continue;\n                } else if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                    tmpConcContainer2 = tmpConcentrationContainers[i];\n                    ind2 = i;\n                    continue;\n                }\n\n            }\n\n            const tmpConc1Courses: CourseType[] = [...tmpConcContainer1.courses];\n\n            const tmpConc2Courses: CourseType[] = [...tmpConcContainer2.courses];\n\n            const tmpConc1Course: CourseType = tmpConc1Courses.splice(result.source.index,1)[0];\n\n            tmpConcContainer1.courses = [...tmpConc1Courses];\n\n            tmpConcContainer1.setCourses([...tmpConc1Courses]);\n\n            tmpConc2Courses.splice(result.destination.index,0,tmpConc1Course);\n\n            tmpConcContainer2.courses = [...tmpConc2Courses];\n\n            tmpConcContainer2.setCourses([...tmpConc2Courses]);\n\n            tmpConcentrationContainers.splice(ind1,0,tmpConcContainer1);\n\n            tmpConcentrationContainers.splice(ind2,0,tmpConcContainer2);\n\n            setConcentrationContainers([...tmpConcentrationContainers]);\n\n        } else {\n\n            console.log(\"container --> container\");\n\n            const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n            let tmpConcContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n            let ind1 = -1;\n            \n            for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                    // found container\n                    tmpConcContainer = tmpConcentrationContainers.splice(i,1)[0];\n                    ind1 = i;\n                    break;\n                }\n\n            }\n\n            const tmpConcCourses: CourseType[] = [...tmpConcContainer.courses];\n\n            const tmpConcCourse: CourseType = tmpConcCourses.splice(result.source.index,1)[0];\n\n            // spliced course, now place course\n\n            tmpConcCourses.splice(result.destination.index,0,tmpConcCourse);\n\n            tmpConcContainer.courses = tmpConcCourses;\n\n            tmpConcContainer.setCourses([...tmpConcCourses]);\n\n            tmpConcentrationContainers.splice(ind1,0,tmpConcContainer);\n\n            setConcentrationContainers(tmpConcentrationContainers);\n\n        }\n\n    }\n};","import React from \"react\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}