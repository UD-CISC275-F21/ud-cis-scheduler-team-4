{"version":3,"sources":["components/util/Notifications.tsx","components/courses/CourseInfo.tsx","components/courses/Course.tsx","components/util/EditCourse.tsx","components/courses/EditCoursePanel.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/concentrations/AIConc.tsx","components/courses/concentrations/BioConc.tsx","components/courses/concentrations/DataScienceConc.tsx","components/courses/concentrations/HPCConc.tsx","components/courses/concentrations/NetworksConc.tsx","components/courses/concentrations/SecurityConc.tsx","components/courses/concentrations/TheoryConc.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/semesters/DeleteSemesterButton.tsx","components/util/DNDLogic/semesterToSemester.tsx","components/util/DNDLogic/concentrationToConcentration.tsx","components/util/DropLogic.tsx","components/util/DNDLogic/semesterToConcentration.tsx","components/util/DNDLogic/prereqchecker.tsx","components/util/DNDLogic/concentrationToSemester.tsx","components/util/ExportPlan.tsx","components/util/howto/howtodropdown/howtodropdown.tsx","components/util/howto/howtosteps/howtonavigation.tsx","components/util/howto/howtosteps/wholeappinfo.tsx","components/util/howto/howtosteps/howtoconcentrationcontainer.tsx","components/util/howto/howtosteps/howtonavbar.tsx","components/util/howto/howtosteps/howtosemestertable.tsx","components/util/howto/howtodropdown/howtodropdownlogic.tsx","components/util/howto/howtodisplay.tsx","components/util/Footer.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","PreReqSameSemesterToast","Toast","bg","onClose","setToastDisplay","className","errMsg","CourseInfo","courseName","name","split","courseTitle","onHide","setDisplay","closeButton","Badge","credits","description","Course","useState","draggableId","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","onClick","xmlns","width","height","fill","viewBox","d","title","EditCourse","course","nameText","setNameText","titleText","setTitleText","descText","setDescText","Row","Col","onChange","elem","target","value","placeholder","type","cols","rows","style","textAlign","Button","theSemester","semesterCourses","semesterNumber","courseIndex","courses","findIndex","theCourse","courseSetter","setSemesterCourses","variant","EditCoursePanel","lg","xs","getSemesterStr","semesterNum","Semester","setCourses","setCredits","useEffect","find","semesternum","semesters","push","newCourses","tmpCourses","count","getCredits","Accordion","defaultActiveKey","eventKey","droppableId","Table","droppableProps","map","length","SemesterTable","Array","semestersCourses","DropdownMenu","clickFunc","tmpSemesterCourses","i","tmpSemester","splice","setConcentration","CONCENTRATIONS","NavDropdown","id","as","CourseContainer","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","lab","labCourses","setLabCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","ochem","ochemCourses","setOchemCourses","data","dataCourses","setDataCourses","DataScienceConc","mathCourses","setMathCourses","HPCConc","track","cybersecurity","learningCourses","setLearningCourses","dataTrackCourses","setDataTrackCourses","NetworksConc","secCourses","setSecCourses","systemsCourses","setSystemsCourses","SecurityConc","TheoryConc","discCourses","setDiscCourses","contCourses","setContCourses","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","tmpSemesters","setSemesters","DeleteSemesterButton","setDelete","semesterToSemester","semester","semester2","spliceInd","dropInd","diffSemester","console","log","splicedCourse","concentrationToConcentration","result","concContainers","concContainer","courseSpliceInd","setConcContainers","isDifferent","ind2","destination","tmpConcContainerCourse","diffContainer","tmpConcContainerCourseDrag","successPrint","onDragEndLogic","concentrationContainers","setErrMsg","sourceId","source","destinationId","sourceIdSemester","includes","destIdSemester","sourceIndex","dropIndex","semesterNum1","parseInt","substring","lastIndexOf","ind1","concentrationInd","semesterInd","courseDropInd","semesterToConcentration","placingIndex","courseBeingPlaced","slice","eachcourse","join","coursePreReqs","prereqs","StringBuffer","eachPreReq","RegExp","test","replace","PreReqChecker","droppingSemester","concentrationToSemester","ExportPlan","toString","csvContent","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","HowToDropDown","Dropdown","Toggle","Menu","HowToNavigation","WholeAppInfo","Image","fluid","src","process","color","ConcentrationContainerInfo","NavBarInfo","flush","SemesterTableInfo","HandleHowToDisplay","HowToDisplay","setShow","currDisplay","setCurrDisplay","handleClose","Container","href","rel","MainPage","toastDisplay","toastMessage","setToastMessage","deleteTriggered","setDeleteTriggered","setTimeout","undefined","newObj","displayToast","msg","onDragEnd","Navbar","expand","Brand","Collapse","Nav","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","err","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a98237d5.chunk.js","sourcesContent":["import { Modal, Toast } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: { display: boolean }): JSX.Element =>\n    <Modal show={props.display}>\n        <Modal.Header>\n            <Modal.Title>\n                Welcome to the Course App!\n            </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            Here you can drag and drop courses into your schedule,\n            and also concentrations are available to select from the dropdown as well!\n        </Modal.Body>\n        <Modal.Footer>\n            <small>Created by Kurt, Luke, and Cameron!</small>\n        </Modal.Footer>\n    </Modal>;\n\n\nexport const PreReqSameSemesterToast = (props: { errMsg: string; display: boolean; setToastDisplay: React.Dispatch<React.SetStateAction<boolean>> }): JSX.Element =>\n    <Toast bg=\"danger\" show={props.display} onClose={() => {\n        props.setToastDisplay(false);\n    }}>\n        <Toast.Header>\n            <strong className=\"me-auto\">Invalid Course Selected</strong>\n            <small>\n                Close\n            </small>\n        </Toast.Header>\n        <Toast.Body>\n            {props.errMsg}\n        </Toast.Body>\n    </Toast>;\n","import React from \"react\";\nimport { Badge, Modal } from \"react-bootstrap\";\nexport const CourseInfo = (\n    props:\n    {display: boolean;\n    setDisplay: React.Dispatch<React.SetStateAction<boolean>>;\n    name: string;\n    title: string;\n    description: string;\n    credits: number;\n}): JSX.Element => {\n    const courseName = props.name.split(\"-\")[0];\n    const courseTitle = props.name.split(\"-\")[1];\n    return (\n        <Modal onHide={() => props.setDisplay(false)} show={props.display}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <h1>{`${courseName}`}</h1>\n                    <h5>{`${courseTitle}`}</h5>\n                    <Badge>Credits: {`${props.credits}`}</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {`${props.description}`}\n            </Modal.Body>\n        </Modal>\n    );\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../../css/style.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React, { useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { CourseInfo } from \"./CourseInfo\";\n\n\nexport const Course = (props: { name: string; description: string; title: string; credits: number; ind: number }): JSX.Element => {\n    const [display, setDisplay] = useState<boolean>(false);\n    return (\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {prov =>\n                <ListGroup.Item data-testid=\"courseitem\"ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>\n                    {props.name}\n                    <button className=\"course-button\" onClick={() => {\n                        setDisplay(!display);\n                    }}>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-three-dots-vertical\" viewBox=\"0 0 16 16\">\n                            <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\"/>\n                        </svg>\n                    </button>\n                    {display && <CourseInfo display={display} setDisplay={setDisplay} name={props.name}\n                        title={props.title} description={props.description} credits={props.credits}></CourseInfo>}\n                </ListGroup.Item>\n            }\n        </Draggable>\n    );\n};\n    \n","import React, { useState } from \"react\";\nimport { Modal, Button, Badge, Row, Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\nexport const EditCourse = (props: {\n    display: boolean;\n    setDisplay: React.Dispatch<React.SetStateAction<boolean>>;\n    course: CourseType;\n    semesterNumber: number;\n    semesterCourses: SemesterType[];\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>;\n}): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    const [titleText, setTitleText] = useState(props.course.title);\n    const [descText, setDescText] = useState(props.course.description);\n\n    const closeDisplay = (): void => {\n        props.setDisplay(false);\n    };\n    const courseEdit = () => {\n        const theSemester: SemesterType = props.semesterCourses[props.semesterNumber];\n        const courseIndex: number = theSemester.courses.findIndex(elem => elem.name === props.course.name);\n        const theCourse: CourseType = {...theSemester.courses[courseIndex], name: nameText, title: titleText, description: descText};\n        theSemester.courses[courseIndex] = theCourse;\n        theSemester.courseSetter(theSemester.courses);\n        props.semesterCourses[props.semesterNumber] = theSemester;\n        props.setSemesterCourses([...props.semesterCourses]);\n        props.setDisplay(false);\n    };\n    return (\n        <Modal onHide={() => closeDisplay()} show={props.display} >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Badge bg=\"primary\">Edit Course Details</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col>\n                        Enter name here:\n                    </Col>\n                    <Col>\n                        <input\n                            onChange={elem => {\n                                setNameText(elem.target.value);\n                            }}\n                            placeholder=\"Enter Course Name\"\n                            type=\"textbox\"\n                            value={nameText}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        Enter Title here:\n                    </Col>\n                    <Col>\n                        <input\n                            onChange={elem => {\n                                setTitleText(elem.target.value);\n                            }}\n                            placeholder=\"Enter Course Title\"\n                            type=\"textbox\"\n                            value={titleText}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        Enter description here:\n                    </Col>\n                    <Col>\n                        <form>\n                            <textarea\n                                cols={45}\n                                onChange={elem => {\n                                    setDescText(elem.target.value);\n                                }}\n                                placeholder=\"Enter Course Description\"\n                                rows={10}\n                                value={descText}\n                            />\n                        </form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{ display: \"block\", textAlign: \"center\" }}>\n                <Button onClick={courseEdit} variant=\"outline-primary\" >Submit Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Col, Button, } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n\nexport const EditCoursePanel = (props: {semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>, elem: CourseType, ind: number}): JSX.Element => {\n\n    const [display, setDisplay] = useState<boolean>(false);\n\n    return(\n        <Col lg=\"1\" xs>\n            <Button onClick={() => {\n                setDisplay(true);\n            }} \n            variant=\"warning\" \n            />\n            {\n                display\n                &&\n                <EditCourse\n                    course={props.elem}\n                    display={display}\n                    setDisplay={setDisplay}\n                    semesterCourses={props.semesterCourses}\n                    semesterNumber={props.ind}\n                    setSemesterCourses={props.setSemesterCourses}\n                />\n            }\n        </Col>\n    );\n\n};","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Table, ListGroup, Accordion, Col, Row, Badge } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { EditCoursePanel } from \"../courses/EditCoursePanel\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: {\n    ind: number;\n    semesterCourses: SemesterType[];\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>;\n}): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n    const [credits, setCredits] = useState<number>(0);\n\n    useEffect(() => {\n\n        if (!props.semesterCourses.find(elem => elem.semesternum === props.ind + 1)) {\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({ courseSetter: (newCourses: CourseType[]) => {\n                setCourses(newCourses);\n            }, courses, semesternum: props.ind + 1 });\n            props.setSemesterCourses(semesters);\n        }\n    }, []);\n\n    const getCredits = (courses: CourseType[]) => {\n        const tmpCourses: CourseType[] = courses;\n        let count = 0;\n        for (const eachCourse of tmpCourses) {\n            count += eachCourse.credits;\n        }\n        setCredits(count);\n    };\n\n    useEffect(() => {\n        getCredits(courses);\n    }, [courses]);\n\n    return (\n        <Accordion defaultActiveKey=\"0\" key={`accordion ${props.ind}`} data-testid=\"semesteraccordian\" >\n            <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>\n                    <Col xs={2}>\n                        {`Semester ${props.ind + 1}`}\n                    </Col>\n                    <Col>\n                        <Badge>\n                            {`Credits: ${credits}`}\n                        </Badge>\n                    </Col>\n                </Accordion.Header>\n                <Accordion.Body>\n                    <Col key={`semester-table-col-${props.ind}`}>\n                        <Droppable droppableId={`semester-table-${props.ind + 1}`}>\n                            {(prov: DroppableProvided) =>\n                                <Table key={`semester-table-table-${props.ind}`}>\n                                    <thead>\n                                        <tr>\n                                            <td>{`${getSemesterStr(props.ind + 1)}`}</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                                        <tr>\n                                            <td>\n                                                <ListGroup data-testid=\"semestertable\">\n                                                    {\n                                                        courses.map((elem: CourseType, index: number) =>\n                                                            <ListGroup.Item key={elem.name}>\n                                                                <Row>\n                                                                    <Col>\n                                                                        <Course ind={index} name={`${elem.name}${elem.title.length > 0? \"-\" + elem.title:\"\"}`}\n                                                                            description={elem.description} title={elem.title} credits={elem.credits} />\n                                                                    </Col>\n                                                                    <EditCoursePanel semesterCourses={props.semesterCourses} setSemesterCourses={props.setSemesterCourses} elem={elem} ind={props.ind}  />\n                                                                </Row>\n                                                            </ListGroup.Item>,\n                                                        )\n                                                    }\n                                                </ListGroup>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            }\n                        </Droppable>\n                    </Col>\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    );\n\n\n};\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number;\n        semestersCourses: SemesterType[];\n        setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>;\n    }): JSX.Element =>\n    <div>\n        {\n            new Array(props.semesters).fill(0)\n                .map((elem, ind) => <Semester ind={ind} key={`semester-table-key-${elem}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />)\n        }\n    </div>;\n","import { NavDropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport const DropdownMenu = (props: {\n        setConcentration: React.Dispatch<React.SetStateAction<Concentration>>;\n        semesterCourses: SemesterType[];\n        setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>;\n    }): JSX.Element => {\n\n    const clickFunc = (ind: number) => {\n\n        const tmpSemesterCourses = [...props.semesterCourses];\n\n        for (let i = 0; i < tmpSemesterCourses.length; i += 1) {\n\n            const tmpSemester = tmpSemesterCourses.splice(i, 1)[0];\n            tmpSemester.courses = [];\n            tmpSemester.courseSetter([]);\n            tmpSemesterCourses.splice(i, 0, tmpSemester);\n\n        }\n        props.setSemesterCourses([...tmpSemesterCourses]);\n        \n        props.setConcentration(CONCENTRATIONS[ind]);\n\n    };\n\n    return (\n        <div>\n            <NavDropdown id=\"basic-navbar-nav\" title=\"Concentrations\" >\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(0);\n                    }}\n                >AI and Robotics\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(1);\n                    }}\n                >\n                    Bioinformatics\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(2);\n                    }}\n                >\n                    Cybersecurity\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(3);\n                    }}\n                >\n                    Data Science\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(4);\n                    }}\n                >\n                    High-Performance Computing\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(5);\n                    }}\n                >\n                    Networks and Systems\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(6);\n                    }}\n                >\n                    Theory\n                </NavDropdown.Item>\n\n            </NavDropdown>\n        </div>\n    );\n};\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[]; name: string }): JSX.Element =>\n    <Droppable droppableId={props.name}>\n        {prov =>\n            <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                {props.courses.map((elem: CourseType, index: number) => <Course ind={index} key={elem.name} name={`${elem.name}${elem.title.length > 0? \"-\"+elem.title: \"\"}`}\n                    description={elem.description} title={elem.title} credits={elem.credits} />)}\n                {prov.placeholder}\n            </ListGroup>\n        }\n    </Droppable>;\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\n\nexport const AIConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,\n        setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,\n        setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,\n        setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,\n        setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].lab));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstone1Courses,\n                    name: \"capstone-1\",\n                    setCourses: setCapstone1Courses,\n\n                },\n                {\n                    courses: general1Courses,\n                    name: \"general-1\",\n                    setCourses: setGeneral1Courses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: capstone2Courses,\n                    name: \"capstone-2\",\n                    setCourses: setCapstone2Courses,\n                },\n                {\n                    courses: general2Courses,\n                    name: \"general-2\",\n                    setCourses: setGeneral2Courses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"elective\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab-1\",\n                    setCourses: setLabCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n\n    return (\n        <div>\n            <h2>Artificial Intelligence and Robotics</h2>\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>CISC Core and Concentration</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstone1Courses} name=\"capstone-1\" />\n                        <CourseContainer courses={general1Courses} name=\"general-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>Two-Course Lab Sequence</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>Writing Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>Statistics Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={capstone2Courses} name=\"capstone-2\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>Systems Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={general2Courses} name=\"general-2\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n                    <Accordion.Header>Electives(Select Four)</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={electiveCourses} name=\"elective\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n            </Accordion>\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const BioConc = (props: { StringsToCourses: (\n        stringCourses: string[]) => CourseType[];\n        setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].lab));\n    const [ochemCourses,\n        setOchemCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.ochem));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.elective));\n    const [dataCourses,\n        setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.data));\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab-1\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"electives\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: dataCourses,\n                    name: \"data\",\n                    setCourses: setDataCourses,\n                },\n                {\n                    courses: ochemCourses,\n                    name: \"ochem-1\",\n                    setCourses: setOchemCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n\n    return (\n        <div>\n            <h2>Bioinformatics</h2>\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Chem Sequence\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Organic Chem Sequence\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={ochemCourses} name=\"ochem-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        Writing Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        One Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={statCourses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        One Data Analysis Course\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={dataCourses} name=\"data\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"6\">\n\n                    <Accordion.Header>\n                        Two Electives\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={electiveCourses} name=\"electives\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n            </Accordion>\n\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\n\nexport const DataScienceConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].writing));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].lab));\n    const [dataCourses,\n        setDataCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].conc.data));\n    const [mathCourses,\n        setMathCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].conc.stats));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab-1\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"electives\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: dataCourses,\n                    name: \"datascience\",\n                    setCourses: setDataCourses,\n                },\n                {\n                    courses: mathCourses,\n                    name: \"math\",\n                    setCourses: setMathCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n    return (\n        <div>\n            <h2>Data Science</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Data Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={dataCourses} name=\"datascience\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        One Advanced Math\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={mathCourses} name=\"math\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        One Elective\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={electiveCourses} name=\"electives\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n\n            </Accordion>\n\n\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const HPCConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].writing));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].lab));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.stats));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.elective));\n    const [mathCourses,\n        setMathCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.data));\n    const [dataCourses,\n        setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.track));\n    const [learningCourses,\n        setLearningCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.cybersecurity));\n    const [dataTrackCourses,\n        setDataTrackCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.ochem));\n    useEffect(() => {\n        props.setConcentrationContainers(\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab-1\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"elective\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: mathCourses,\n                    name: \"math\",\n                    setCourses: setMathCourses,\n                },\n                {\n                    courses: dataCourses,\n                    name: \"dataCourses\",\n                    setCourses: setDataCourses,\n                },\n                { courses: learningCourses, name: \"machineLearningCourses\", setCourses: setLearningCourses },\n                { courses: dataTrackCourses, name: \"dataTrack\", setCourses: setDataTrackCourses },\n            ],\n        );\n    }, []);\n\n    return (\n        <div>\n            <h2>High-Performance Computing</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n\n                    <Accordion.Header>\n                        Choose one of the tracks\n                    </Accordion.Header>\n                    <Accordion.Body>\n\n                        <Accordion>\n\n                            <Accordion.Item eventKey=\"4\">\n\n                                <Accordion.Header>\n                                    Applied Math\n                                </Accordion.Header>\n                                <Accordion.Body>\n\n                                    <CourseContainer courses={electiveCourses} name=\"elective\" />\n                                    <CourseContainer courses={mathCourses} name=\"math\" />\n                                    <CourseContainer courses={statCourses} name=\"stat\" />\n\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n                            <Accordion.Item eventKey=\"5\">\n\n                                <Accordion.Header>\n                                    Data Track\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={dataCourses} name=\"dataCourses\" />\n                                    <CourseContainer courses={dataTrackCourses} name=\"dataTrack\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                        </Accordion>\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"6\">\n\n                    <Accordion.Header>\n                        One Machine Learning\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={learningCourses} name=\"machineLearningCourses\" />\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n            </Accordion>\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const NetworksConc = (props:\n        { StringsToCourses: (stringCourses: string[]) => CourseType[];\n        setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].lab));\n    const [secCourses,\n        setSecCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.cybersecurity));\n    const [systemsCourses,\n        setSystemsCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.systems));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab-1\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: secCourses,\n                    name: \"security\",\n                    setCourses: setSecCourses,\n                },\n                {\n                    courses: systemsCourses,\n                    name: \"systems\",\n                    setCourses: setSystemsCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"electives\",\n                    setCourses: setElectiveCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n    return (\n        <div>\n            <h2>Networks and Systems</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={statCourses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        One Security Math\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={secCourses} name=\"security\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        Two Systems Courses\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={systemsCourses} name=\"systems\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"6\">\n\n                    <Accordion.Header>\n                        Two Electives\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n                        <CourseContainer courses={electiveCourses} name=\"electives\" />\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n            </Accordion>\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const SecurityConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].lab));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.elective));\n    const [secCourses,\n        setSecCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.cybersecurity));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab-1\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"electives\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: secCourses,\n                    name: \"security\",\n                    setCourses: setSecCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n    return (\n        <div>\n            <h2>Cybersecurity</h2>\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={statCourses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        Two Advanced Requirements\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={secCourses} name=\"security\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        Two Electives\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={electiveCourses} name=\"electives\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n\n            </Accordion>\n\n\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const TheoryConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].lab));\n    const [discCourses,\n        setDiscCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.track));\n    const [contCourses,\n        setContCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.cybersecurity));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab-1\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: discCourses,\n                    name: \"discrete\",\n                    setCourses: setDiscCourses,\n                },\n                {\n                    courses: contCourses,\n                    name: \"continuous\",\n                    setCourses: setContCourses,\n                },\n            ],\n        );\n    }, []);\n    return (\n        <div>\n            <h2>Theory</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={statCourses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"4\">\n\n                    <Accordion.Header>\n                        Select One of the Four-Course Tracks\n                    </Accordion.Header>\n                    <Accordion.Body>\n\n                        <Accordion>\n\n                            <Accordion.Item eventKey=\"5\">\n\n                                <Accordion.Header>\n                                    Discrete\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={discCourses} name=\"discrete\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                            <Accordion.Item eventKey=\"6\">\n\n                                <Accordion.Header>\n                                    Continuous\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={contCourses} name=\"continuous\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                        </Accordion>\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n            </Accordion>\n\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc } from \"./concentrations/AIConc\";\nimport { BioConc } from \"./concentrations/BioConc\";\nimport { DataScienceConc } from \"./concentrations/DataScienceConc\";\nimport { HPCConc } from \"./concentrations/HPCConc\";\nimport { NetworksConc } from \"./concentrations/NetworksConc\";\nimport { SecurityConc } from \"./concentrations/SecurityConc\";\nimport { TheoryConc } from \"./concentrations/TheoryConc\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport const DisplayCourseList = (props: {\n        concentration: Concentration;\n        setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n\n    function StringsToCourses(stringCourses: string[]): CourseType[] {\n        /** Takes a list of strings, and returns a list of courses by looking in courses.json for matching names.\n         *  Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n        const allCourses = COURSES as CourseType[];\n        const tmparr: CourseType[] = stringCourses.map(elem => [...allCourses.filter(i => i.name === elem)]).flat(2);\n        return tmparr;\n    }\n\n    if (props.concentration === CONCENTRATIONS[0]) {\n        return (\n            <AIConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[1]) {\n        return (\n            <BioConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[2]) {\n        return (\n            <SecurityConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[3]) {\n        return (\n            <DataScienceConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[4]) {\n        return (\n            <HPCConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[5]) {\n        return (\n            <NetworksConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[6]) {\n        return (\n            <TheoryConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } return <div />;\n};\n","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: {\n        setSemesters: React.Dispatch<React.SetStateAction<number>>;\n        semesters: number;\n    }): JSX.Element =>\n\n    <Button\n        onClick={() => {\n            let tmpSemesters = props.semesters;\n            tmpSemesters += 1;\n            props.setSemesters(tmpSemesters);\n        }}\n        variant=\"outline-primary\"\n        data-testid=\"addsemesterbutton\"\n    >\n        Add Semester\n    </Button>;\n","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const DeleteSemesterButton = (props: {\n        setDelete: React.Dispatch<React.SetStateAction<number>>;\n    }): JSX.Element => \n\n    <Button variant=\"outline-danger\" data-testid=\"deletesemesterbutton\" onClick={() => {\n        props.setDelete(0);\n    }}>Delete Semester</Button>;\n","import { SemesterType } from \"../../../interfaces/semester\";\n\nexport const semesterToSemester = (\n    semester: SemesterType,\n    semester2: SemesterType,\n    spliceInd: number,\n    dropInd: number,\n    diffSemester: boolean,\n): number => {\n    console.log(\"in semester ---> semester\");\n    if (diffSemester) {\n        const splicedCourse = semester.courses.splice(spliceInd, 1)[0];\n        semester2.courses.splice(dropInd, 0, splicedCourse);\n        semester.courseSetter([...semester.courses]);\n        semester2.courseSetter([...semester2.courses]);\n    } else {\n        const splicedCourse = semester.courses.splice(spliceInd, 1)[0];\n        semester.courses.splice(dropInd, 0, splicedCourse);\n        semester.courseSetter([...semester.courses]);\n    }\n    return 1;\n};\n","import React from \"react\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\n\nexport const concentrationToConcentration = (\n    result: DropResult,\n    concContainers: ConcentrationContainerType[],\n    concContainer: ConcentrationContainerType,\n    spliceInd: number,\n    courseSpliceInd: number,\n    dropInd: number,\n    setConcContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>,\n    isDifferent: boolean,\n): number => {\n    console.log(\"in concentration ---> concentration\");\n    const ind2 = isDifferent ?\n        concContainers.findIndex(elem => elem.name === result.destination?.droppableId) : -1;\n    if (ind2 === -1) { /* Case if we are dropping within the same _exact_ container such as core --> core */\n        const tmpConcContainerCourse = concContainer.courses.splice(courseSpliceInd, 1)[0];\n        concContainer.courses.splice(dropInd, 0, tmpConcContainerCourse);\n        concContainer.setCourses([...concContainer.courses]);/* may be able to delete this line */\n        concContainers.splice(spliceInd, 0, concContainer);/* may not have to deal with splicing, and direct reference the index like above with the implementation of semester --> concentration */\n        setConcContainers(concContainers);\n    } else if (ind2 !== -1) { /* Case if we are dropping within the concentration containers, but different containers, such as core --> elective */\n        const diffContainer = concContainers[ind2];\n        const tmpConcContainerCourseDrag = concContainer.courses.splice(courseSpliceInd, 1)[0];\n        concContainer.setCourses([...concContainer.courses]);// update courses we just spliced from\n        diffContainer.courses.splice(dropInd, 0, tmpConcContainerCourseDrag);\n        diffContainer.setCourses([...diffContainer.courses]);\n    }\n    return 1;\n};\n","import React from \"react\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { semesterToSemester } from \"./DNDLogic/semesterToSemester\";\nimport { semesterToConcentration } from \"./DNDLogic/semesterToConcentration\";\nimport { concentrationToConcentration } from \"./DNDLogic/concentrationToConcentration\";\nimport { concentrationToSemester } from \"./DNDLogic/concentrationToSemester\";\nimport { PreReqChecker } from \"./DNDLogic/prereqchecker\";\n\nexport const successPrint = (result: number): void => {\n    console.log(result >= 1 ? \"Success!\" : \"Failure\");\n};\n\nexport const onDragEndLogic = (result: DropResult,\n    concentrationContainers: ConcentrationContainerType[],\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>,\n    semesterCourses: SemesterType[],\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>,\n    setErrMsg: (msg: string) => void,\n): void => {\n    if (!result.destination) {\n        return;\n    }\n    /*\n    If where you are dropping TO is a semester\n    */\n    const sourceId = result.source.droppableId;\n    const destinationId = result.destination.droppableId;\n    const sourceIdSemester = sourceId.includes(\"semester-table\");\n    const destIdSemester = destinationId.includes(\"semester-table\");\n    const sourceIndex = result.source.index;\n    const dropIndex = result.destination.index;\n    if (sourceId === destinationId) {\n        // check if both are semester table, if not then conc container\n        if (sourceIdSemester) {\n            // semestertable --> semestertable\n            const semesterNum1 = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n            const ind1 = semesterCourses.findIndex(elem => elem.semesternum === semesterNum1);\n            semesterToSemester(\n                semesterCourses[ind1],\n                semesterCourses[ind1],\n                result.source.index,\n                result.destination.index,\n                false);\n        } else {\n            // concentration --> concentration\n            const tmpContainer: ConcentrationContainerType[] = [...concentrationContainers];\n            let ind1 = tmpContainer.findIndex(elem => elem.name === destinationId);\n            ind1 = sourceId === destinationId ?\n                concentrationToConcentration(result,\n                    concentrationContainers,\n                    concentrationContainers.splice(ind1, 1)[0],\n                    ind1, sourceIndex, dropIndex, setConcentrationContainers, false) :\n                concentrationToConcentration(result,\n                    concentrationContainers,\n                    concentrationContainers.splice(ind1, 1)[0],\n                    ind1, sourceIndex, dropIndex, setConcentrationContainers, true);\n            successPrint(ind1);\n        }\n    } else if (sourceIdSemester) { // semester --> concentration\n    // dropId != destinationId\n        const semesterNum = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n        const ind1 = semesterCourses.findIndex(elem => elem.semesternum === semesterNum);\n        let ind2 = destIdSemester ?\n            semesterCourses.findIndex(elem =>\n                elem.semesternum === parseInt(destinationId.substring(destinationId.lastIndexOf(\"-\") + 1), 10))\n            :\n            concentrationContainers.findIndex(elem =>\n                elem.name === destinationId);\n        ind2 = destIdSemester ?\n            semesterToSemester(\n                semesterCourses[ind1],\n                semesterCourses[ind2],\n                sourceIndex, dropIndex, true) :\n            semesterToConcentration(concentrationContainers,\n                ind2,\n                result.source.index,\n                setConcentrationContainers,\n                semesterCourses, setSemesterCourses, ind1, result.destination.index);\n        successPrint(ind2);\n    } else {\n        // place prereq checker here\n        // concentration --> semester\n        const semesterNum = parseInt(destinationId.substring(destinationId.lastIndexOf(\"-\") + 1), 10);\n        const tmpContainer: ConcentrationContainerType[] = [...concentrationContainers];\n        //console.log(Object.values(tmpContainer), \"sourceId =\", sourceId);\n        let ind1 = tmpContainer.findIndex(elem => elem.name === sourceId);\n        const ind2 = semesterCourses.findIndex(elem => elem.semesternum === semesterNum);\n        if (PreReqChecker(\n            semesterCourses,\n            semesterNum - 1,\n            concentrationContainers[ind1].courses[result.source.index],\n            setErrMsg)) {\n            ind1 = ind1 > -1 ?\n                concentrationToSemester(\n                    concentrationContainers[ind1],\n                    result.source.index,\n                    result.destination.index,\n                    semesterCourses[ind2],\n                ) : -1;\n            //console.log(Object.values(semesterCourses));\n        }\n        successPrint(ind1 > -1 ? 1 : 0);\n    }\n};\n","import React from \"react\";\nimport { SemesterType } from \"../../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const semesterToConcentration = (\n    concContainers: ConcentrationContainerType[],\n    concentrationInd: number,\n    courseSpliceInd: number,\n    setConcContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>,\n    semesterCourses: SemesterType[],\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>,\n    semesterInd: number,\n    courseDropInd: number,\n): number => {\n    console.log(\"in semester ---> concentration\");\n    const theCourse: CourseType = semesterCourses[semesterInd].courses.splice(courseSpliceInd, 1)[0];\n    semesterCourses[semesterInd].courses = [...semesterCourses[semesterInd].courses];/* may be able to delete this line*/\n    semesterCourses[semesterInd].courseSetter([...semesterCourses[semesterInd].courses]);/* may be able to delete this line*/\n    setSemesterCourses([...semesterCourses]);\n    concContainers[concentrationInd].courses.splice(courseDropInd, 0, theCourse);\n    concContainers[concentrationInd].courses = [...concContainers[concentrationInd].courses];/* may be able to delete this line */\n    concContainers[concentrationInd].setCourses([...concContainers[concentrationInd].courses]);/* may be able to delete this line */\n    setConcContainers([...concContainers]);\n    return 1;\n};\n","import { Course as CourseType } from \"../../../interfaces/course\";\nimport { SemesterType } from \"../../../interfaces/semester\";\n\nexport const PreReqChecker = (semesters: SemesterType[],\n    placingIndex: number,\n    courseBeingPlaced: CourseType,\n    setErrMsg: (msg: string) => void,\n): boolean => {\n    const semesterCourses: string = semesters.slice(0, placingIndex)\n        .map(elem => elem.courses.map(eachcourse => eachcourse.name))\n        .flat(2)\n        .join(\"\");\n    const coursePreReqs: string[] = courseBeingPlaced.prereqs;\n    const StringBuffer: string[] = [];\n    for (const eachPreReq of coursePreReqs) {\n        const expr = new RegExp(eachPreReq);\n        const result: boolean = expr.test(semesterCourses);\n        if (!result) {\n            StringBuffer.push(eachPreReq.includes(\"|\") ? `${eachPreReq.split(\"|\").join(\" or \")}, and ` : `${eachPreReq}, and `);\n        }\n    }\n    if (StringBuffer.length > 0) {\n        StringBuffer[StringBuffer.length - 1] = StringBuffer[StringBuffer.length - 1].replace(\", and\", \"\");\n        setErrMsg(`PreReq(s) required are : ${StringBuffer.join(\"\\n\")}`);\n        return false;\n    }\n    return true;\n};\n","import { SemesterType } from \"../../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const concentrationToSemester = (\n    concContainer: ConcentrationContainerType,\n    spliceInd: number,\n    dropInd: number,\n    droppingSemester: SemesterType,\n): number => {\n    console.log(\"in concentration --> semester\");\n    const theCourse: CourseType = concContainer.courses.splice(spliceInd, 1)[0];\n    concContainer.setCourses([...concContainer.courses]); /*  Optional line - may be able to remove  */\n    droppingSemester.courses.splice(dropInd, 0, theCourse);\n    droppingSemester.courseSetter([...droppingSemester.courses]); /* Optional line - may be able to remove */\n    return 1;\n};\n","import React from \"react\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { Button } from \"react-bootstrap\";\n\nexport const ExportPlan = (props: { semesterCourses: SemesterType[] }): JSX.Element => {\n    const data: string[][] = [[\"Semester\", \"Course\", \"Credits\"]];\n\n    return (\n        <Button\n            onClick={() => {\n                for (let i = 0; i < props.semesterCourses.length; i += 1) {\n                    const courses = props.semesterCourses[i].courses;\n                    const semesterNum = (i + 1).toString();\n                    for (const eachcourse of courses) {\n                        const courseName = eachcourse.name;\n                        const credits = eachcourse.credits.toString();\n                        data.push([semesterNum, courseName, credits]);\n                    }\n                }\n                const csvContent = `data:text/csv;charset=utf-8,${data.map(elem => elem.join(\",\")).join(\"\\n\")}`;\n\n                const encodedUri = encodeURI(csvContent);\n                const link = document.createElement(\"a\");\n                link.setAttribute(\"href\", encodedUri);\n                link.setAttribute(\"download\", \"my_course_plan.csv\");\n                document.body.appendChild(link);\n                link.click();\n            }}\n            variant=\"outline-secondary\"\n            data-testid=\"exportcsvbutton\"\n        >\n            Export CSV\n        </Button>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const HowToDropDown = ({ setDisplay }:\n    { setDisplay: React.Dispatch<React.SetStateAction<number>> }): JSX.Element =>\n    <Dropdown>\n        <Dropdown.Toggle id=\"dropdown-basic\" variant=\"success\">\n            Help Menu\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(1);\n                }}\n            >\n                Application Layout\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(2);\n                }}\n            >\n                Navbar\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(3);\n                }}\n            >\n                Concentration Table\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(4);\n                }}\n            >\n                Semester Table\n            </Dropdown.Item>\n        </Dropdown.Menu>\n    </Dropdown>;\n","import { Modal, Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const HowToNavigation = (): JSX.Element =>\n\n    <Modal.Body>\n        How to navigate the help menu:\n        <ul>\n            <li>\n                There is a dropdown menu that looks like this:\n                <Dropdown>\n                    <Dropdown.Toggle id=\"dropdown-basic\" variant=\"outline-success\">\n                        Help Menu\n                    </Dropdown.Toggle>\n                </Dropdown>\n                This dropdown is used to access all of the help menu options\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WholeAppInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/wholeapp.PNG`} />\n        <ul>\n            <li>\n                The <b style={{ color: \"red\" }}>red box</b> is the navbar, which contains links to useful resources (such as course registration/lookup and also undergrad information about concentrations/courses)\n            </li>\n            <li>\n                The <b style={{ color: \"green\" }}>green box</b> is where the concentration requirements are stored, the name of the concentration above. In this example, the name is <b>Artificial Intelligence and Robotics</b>, to access the individual courses of each concentration requirement category, click on the category and a dropdown list of courses you can drag into the blue box appear.\n            </li>\n            <li>\n                The <b style={{ color: \"blue\" }}>blue box</b> is where your semester courses will be. To enter courses into your semester, simply drag them from the concentration requirements(that is the <b style={{ color: \"green\" }}>green box</b>) into the semester box (that is the <b style={{ color: \"blue\" }}>blue box</b>)\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const ConcentrationContainerInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/concentrationguide.gif`} />\n        <ul>\n            <li>\n                Each concentration requirement is able to be clicked on to then expand\n                and reveal a lot of courses you can select from that fit into the requirement for the concentration.\n            </li>\n            <li>\n                These courses can then be dragged and dropped into the semester to plan out your semesters!\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image, Accordion } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const NavBarInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/navbarguide.gif`} />\n        <ul>\n            <li>\n                This navbar contains a plethora of options for each student.\n                <ul>\n                    <Accordion flush>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header>\n                                Categories\n                            </Accordion.Header>\n                            <Accordion.Body>\n                                <Accordion flush>\n                                    <Accordion.Item eventKey=\"2\">\n                                        <Accordion.Header>Useful Links</Accordion.Header>\n                                        <Accordion.Body>\n                                            The <em>Useful links</em> menu contains links such as course search,\n                                            list of undergrad courses, and registration add/drop,\n                                            as well as the link to uds computer science student guidance department\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"3\">\n                                        <Accordion.Header>\n                                            Concentrations\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The <em>Concentrations</em> menu contains\n                                                all the different CISC concentrations\n                                                you can select from,\n                                                and adjusts the courses you can choose from accordingly\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"4\">\n                                        <Accordion.Header>\n                                            Add Semester\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The button works as when it is clicked,\n                                                another semester appears beneath the current one\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"5\">\n                                        <Accordion.Header>\n                                            Export CSV\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The export csv button works as when it is clicked,\n                                                a CSV file containing all the semester information\n                                                is saved onto your computer.\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                </Accordion>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                </ul>\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const SemesterTableInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/semesterguide.gif`} />\n        <ul>\n            <li>\n                Each semester comprises of: The Semester it is,\n                meaning 1st semester 2nd etc., the red button, and the credits display.\n                The semester can be toggled on and off to display the courses within it.\n            </li>\n            <li>\n                <ul>\n                    <li>Red button</li>\n                    <ul>\n                        <li>\n                            The red button works as, if you press it and there are courses\n                            in your semester, it deletes all the courses within the semester.\n                        </li>\n                    </ul>\n                    <li>\n                        Course buttons\n                        <ul>\n                            When courses are moved into a semester,\n                            two buttons appear, one that is red, and one that is yellow.\n                            The red button is to delete that single\n                            course from the semester, and the yellow button is to edit the name of\n                            that course.\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </Modal.Body>;\n","import React from \"react\";\nimport { HowToNavigation } from \"../howtosteps/howtonavigation\";\nimport { WholeAppInfo } from \"../howtosteps/wholeappinfo\";\nimport { ConcentrationContainerInfo } from \"../howtosteps/howtoconcentrationcontainer\";\nimport { NavBarInfo } from \"../howtosteps/howtonavbar\";\nimport { SemesterTableInfo } from \"../howtosteps/howtosemestertable\";\n\nexport const HandleHowToDisplay = (display: number): JSX.Element => {\n\n    switch (display) {\n\n    case 0:\n        return <HowToNavigation />;\n    case 1:\n        return <WholeAppInfo />;\n    case 2:\n        return <NavBarInfo />;\n    case 3:\n        return <ConcentrationContainerInfo />;\n    case 4:\n        return <SemesterTableInfo />;\n    default:\n        return <div />;\n\n    }\n\n};\n","import { Button, Modal, Row, Col, Container } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { HowToDropDown } from \"./howtodropdown/howtodropdown\";\nimport { HandleHowToDisplay } from \"./howtodropdown/howtodropdownlogic\";\n\nexport const HowToDisplay = (): JSX.Element => {\n\n    const [show,\n        setShow] = useState<boolean>(false);\n    const handleShow = () => {\n        setShow(true);\n    };\n    const [currDisplay,\n        setCurrDisplay] = useState<number>(0);\n    const handleClose = () => {\n        setCurrDisplay(0);\n        setShow(false);\n    };\n\n    return (\n\n        <>\n            <Button onClick={handleShow}\n                variant=\"outline-success\"\n                data-testid=\"howtobutton\">\n                How To\n            </Button>\n            <Modal onHide={handleClose} show={show}>\n                <Modal.Header closeButton>\n                    <Container>\n                        <Row style={{ textAlign: \"center\" }}>\n                            <Col>\n                                <Modal.Title>\n                                    How to use our app!\n                                </Modal.Title>\n                            </Col>\n                        </Row>\n                        <br />\n                        <br />\n                        <Row style={{ textAlign: \"left\" }}>\n                            <Col>\n                                <HowToDropDown setDisplay={setCurrDisplay} />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Modal.Header>\n                {HandleHowToDisplay(currDisplay)}\n                <Modal.Footer>\n                    <Button onClick={handleClose} variant=\"outline-danger\">\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n\n    );\n\n};\n","import React from \"react\";\n\nexport const Footer = (): JSX.Element =>\n    <div className=\"footer\">\n        <hr />\n        <p>\n            Created by Kurt Hammen, Luke Halko, and Cameron Thacker. Made 2021. Check out\n            {\" \"}\n            <a href=\"https://github.com/UD-CISC275-F21/ud-cis-scheduler-team-4\" rel=\"noopener noreferrer\" target=\"_blank\">our repository.</a>\n        </p>\n    </div>;\n\n// github repository\n// see what other people have\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Container, Row, Col, Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport { WelcomeToast, PreReqSameSemesterToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport { DropdownMenu } from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { DeleteSemesterButton } from \"./semesters/DeleteSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { onDragEndLogic } from \"./util/DropLogic\";\nimport { ExportPlan } from \"./util/ExportPlan\";\nimport { HowToDisplay } from \"./util/howto/howtodisplay\";\nimport { Footer } from \"./util/Footer\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]);\n    const [toastDisplay, setToastDisplay] = useState<boolean>(false); // Will be implemented once basic drop logic is fully implemented\n    const [toastMessage, setToastMessage] = useState<string>(\"\"); // Will be implemented once basic drop logic is fully implemented\n    const [deleteTriggered, setDeleteTriggered] = useState<number>(-1);\n    if (semesters===990){\n        setToastDisplay(false); //need these to not trigger the linter for not being used\n        setToastMessage(\"\");\n    }\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        }, 1);\n    }, []);\n\n    useEffect(() => {\n\n        if (deleteTriggered === 0) {\n            const theSemester: SemesterType | undefined = semesterCourses.length > 0 ? semesterCourses[semesters-1] : undefined;\n            if (theSemester !== undefined && theSemester.courses.length === 0) {\n                theSemester.courseSetter([]);\n                setSemesterCourses([...semesterCourses.slice(0,semesters-1).map(elem => {\n                    const newObj = { ...elem };\n                    newObj.semesternum = elem.semesternum - 1;\n                    return newObj;\n                })]);\n                setSemesters(semesters-1);\n            } else {\n                console.log(\"displaying err\");\n                displayToast(`Move all courses from Semester ${semesters} back into course list on the left`);\n            }\n            setDeleteTriggered(-1);\n        }\n\n    }, [deleteTriggered]);\n\n\n    const displayToast = (msg: string) => {\n        setToastDisplay(true);\n        setToastMessage(msg);\n        setTimeout(() => {\n            setToastDisplay(false);\n        }, 5000);\n    };\n    \n    \n\n    const onDragEnd = (result: DropResult) => {\n        onDragEndLogic(result,\n            concentrationContainers,\n            setConcentrationContainers,\n            semesterCourses,\n            setSemesterCourses,\n            displayToast,\n        );\n    };\n\n    return (\n        <DragDropContext\n            onDragEnd={onDragEnd}\n        >\n            <Container>\n                <br />\n                <Row>\n                    <Col>\n                        <WelcomeToast display={display} />\n                        <PreReqSameSemesterToast display={toastDisplay} errMsg={toastMessage} setToastDisplay={setToastDisplay} />\n                    </Col>\n                </Row>\n                <Row>\n                    <Navbar bg=\"light\" data-testid=\"navbar\" expand=\"lg\" >\n                        <Container>\n                            <Navbar.Brand href=\"#home\">UDCIS Course Scheduler</Navbar.Brand>\n                            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                            <Navbar.Collapse id=\"basic-navbar-nav\">\n                                <Nav className=\"me-auto\">\n                                    <NavDropdown data-testid=\"navbardropdown\" id=\"basic-navbar-nav\" title=\"Useful Links\" >\n                                        <NavDropdown.Item data-testid=\"navdropdownitem1\" href=\"https://udapps.nss.udel.edu/CoursesSearch/\" >Course Search</NavDropdown.Item>\n                                        <NavDropdown.Item data-testid=\"navdropdownitem2\" href=\"https://www.cis.udel.edu/academics/undergraduate-programs/resources/courses/\" >CISC Undergraduate Courses</NavDropdown.Item>\n                                        <NavDropdown.Item data-testid=\"navdropdownitem3\" href=\"https://webreg.nss.udel.edu/registration/schedule/\" >Registration Add/Drop</NavDropdown.Item>\n                                        <NavDropdown.Item data-testid=\"navdropdownitem4\" href=\"https://ud-cis-teaching.github.io/student-guidance/\" >UD CIS Student Guidance</NavDropdown.Item>\n                                    </NavDropdown>\n                                    <DropdownMenu\n                                        semesterCourses={semesterCourses}\n                                        setConcentration={setConcentration}\n                                        setSemesterCourses={setSemesterCourses}\n                                    />\n                                    <AddSemesterButton semesters={semesters} setSemesters={setSemesters} />\n                                    <DeleteSemesterButton\n                                        setDelete={setDeleteTriggered}\n                                    />\n                                    <ExportPlan semesterCourses={semesterCourses} />\n                                    <HowToDisplay />\n                                </Nav>\n                            </Navbar.Collapse>\n                        </Container>\n                    </Navbar>\n                </Row>\n                <Row>\n                    <Col>\n                        <br />\n                        <DisplayCourseList\n                            concentration={concentration}\n                            setConcentrationContainers={setConcentrationContainers}\n                        />\n                    </Col>\n                    <Col>\n                        <br />\n                        <br />\n                        <br />\n                        <br />\n                        <SemesterTable\n                            semesters={semesters}\n                            semestersCourses={semesterCourses}\n                            setSemesterCourses={setSemesterCourses}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Footer />\n                </Row>\n            </Container>\n        </DragDropContext>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nexport const App = (): JSX.Element => {\n    useEffect(() => {\n        document.title = \"UDCIS Course Scheduling Tool\";\n    }, []);\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n};\nexport default App;\n    \n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\n            /* webpackChunkName: \"web-vitals\" */\n            \"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        })\n            .catch(err => err as string);\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}