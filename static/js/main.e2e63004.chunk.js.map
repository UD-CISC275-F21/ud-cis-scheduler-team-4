{"version":3,"sources":["components/util/DispatchLogic/DispatchContext.tsx","components/util/DispatchLogic/UseDispatchContext.tsx","components/util/DispatchLogic/StateContext.tsx","components/util/DispatchLogic/UseStateContext.tsx","components/util/Notifications.tsx","components/courses/CourseInfo.tsx","components/util/DNDLogicV2/prereqchecker.tsx","components/courses/AddCourse.tsx","components/courses/Course.tsx","components/courses/CourseContainer.tsx","components/courses/DisplayCourseListHelperFunctions/StringsToCourses.tsx","components/courses/concentrations/AIConc.tsx","components/courses/concentrations/BioConc.tsx","components/courses/concentrations/DataScienceConc.tsx","components/courses/concentrations/HPCConc.tsx","components/courses/concentrations/NetworksConc.tsx","components/courses/concentrations/SecurityConc.tsx","components/courses/concentrations/TheoryConc.tsx","components/courses/DisplayCourseList.tsx","components/courses/DisplayCourseListHelperFunctions/DisplayCourseListMap.tsx","components/util/DNDLogicV2/DropLogicExecutor.tsx","components/util/DropLogic.tsx","components/util/DNDLogicV2/revprereqchecker.tsx","components/util/Footer.tsx","assets/data/statedata/InitialState.tsx","components/courses/DisplayCourseListHelperFunctions/CoursesToStrings.tsx","components/util/DispatchLogic/SchedulerReducerFunction.tsx","components/util/EditCourse.tsx","components/courses/EditCoursePanel.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/semesters/AddSemesterButton.tsx","components/semesters/DeleteSemesterButton.tsx","components/semesters/ClearAllSemesterButton.tsx","components/util/ExportPlan.tsx","components/util/howto/howtodropdown/howtodropdown.tsx","components/util/howto/howtosteps/howtonavigation.tsx","components/util/howto/howtosteps/wholeappinfo.tsx","components/util/howto/howtosteps/howtoconcentrationcontainer.tsx","components/util/howto/howtosteps/howtonavbar.tsx","components/util/howto/howtosteps/howtosemestertable.tsx","components/util/howto/howtodropdown/howtodropdownlogic.tsx","components/util/howto/howtodisplay.tsx","components/util/PreReqToggleButton.tsx","components/util/ImportPlan.tsx","components/util/DataProcessing/ProcessCSVData.tsx","assets/courseData/CourseNames.tsx","components/util/CreateCourse.tsx","components/util/Navbar/CourseSchedulerNavbar.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DispatchContext","React","createContext","undefined","UseDispatchContext","context","useContext","Error","StateContext","UseStateContext","WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","PreReqSameSemesterToast","state","dispatch","useEffect","setTimeout","type","payload","toastMessage","toastDisplay","Toast","bg","onClose","className","errMsg","CourseInfo","courseName","name","split","courseTitle","onHide","setDisplay","closeButton","Badge","credits","description","PreReqChecker","semesters","placingIndex","courseBeingPlaced","semesterCourses","slice","map","elem","courses","eachcourse","flat","join","coursePreReqs","prereqs","StringBuffer","eachPreReq","RegExp","test","push","includes","length","replace","AddCourse","numberOfSemesters","currentSaveData","concentrationContainers","formattedCourseName","containerIndex","findIndex","eachContainer","eachCourse","courseIndex","theContainer","setModalDisplay","modalDisplay","ListGroup","Array","fill","eachelement","index","Item","action","onClick","preReqToggle","sourceContainerIndex","sourceIndex","destContainerIndex","destIndex","Course","useState","courseInfoDisplay","setCourseInfoDisplay","addCourseModalDisplay","setAddCourseModalDisplay","addCourseButtonDisplay","setAddCourseButtonDisplay","splitName","result","eachSemester","draggableId","ind","prov","ref","innerRef","draggableProps","dragHandleProps","buttonDisplay","setButtonDisplay","src","process","id","height","viewBox","width","xmlns","d","CourseContainer","droppableId","droppableProps","title","placeholder","StringsToCourses","stringCourses","allCourses","COURSES","courseList","filter","i","fromIndex","fromContainerIndex","names","eachName","section","coreqs","lab","AIConc","saveData","concentration","core","capstone","conc","general","writing","stats","systems","elective","Accordion","defaultActiveKey","eventKey","BioConc","eachSaveData","data","ochem","console","log","DataScienceConc","HPCConc","cybersecurity","NetworksConc","SecurityConc","TheoryConc","track","DisplayCourseList","CONCENTRATIONS","DisplayCourseListMap","DropLogicExecutor","dispatchType","destinationContainerIndex","droppingIndex","onDragEndLogic","destination","sourceId","source","destinationId","sourceIdSemester","destIdSemester","dropIndex","semesterNum1","parseInt","substring","lastIndexOf","concentrationNumber1","eachConcentrationContainer","semester1Num","semester2Num","ind1","semesterNum","ind2","preReqCheckerResult","ErrorBuffer","RevPreReqChecker","concentrationContainerIndex","semesterCoursesIndex","concentrationNumberDest","concentrationNumberSource","concentrationName","concentrationClasses","percentage","Math","ceil","ProgressBar","animated","now","label","striped","variant","href","rel","target","initialState","loadedInCourses","newCourse","CoursesToStrings","reducerFunction","produce","draft","theSemester","theCourse","splice","theConcentration","theSourceSemester","theDestSemester","theSplicedCourse","theSourceConcentration","theDestinationConcentration","tmpSaveData","saveDataIndex","newSaveDataIndex","newTextFields","theClass","EditCourse","course","nameText","setNameText","titleText","setTitleText","descText","setDescText","Row","Col","onChange","value","cols","rows","style","textAlign","Button","semesterNumber","EditCoursePanel","lg","xs","getSemesterStr","Semester","semesterCourse","setCourses","setCredits","tmpCourses","count","getCredits","Table","SemesterTable","DropdownMenu","clickFunc","concentrationNumber","NavDropdown","as","AddSemesterButton","size","DeleteSemesterButton","ClearAllSemesterButton","theSemesters","j","ExportPlan","toString","csvContent","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","HowToDropDown","Dropdown","Toggle","Menu","HowToNavigation","WholeAppInfo","Image","fluid","color","ConcentrationContainerInfo","NavBarInfo","flush","SemesterTableInfo","HandleHowToDisplay","HowToDisplay","setShow","currDisplay","setCurrDisplay","handleClose","Container","PreReqToggleButton","ImportPlan","accept","e","files","file","reader","FileReader","onload","evt","bstr","wb","XLSX","wsname","SheetNames","ws","Sheets","currSemester","values","semester","ProcessCSVData","sheet_to_csv","RS","readAsBinaryString","CourseNames","Courses","CreateCourse","setCourseName","courseDescription","setCourseDescription","courseCredits","setCourseCredits","setCourseTitle","selectedPreReqs","setSelectedPreReqs","selectedCoReqs","setSelectedCoReqs","Form","Group","controlId","Control","Text","Label","options","eachCourseName","selectedValues","onSelect","onRemove","displayValue","ButtonToolbar","eachElement","ButtonGroup","formattedPreReqs","formattedCoReqs","eachCoReq","createdCourse","CourseSchedulerNavbar","Navbar","expand","Brand","Collapse","Nav","MainPage","useReducer","dispatchValue","stateValue","Provider","onDragEnd","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","err","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e2e63004.chunk.js","sourcesContent":["import React from \"react\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\n\nexport const DispatchContext = React.createContext<{dispatch: React.Dispatch<SchedulerAction>} | undefined>(undefined);","import { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\nimport { DispatchContext } from \"./DispatchContext\";\nimport React from \"react\";\n\nexport const UseDispatchContext = (): {dispatch: React.Dispatch<SchedulerAction>} => {\n    const context = React.useContext(DispatchContext);\n    if (context === undefined) {\n        throw new Error(\"DispatchContext must have a value\");\n    }\n    return context;\n};","import React from \"react\";\nimport { State } from \"../../../interfaces/State\";\n\nexport const StateContext = React.createContext<{state: State} | undefined>(undefined);","import { State } from \"../../../interfaces/State\";\nimport React from \"react\";\nimport { StateContext } from \"./StateContext\";\n\nexport const UseStateContext = (): {state: State} => {\n    const context = React.useContext(StateContext);\n    if (context === undefined) {\n        throw new Error(\"StateContext must have a value\");\n    }\n    return context;\n};","import { Modal, Toast } from \"react-bootstrap\";\nimport React, { useEffect } from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const WelcomeToast = (props: { display: boolean }): JSX.Element =>\n    <Modal show={props.display}>\n        <Modal.Header>\n            <Modal.Title>\n                Welcome to the Course App!\n            </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            Here you can drag and drop courses into your schedule,\n            and also concentrations are available to select from the dropdown as well!\n        </Modal.Body>\n        <Modal.Footer>\n            <small>Created by Kurt, Luke, and Cameron!</small>\n        </Modal.Footer>\n    </Modal>;\n\n\nexport const PreReqSameSemesterToast = (props: { errMsg: string; display: boolean }): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    useEffect(() => {\n        if (props.display) {\n            setTimeout(() => {\n                dispatch({type: \"displayToast\", payload: { ...state, toastMessage: \"\", toastDisplay: false }});\n            }, 4000);\n        }\n    },[props.display]);\n    return(\n        <Toast\n            bg=\"danger\"\n            onClose={() => {\n                dispatch({type: \"displayToast\", payload: { ...state, toastMessage: \"\", toastDisplay: false }});\n            }}\n            show={props.display}\n        >\n            <Toast.Header>\n                <strong className=\"me-auto\">Invalid Course Selected</strong>\n                <small>\n                    Close\n                </small>\n            </Toast.Header>\n            <Toast.Body>\n                {props.errMsg}\n            </Toast.Body>\n        </Toast>\n    );\n};\n","import React from \"react\";\nimport { Badge, Modal } from \"react-bootstrap\";\n\nexport const CourseInfo = (\n    props:\n    {display: boolean;\n    setDisplay: React.Dispatch<React.SetStateAction<boolean>>;\n    name: string;\n    description: string;\n    credits: number;\n}): JSX.Element => {\n    const courseName = props.name.split(\"-\")[0];\n    const courseTitle = props.name.split(\"-\")[1];\n    return (\n        <Modal\n            onHide={() => {\n                props.setDisplay(false);\n            }}\n            show={props.display}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <h1>{`${courseName}`}</h1>\n                    <h5>{`${courseTitle}`}</h5>\n                    <Badge>Credits: {`${props.credits}`}</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {`${props.description}`}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import { Course as CourseType } from \"../../../interfaces/course\";\nimport { Semester } from \"../../../interfaces/semester\";\nimport React from \"react\";\nimport { State } from \"../../../interfaces/State\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\n\nexport const PreReqChecker = (\n    semesters: Semester[],\n    placingIndex: number,\n    courseBeingPlaced: CourseType,\n    state: State,\n    dispatch: React.Dispatch<SchedulerAction>\n): boolean => {\n    const semesterCourses: string = semesters.slice(0, placingIndex)\n        .map(elem => elem.courses.map(eachcourse => eachcourse.name))\n        .flat(2)\n        .join(\"\");\n    const coursePreReqs: string[] = courseBeingPlaced.prereqs;\n    const StringBuffer: string[] = [];\n    for (const eachPreReq of coursePreReqs) {\n        const expr = new RegExp(eachPreReq);\n        const result: boolean = expr.test(semesterCourses);\n        if (!result) {\n            StringBuffer.push(eachPreReq.includes(\"|\") ? `${eachPreReq.split(\"|\").join(\" or \")}, and ` : `${eachPreReq}, and `);\n        }\n    }\n    if (StringBuffer.length > 0) {\n        StringBuffer[StringBuffer.length - 1] = StringBuffer[StringBuffer.length - 1].replace(\", and\", \"\");\n        dispatch({type: \"displayToast\", payload: { ...state, toastMessage: `PreReq(s) required are : ${StringBuffer.join(\"\\n\")}`, toastDisplay: true}});\n        return false;\n    }\n    return true;\n};","import React from \"react\";\nimport { ListGroup, Modal } from \"react-bootstrap\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\nimport { PreReqChecker } from \"../util/DNDLogicV2/prereqchecker\";\n\nexport const AddCourse = (\n    props: {\n        modalDisplay:boolean;\n        setModalDisplay:React.Dispatch<React.SetStateAction<boolean>>;\n        courseName: string;\n        buttonDisplay: boolean;\n        setButtonDisplay: React.Dispatch<React.SetStateAction<boolean>>;\n    }\n): JSX.Element => {\n    \n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const numberOfSemesters = state.currentSaveData.semesters.length;\n    const concentrationContainers = state.concentrationContainers;\n    const formattedCourseName = props.courseName.split(\"-\")[0];\n    const containerIndex = concentrationContainers.findIndex((eachContainer) => eachContainer.courses.map((eachCourse) => eachCourse.name).includes(formattedCourseName));\n    // container aka sourceContainerIndex\n    let courseIndex = -1;\n    if (containerIndex !== -1) {\n        const theContainer = concentrationContainers[containerIndex];\n        // so now that I have the container the course is in, I just get the index of the course within the container\n        courseIndex = theContainer.courses.findIndex((eachCourse) => eachCourse.name === formattedCourseName);\n        // source index\n    }\n    return (\n        <Modal\n            onHide={() => {\n                props.setModalDisplay(false);\n            }}\n            show={props.modalDisplay}\n        >\n            <Modal.Header>\n                Please Choose a Semester:\n            </Modal.Header>\n            <Modal.Body>\n                <ListGroup>\n                    {\n                        new Array(numberOfSemesters).fill(0).map((eachelement,index) => \n                            <ListGroup.Item action\n                                data-testid=\"choosesemesterbutton\"\n                                key={index}\n                                onClick={()=>{\n                                    if (courseIndex !== -1) {\n                                        //props.setButtonDisplay(false);\n                                        const preReqResult = PreReqChecker(state.currentSaveData.semesters, index, concentrationContainers[containerIndex].courses[courseIndex], state, dispatch); \n                                        if(preReqResult  || !state.preReqToggle){\n                                            dispatch({type: \"concentrationToSemester\", payload: { ...state, sourceContainerIndex: containerIndex, sourceIndex: courseIndex, destContainerIndex: index, destIndex: 0 }});\n                                        }\n                                    }\n                                }}\n                            >\n                                {`Semester ${index+1}`}\n                            </ListGroup.Item>\n                        )\n                    }\n                </ListGroup>\n            </Modal.Body>\n        </Modal>\n    );\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../../css/style.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { CourseInfo } from \"./CourseInfo\";\nimport { AddCourse } from \"./AddCourse\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\n\n\n\nexport const Course = (\n    props:\n    { \n        name: string; \n        description: string; \n        title: string;\n        credits: number; \n        ind: number; \n    }): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const [courseInfoDisplay, setCourseInfoDisplay] = useState<boolean>(false);\n    const [addCourseModalDisplay, setAddCourseModalDisplay] = useState<boolean>(false);\n    const [addCourseButtonDisplay, setAddCourseButtonDisplay] = useState<boolean>(true);\n\n    useEffect(() => {\n        const splitName = props.name.split(\"-\")[0];\n        const result = !state.currentSaveData.semesters.map((eachSemester) => eachSemester.courses.map(eachCourse => eachCourse.name)).flat(2).includes(splitName);\n        setAddCourseButtonDisplay(result);\n    }, [state.currentSaveData.semesters]);\n\n    return (\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {prov =>\n                <ListGroup.Item data-testid=\"courseitem\" ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>\n                    {props.name}\n                    {addCourseButtonDisplay && \n                    <button \n                        className=\"add-course-button\"\n                        data-testid=\"addcoursebutton\"\n                        onClick={()=>{\n                            setAddCourseModalDisplay(!addCourseModalDisplay);\n                        }}\n                        type=\"button\"\n                    >\n                        <span>&#43;</span>\n                    </button>}\n                    {addCourseModalDisplay &&\n                    <AddCourse\n                        modalDisplay={addCourseModalDisplay}\n                        setModalDisplay={setAddCourseModalDisplay}\n                        courseName={props.name}\n                        buttonDisplay={addCourseButtonDisplay}\n                        setButtonDisplay={setAddCourseButtonDisplay}\n                    />\n                    }\n                    {!addCourseButtonDisplay &&\n                    <button\n                        className=\"remove-course-button\"\n                        onClick={()=>{\n                            const containerIndex = state.currentSaveData.semesters.findIndex((eachSemester) => eachSemester.courses.map((eachCourse) => eachCourse.name).flat(2).includes(props.name.split(\"-\")[0]));\n                            const courseIndex = state.currentSaveData.semesters[containerIndex].courses.findIndex((eachCourse) => eachCourse.name === props.name.split(\"-\")[0]);\n                            dispatch({type: \"removeCourse\", payload: { ...state, sourceContainerIndex: containerIndex, sourceIndex: courseIndex } });\n                            setAddCourseButtonDisplay(!addCourseButtonDisplay);\n                        }}\n                    >\n                        <img src={`${process.env.PUBLIC_URL}/minusimage.png`} id=\"remove-course-image\"></img>\n                    </button>\n                    }\n                    <button\n                        data-testid=\"dotsButton\"\n                        className=\"course-button\"\n                        onClick={() => {\n                            setCourseInfoDisplay(!courseInfoDisplay);\n                        }}\n                        type=\"button\"\n                    >\n                        <svg className=\"bi bi-three-dots-vertical\" fill=\"currentColor\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n                        </svg>\n                    </button>\n                    {courseInfoDisplay &&\n                    <CourseInfo\n                        data-testid=\"course description\"\n                        credits={props.credits}\n                        description={props.description}\n                        display={courseInfoDisplay}\n                        name={props.name}\n                        setDisplay={setCourseInfoDisplay}\n                    />\n                    }\n                </ListGroup.Item>\n            }\n        </Draggable>\n    );\n};\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[]; name: string }): JSX.Element =>\n    <Droppable droppableId={props.name}>\n        {prov =>\n            <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                {props.courses.map((eachcourse: CourseType, index: number) =>\n                    <Course\n                        credits={eachcourse.credits}\n                        description={eachcourse.description}\n                        ind={index}\n                        key={eachcourse.name}\n                        name={`${eachcourse.name}${eachcourse.title.length > 0 ? `-${eachcourse.title}` : \"\"}`}\n                        title={eachcourse.title}\n                    />,\n                )}\n                {prov.placeholder}\n            </ListGroup>\n        }\n    </Droppable>;\n","import COURSES from \"../../../json/courses.json\";\nimport { Course } from \"../../../interfaces/course\";\n\nexport const StringsToCourses = (stringCourses: string[]): Course[] => {\n    /** Takes a list of strings, and returns a list of courses by looking in courses.json for matching names.\n     *  Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n     */\n    const allCourses = COURSES as Course[];\n    const courseList: Course[] = stringCourses.map(elem => [...allCourses.filter(i => i.name === elem).map((eachCourse) => ({...eachCourse, fromIndex: 0, fromContainerIndex: 0}))]).flat(2);\n    if (courseList.length != stringCourses.length) {\n        // one or all of the courses were not registered in\n        const names = courseList.map((eachCourse) => eachCourse.name);\n        for(const eachName of stringCourses) {\n            if (!names.includes(eachName)) {\n                // found course not read in\n                courseList.push({\n                    name: eachName,\n                    title: \"Update Title\",\n                    description: \"Not yet updated\",\n                    section: 10,\n                    prereqs: [],\n                    coreqs: [],\n                    credits: 3,\n                    lab: false,\n                    fromIndex: 0,\n                    fromContainerIndex: 0\n                });\n            }\n        }\n    }\n    return courseList;\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\n\n\nexport const AIConc = (): JSX.Element => {\n    \n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n\n    useEffect(() => {\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n            ...state,\n            concentrationContainers:\n            [ \n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[0].concentration.core)\n                },\n                {\n                    name: \"capstone-1\",\n                    courses: StringsToCourses(state.saveData[0].concentration.capstone)\n                },\n                {\n                    name: \"general-1\",\n                    courses: StringsToCourses(state.saveData[0].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[0].concentration.writing)\n                },\n                {\n                    name: \"capstone-2\",\n                    courses: StringsToCourses(state.saveData[0].concentration.conc.stats)\n                },\n                {\n                    name: \"general-2\",\n                    courses: StringsToCourses(state.saveData[0].concentration.conc.systems)\n                },\n                {\n                    name: \"elective\",\n                    courses: StringsToCourses(state.saveData[0].concentration.conc.elective)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[0].concentration.lab)\n                }\n            ]\n        }});\n        return() => {\n            dispatch({type: \"updateSaveDataAI\", payload: { ...state, }});\n        };\n    },[]);\n\n    return (\n        <div>\n            <h2>Artificial Intelligence and Robotics</h2>\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\" data-testid=\"Core Accordion\">\n                    <Accordion.Header>CISC Core and Concentration</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[0] !== undefined ? state.concentrationContainers[0].courses : []} name=\"core\" />\n                        <CourseContainer courses={state.concentrationContainers[1] !== undefined ? state.concentrationContainers[1].courses : []} name=\"capstone-1\" />\n                        <CourseContainer courses={state.concentrationContainers[2] !== undefined ? state.concentrationContainers[2].courses : []} name=\"general-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>Two-Course Lab Sequence</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[7] !== undefined ? state.concentrationContainers[7].courses : []} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>Writing Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[3] !== undefined ? state.concentrationContainers[3].courses : []} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>Statistics Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[4] !== undefined ? state.concentrationContainers[4].courses : []} name=\"capstone-2\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>Systems Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[5] !== undefined ? state.concentrationContainers[5].courses : []} name=\"general-2\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n                    <Accordion.Header>Electives(Select Four)</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[6] !== undefined ? state.concentrationContainers[6].courses : []} name=\"elective\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n            </Accordion>\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const BioConc = (): JSX.Element => {\n\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Bioinformatics\");\n\n    useEffect(() => {\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n            ...state,\n            concentrationContainers:\n            [\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"electives\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                },\n                {\n                    name: \"data\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.data)\n                },\n                {\n                    name: \"ochem-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.ochem)\n                }\n            ]\n        }});\n        return() => {\n            console.log(\"BIO CONC UNMOUNTING\");\n            dispatch({type: \"updateSaveDataBio\", payload: { ...state }});\n        };\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 9 ?\n            <div>\n                <h2 data-testid=\"bio-header\">Bioinformatics</h2>\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>\n                            CISC Core and Concentration\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>\n                            Chem Sequence\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[5].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>\n                            One Organic Chem Sequence\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[8].courses} name=\"ochem-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n\n                    <Accordion.Item eventKey=\"3\">\n                        <Accordion.Header>\n                            Writing Course\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"4\">\n                        <Accordion.Header>\n                            One Statistics Course\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"stat\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"5\">\n\n                        <Accordion.Header>\n                            One Data Analysis Course\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n\n                            <CourseContainer courses={state.concentrationContainers[7].courses} name=\"data\" />\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"6\">\n\n                        <Accordion.Header>\n                            Two Electives\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n\n                            <CourseContainer courses={state.concentrationContainers[6].courses} name=\"electives\" />\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                </Accordion>\n\n            </div>\n            :\n            <div>\n                Concentration Unavailable\n            </div>\n        \n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const DataScienceConc = (): JSX.Element => {\n    \n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Data Science\");\n\n    useEffect(() => {\n        \n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"electives\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                },\n                {\n                    name: \"datascience\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.data)\n                },\n                {\n                    name: \"math\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                }\n            ]\n\n        }});\n        return() => {\n            console.log(\"DATA SCIENCE UNMOUNTING\");\n            dispatch({type: \"updateSaveDataScience\", payload: { ...state, sourceContainerIndex: index }});\n        };\n    },[]);\n\n    return (\n        <div>\n            <h2>Data Science</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                        <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                        <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[3].courses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[4].courses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Data Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[6].courses} name=\"datascience\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        One Advanced Math\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[7].courses} name=\"math\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        One Elective\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={state.concentrationContainers[5].courses} name=\"electives\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n\n            </Accordion>\n\n\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const HPCConc = (): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"High-Performance Computing\");\n    \n    useEffect(() => {\n\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"elective\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                },\n                {\n                    name: \"math\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.data)\n                },\n                {\n                    name: \"dataCourses\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.ochem)\n                },\n                {\n                    name: \"machineLearningCourses\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.cybersecurity)\n                },\n                {\n                    name: \"dataTrack\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.ochem)\n                }\n\n            ]\n\n        }});\n        return() => {\n            dispatch({type: \"saveHPC\", payload: { ...state, sourceContainerIndex: index }});\n        };\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 10 ?\n            <div>\n                <h2>High-Performance Computing</h2>\n\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>\n                            CISC Core and Concentration\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>\n                            Two Lab Courses\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>\n                            One Writing\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n\n                    <Accordion.Item eventKey=\"3\">\n\n                        <Accordion.Header>\n                            Choose one of the tracks\n                        </Accordion.Header>\n                        <Accordion.Body>\n\n                            <Accordion>\n\n                                <Accordion.Item eventKey=\"4\">\n\n                                    <Accordion.Header>\n                                        Applied Math\n                                    </Accordion.Header>\n                                    <Accordion.Body>\n\n                                        <CourseContainer courses={state.concentrationContainers[6].courses} name=\"elective\" />\n                                        <CourseContainer courses={state.concentrationContainers[7].courses} name=\"math\" />\n                                        <CourseContainer courses={state.concentrationContainers[5].courses} name=\"stat\" />\n\n                                    </Accordion.Body>\n\n                                </Accordion.Item>\n                                <Accordion.Item eventKey=\"5\">\n\n                                    <Accordion.Header>\n                                        Data Track\n                                    </Accordion.Header>\n                                    <Accordion.Body>\n                                        <CourseContainer courses={state.concentrationContainers[8].courses} name=\"dataCourses\" />\n                                        <CourseContainer courses={state.concentrationContainers[10].courses} name=\"dataTrack\" />\n                                    </Accordion.Body>\n\n                                </Accordion.Item>\n\n                            </Accordion>\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"6\">\n\n                        <Accordion.Header>\n                            One Machine Learning\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[9].courses} name=\"machineLearningCourses\" />\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                </Accordion>\n            </div>\n            :\n            <h2>\n                High-Performance Computing\n            </h2>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const NetworksConc = (): JSX.Element => {\n\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Networks and Systems\");\n    useEffect(() => {\n\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"security\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.cybersecurity)\n                },\n                {\n                    name: \"systems\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.systems)\n                },\n                {\n                    name: \"electives\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                }\n\n            ]\n\n        }});\n        return() => {\n            dispatch({type: \"saveNetworks\", payload: { ...state, sourceContainerIndex: index }});\n        };\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 9 ?\n            <div>\n                <h2>Networks and Systems</h2>\n\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>\n                            CISC Core and Concentration\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>\n                            Two Lab Courses\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[5].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>\n                            One Writing\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n\n                    <Accordion.Item eventKey=\"3\">\n                        <Accordion.Header>\n                            One Statistics Course\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"stat\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"4\">\n                        <Accordion.Header>\n                            One Security Math\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[6].courses} name=\"security\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"5\">\n\n                        <Accordion.Header>\n                            Two Systems Courses\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n\n                            <CourseContainer courses={state.concentrationContainers[7].courses} name=\"systems\" />\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"6\">\n\n                        <Accordion.Header>\n                            Two Electives\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[8].courses} name=\"electives\" />\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n\n                </Accordion>\n            </div>\n            :\n            <h2>\n                Networks And Systems\n            </h2>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\n\nexport const SecurityConc = (): JSX.Element => {\n    \n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Cybersecurity\");\n\n    useEffect(() => {\n\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"electives\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                },\n                {\n                    name: \"security\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.cybersecurity)\n                }\n            ]\n\n        }});\n        return() => {\n            dispatch({type: \"updateSaveSecurity\", payload: { ...state, sourceContainerIndex: index }});\n        };\n\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 8 ?\n            <div>\n                <h2>Cybersecurity</h2>\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>\n                            CISC Core and Concentration\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>\n                            Two Lab Courses\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[5].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>\n                            One Writing\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n\n                    <Accordion.Item eventKey=\"3\">\n                        <Accordion.Header>\n                            Statistics Course\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"stat\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"4\">\n                        <Accordion.Header>\n                            Two Advanced Requirements\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[7].courses} name=\"security\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"5\">\n\n                        <Accordion.Header>\n                            Two Electives\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n\n                            <CourseContainer courses={state.concentrationContainers[6].courses} name=\"electives\" />\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n\n\n                </Accordion>\n            </div>\n            :\n            <div>Concentration Unavailable</div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const TheoryConc = (): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Theory of Computation\");\n    \n    useEffect(() => {\n\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"discrete\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.track)\n                },\n                {\n                    name: \"continuous\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.cybersecurity)\n                }\n\n            ]\n\n        }});\n        return() => {\n            dispatch({type: \"saveTheory\", payload: { ...state }});\n        };\n\n    },[]);\n\n    return (\n        <div>\n            <h2>Theory</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                        <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                        <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[5].courses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[4].courses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"4\">\n\n                    <Accordion.Header>\n                        Select One of the Four-Course Tracks\n                    </Accordion.Header>\n                    <Accordion.Body>\n\n                        <Accordion>\n\n                            <Accordion.Item eventKey=\"5\">\n\n                                <Accordion.Header>\n                                    Discrete\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={state.concentrationContainers[6].courses} name=\"discrete\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                            <Accordion.Item eventKey=\"6\">\n\n                                <Accordion.Header>\n                                    Continuous\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={state.concentrationContainers[7].courses} name=\"continuous\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                        </Accordion>\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n            </Accordion>\n\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { DisplayCourseListMap } from \"./DisplayCourseListHelperFunctions/DisplayCourseListMap\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const DisplayCourseList = ({concentration}: {concentration: Concentration}): JSX.Element => {\n    const { state } = UseStateContext();\n    const index = state.saveData.findIndex(eachSaveData => eachSaveData.concentration.name === state.concentration.name);\n    return  index !== -1 ?\n        DisplayCourseListMap(concentration)\n        :\n        <div>Cannot find Concentration Save Data</div>;\n};\n","import React from \"react\";\nimport { Concentration } from \"../../../interfaces/concentration\";\nimport { AIConc } from \"../concentrations/AIConc\";\nimport { BioConc } from \"../concentrations/BioConc\";\nimport { DataScienceConc } from \"../concentrations/DataScienceConc\";\nimport { HPCConc } from \"../concentrations/HPCConc\";\nimport { NetworksConc } from \"../concentrations/NetworksConc\";\nimport { SecurityConc } from \"../concentrations/SecurityConc\";\nimport { TheoryConc } from \"../concentrations/TheoryConc\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport { StringsToCourses } from \"./StringsToCourses\";\nimport { SavedProgress } from \"../../../interfaces/savedprogress\";\nimport { Course } from \"../../../interfaces/course\";\n\n\nexport const DisplayCourseListMap = (concentration: Concentration): JSX.Element => {\n\n    //console.log(\"concentration = \", concentration);\n    switch(concentration.name){\n\n    case CONCENTRATIONS[0].name: {\n        // we know its AIConc at this point\n        return <AIConc/>;\n    }\n    case CONCENTRATIONS[1].name: {\n        return <BioConc/>;\n    }\n    case CONCENTRATIONS[2].name: {\n        return <SecurityConc/>;\n    }\n    case CONCENTRATIONS[3].name: {\n        return <DataScienceConc/>;\n    }\n    case CONCENTRATIONS[4].name: {\n        return <HPCConc/>;\n    }\n    case CONCENTRATIONS[5].name: {\n        return <NetworksConc/>;\n    }\n    case CONCENTRATIONS[6].name: {\n        return <TheoryConc/>;\n    }\n    default: {\n        return <div>Concentration Unavailable</div>;\n    }\n\n    }\n};\n\nexport const mapper = (concentration: Concentration): ((props: {\n    StringsToCourses: (stringCourses: string[]) => Course[];\n    setConcentrationContainers: (concentrationContainers: ConcentrationContainerType[]) => void;\n    saveData: SavedProgress;\n}) => JSX.Element) | undefined => {\n    switch(concentration) {\n    case CONCENTRATIONS[0]:\n        return AIConc;\n    }\n    /*\n    case CONCENTRATIONS[1]:\n        return BioConc;\n    case CONCENTRATIONS[2]:\n        return DataScienceConc;\n    case CONCENTRATIONS[3]:\n        return HPCConc;\n    case CONCENTRATIONS[4]:\n        return NetworksConc;\n    case CONCENTRATIONS[5]:\n        return SecurityConc;\n    case CONCENTRATIONS[6]:\n        return TheoryConc;\n    }\n    */\n};","import { State } from \"../../../interfaces/State\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\nimport React from \"react\";\n\nexport const DropLogicExecutor = (\n    state: State,\n    dispatch: React.Dispatch<SchedulerAction>,\n    dispatchType: string,\n    sourceContainerIndex: number,\n    destinationContainerIndex: number,\n    sourceIndex: number,\n    droppingIndex: number,\n): void => {\n    dispatch({type: dispatchType, payload: {\n        ...state,\n        sourceIndex: sourceIndex,\n        sourceContainerIndex: sourceContainerIndex,\n        destIndex: droppingIndex,\n        destContainerIndex: destinationContainerIndex\n    }});\n};\n","import React from \"react\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { Semester } from \"../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { PreReqChecker } from \"./DNDLogicV2/prereqchecker\";\nimport { RevPreReqChecker } from \"./DNDLogicV2/revprereqchecker\";\nimport { State } from \"../../interfaces/State\";\nimport { SchedulerAction } from \"../../interfaces/SchedulerAction\";\nimport { DropLogicExecutor } from \"./DNDLogicV2/DropLogicExecutor\";\n\n// TODO: Implement PreReq Checker\n\nexport const successPrint = (result: number): void => {\n    console.log(result >= 1 ? \"Success!\" : \"Failure\");\n};\n\nexport const onDragEndLogic = (\n    result: DropResult,\n    state: State,\n    dispatch: React.Dispatch<SchedulerAction>,\n    concentrationContainers: ConcentrationContainerType[],\n    semesters: Semester[],\n): void => {\n    if (!result.destination) {\n        return;\n    }\n    //console.log(\"IN DROPLOGIC, semesterCourses = \", semesterCourses);\n    /*\n    If where you are dropping TO is a semester\n    */\n    const sourceId = result.source.droppableId;\n    const destinationId = result.destination.droppableId;\n    const sourceIdSemester = sourceId.includes(\"semester-table\");\n    const destIdSemester = destinationId.includes(\"semester-table\");\n    const sourceIndex = result.source.index;\n    const dropIndex = result.destination.index;\n    if(sourceId === destinationId) {\n        if (sourceIdSemester) {\n            // semester --> same semesters\n            //console.log(\"Executing DropLogic if->if\");\n            const semesterNum1 = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n            DropLogicExecutor(state,dispatch,\"semesterToSemester\",semesterNum1-1,semesterNum1-1,result.source.index,result.destination.index);\n        } else {\n            // concentration --> concentration\n            //console.log(\"Executing DropLogic if->else\");\n            const concentrationNumber1 = concentrationContainers.findIndex((eachConcentrationContainer) => eachConcentrationContainer.name === destinationId);\n            DropLogicExecutor(state, dispatch, \"concentrationToConcentration\", concentrationNumber1, concentrationNumber1, sourceIndex, dropIndex);\n        }\n    } else if (sourceIdSemester) {\n        if (destIdSemester) {\n            // semester --> different semester\n            //console.log(\"Executing DropLogic elseif1->if\");\n            const semester1Num = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n            const semester2Num = destIdSemester ? parseInt(destinationId.substring(destinationId.lastIndexOf(\"-\") + 1), 10) : -1;\n            const ind1 = semesters.findIndex(elem => elem.semesterNum === semester1Num);\n            const ind2 = semesters.findIndex(elem => elem.semesterNum === semester2Num);\n            const preReqCheckerResult = PreReqChecker(semesters, ind2, semesters[ind1].courses[sourceIndex], state, dispatch) && RevPreReqChecker(semesters, ind2, semesters[ind1].courses[sourceIndex], state, dispatch);\n            if (preReqCheckerResult || !state.preReqToggle) {\n                DropLogicExecutor(state, dispatch, \"semesterToSemester\", ind1, ind2, result.source.index, result.destination.index);\n            }\n        } else {\n            //console.log(\"Executing DropLogic elseif1->else\");\n            // semester --> concentration\n            const semester1Num = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n            const ind1 = semesters.findIndex((eachSemester) => eachSemester.semesterNum === semester1Num);\n            const ind2 = concentrationContainers.findIndex((eachConcentrationContainer) => eachConcentrationContainer.name === destinationId);\n            DropLogicExecutor(state, dispatch, \"semesterToConcentration\", ind1, ind2, sourceIndex, dropIndex);\n        }\n    } else if (destIdSemester) {\n        // concentration --> semester\n        //console.log(\"Executing DropLogic elseif2\");\n        const semesterNum = parseInt(destinationId.substring(destinationId.lastIndexOf(\"-\") + 1), 10);\n        const concentrationContainerIndex = state.concentrationContainers.findIndex((eachContainer) => eachContainer.name === sourceId);\n        const semesterCoursesIndex = semesters.findIndex((eachSemester) => eachSemester.semesterNum === semesterNum);\n        const PreReqResult = PreReqChecker(semesters, semesterCoursesIndex, concentrationContainers[concentrationContainerIndex].courses[sourceIndex], state, dispatch);\n        if (PreReqResult  || !state.preReqToggle) {\n            DropLogicExecutor(state, dispatch, \"concentrationToSemester\", concentrationContainerIndex, semesterCoursesIndex, sourceIndex, dropIndex);\n        }\n    } else {\n        //console.log(\"Executing DropLogic else\");\n        // concentration --> semester\n        const concentrationNumberDest = concentrationContainers.findIndex((eachConcentrationContainer) => eachConcentrationContainer.name === destinationId);\n        const concentrationNumberSource = concentrationContainers.findIndex((eachConcentrationContainer) => eachConcentrationContainer.name === sourceId);\n        DropLogicExecutor(state, dispatch, \"concentrationToConcentration\", concentrationNumberSource, concentrationNumberDest, sourceIndex, dropIndex);\n    }\n    \n};\n","import { Course as CourseType } from \"../../../interfaces/course\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\nimport { Semester } from \"../../../interfaces/semester\";\nimport React from \"react\";\nimport { State } from \"../../../interfaces/State\";\n\nexport const RevPreReqChecker = (\n    semesters: Semester[],\n    placingIndex: number,\n    courseBeingPlaced: CourseType,\n    state: State,\n    dispatch: React.Dispatch<SchedulerAction>\n): boolean => {\n\n    const ErrorBuffer: string[] = [];\n    for (const eachCourse of semesters[placingIndex].courses) {\n        for (const eachPreReq of eachCourse.prereqs) {\n            const expr = new RegExp(eachPreReq);\n            const result = expr.test(courseBeingPlaced.name);\n            if (result) {\n                ErrorBuffer.push(\n                    `${eachPreReq.includes(\"|\") ? `For ${eachCourse.name} : ${eachPreReq.split(\"|\").join(\" or \")}, and ` : `${eachPreReq}, and `}`\n                );\n            }\n        }\n    }\n\n    if (ErrorBuffer.length > 0) {\n        dispatch({type: \"displayToast\", payload: { ...state, toastMessage: `PreReq(s) required are : ${ErrorBuffer.join(\"\\n\")}`, toastDisplay: true}});\n        return false;\n    }\n\n    return true;\n\n\n};","import React from \"react\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nexport const Footer = (): JSX.Element => {\n\n    const { state } = UseStateContext();\n\n    const concentrationName = state.concentration.name;\n    const concentrationClasses = concentrationName === \"AI and Robotics\" ? 31 : concentrationName === \"Bioinformatics\" ? 33 : concentrationName === \"Cybersecurity\" ? 35 : concentrationName === \"Data Science\" ? 35 : concentrationName === \"High-Performance Computing\" ? 40 : concentrationName === \"Networks and Systems\" ? 36 : 38;\n    const percentage = Math.ceil((state.currentSaveData.semesters.map((eachSemester) => eachSemester.courses).flat(2).length / concentrationClasses)*100);\n\n    return(\n        <div className=\"footer\">\n            <hr />\n            <ProgressBar animated now={percentage} label={`${percentage}%`} striped variant=\"success\" />\n            <br />\n            <p>\n                Created by Kurt Hammen, Luke Halko, and Cameron Thacker. Made 2021. Check out\n                {\" \"}\n                <a href=\"https://github.com/UD-CISC275-F21/ud-cis-scheduler-team-4\" rel=\"noopener noreferrer\" target=\"_blank\">our repository.</a>\n            </p>\n        </div>\n    );\n    \n};\n\n// github repository\n// see what other people have\n","import CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { SavedProgress } from \"../../../interfaces/savedprogress\";\nimport { State } from \"../../../interfaces/State\";\n\nexport const initialState: State = {\n    concentration : CONCENTRATIONS[0],\n    display : false,\n    concentrationContainers: [],\n    toastDisplay: false,\n    toastMessage: \"\",\n    saveData: [{\n        concentration: CONCENTRATIONS[0],\n        semesters: [],\n    } as SavedProgress],\n    currentSaveData: {\n        concentration: CONCENTRATIONS[0],\n        semesters: [{semesterNum: 1, courses: []}],\n    } as SavedProgress,\n    sourceIndex: 0,\n    sourceContainerIndex: 0,\n    destIndex: 0,\n    destContainerIndex: 0,\n    preReqToggle: true,\n    loadedInCourses: [[]],\n    newCourse: {name: \"\", title: \"\", description: \"\", credits: 0, lab: false, fromIndex: 0, fromContainerIndex: 0, section: 0, prereqs: [], coreqs: []}\n};","import { Course } from \"../../../interfaces/course\";\n\nexport const CoursesToStrings = (courses: Course[]): string[] => {\n    /** Takes a list of courses, and returns a list of strings by mapping each course to it's name\n     */\n    return courses.map((eachCourse) => eachCourse.name);\n};","import produce from \"immer\";\nimport { Semester } from \"../../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport { Course } from \"../../../interfaces/course\";\nimport { State } from \"../../../interfaces/State\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\nimport { CoursesToStrings } from \"../../courses/DisplayCourseListHelperFunctions/CoursesToStrings\";\nimport { StringsToCourses } from \"../../courses/DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const reducerFunction = (state: State, action: SchedulerAction ): State => {\n    //console.log(\"state = \", state);\n    switch (action.type) {\n    case \"togglePreReq\": {\n\n        return produce(state, (draft) => {\n            draft.preReqToggle = !draft.preReqToggle;\n        });\n\n    }\n    case \"clearAllSemesters\": {\n        return produce(state, (draft) => {\n            draft.currentSaveData.semesters = [{semesterNum: 1, courses: []}];\n        });\n    }\n    case \"displayState\": {\n        return produce(state, (draft) => {\n            console.log(\"state = \", state);\n            console.log(\"draft = \", draft);\n        });\n    }\n    case \"removeCourse\": {\n        return produce(state, (draft) => {\n            console.log(\"currentSemester = \", state.currentSaveData.semesters);\n            const theSemester: Semester = draft.currentSaveData.semesters[action.payload.sourceContainerIndex];\n            const theCourse: Course = theSemester.courses.splice(action.payload.sourceIndex, 1)[0];\n            const theConcentration: ConcentrationContainerType = draft.concentrationContainers[theCourse.fromContainerIndex];\n            theConcentration.courses.splice(theCourse.fromIndex, 0, theCourse);\n            draft.concentrationContainers[theCourse.fromContainerIndex].courses = theConcentration.courses;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSemester.courses;\n        });\n    }\n    case \"concentrationToSemester\": {\n        return produce(state, (draft) => {\n            const theConcentration: ConcentrationContainerType = draft.concentrationContainers[action.payload.sourceContainerIndex];\n            const theSemester: Semester = draft.currentSaveData.semesters[action.payload.destContainerIndex];\n            const theCourse = theConcentration.courses.splice(action.payload.sourceIndex,1)[0];\n            theCourse.fromContainerIndex = action.payload.sourceContainerIndex;\n            theCourse.fromIndex = action.payload.sourceIndex;\n            theSemester.courses.splice(action.payload.destIndex,0,theCourse);\n            draft.concentrationContainers[action.payload.sourceContainerIndex] = theConcentration;\n            draft.currentSaveData.semesters[action.payload.destContainerIndex].courses = theSemester.courses;\n        });\n    }\n    case \"semesterToConcentration\": {\n        return produce(state, (draft) => {\n            const theConcentration: ConcentrationContainerType = draft.concentrationContainers[action.payload.destContainerIndex];\n            const theSemester: Semester = draft.currentSaveData.semesters[action.payload.sourceContainerIndex];\n            const theCourse: Course = theSemester.courses.splice(action.payload.sourceIndex, 1)[0];\n            theConcentration.courses.splice(action.payload.destIndex, 0, theCourse);\n            draft.concentrationContainers[draft.destContainerIndex].courses = theConcentration.courses;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSemester.courses;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSemester.courses;\n        });\n    }\n    case \"semesterToSemester\": {\n        return produce(state, (draft) => {\n            const theSourceSemester: Semester = draft.currentSaveData.semesters[action.payload.sourceContainerIndex];\n            const theDestSemester: Semester = draft.currentSaveData.semesters[action.payload.destContainerIndex];\n            const theSplicedCourse: Course = theSourceSemester.courses.splice(action.payload.sourceIndex, 1)[0];\n            theDestSemester.courses.splice(action.payload.destIndex, 0, theSplicedCourse);\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSourceSemester.courses;\n            draft.currentSaveData.semesters[action.payload.destContainerIndex].courses = theDestSemester.courses;\n            draft.currentSaveData.semesters[action.payload.destContainerIndex].courses = theDestSemester.courses;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSourceSemester.courses;\n        });\n    }\n    case \"concentrationToConcentration\": {\n        return produce(state, (draft) => {\n            const theSourceConcentration: ConcentrationContainerType = draft.concentrationContainers[action.payload.sourceContainerIndex];\n            const theDestinationConcentration: ConcentrationContainerType = draft.concentrationContainers[action.payload.destContainerIndex];\n            const theCourse = theSourceConcentration.courses.splice(action.payload.sourceIndex, 1)[0];\n            theDestinationConcentration.courses.splice(action.payload.destIndex, 0, theCourse);\n            draft.concentrationContainers[action.payload.sourceContainerIndex].courses = theSourceConcentration.courses;\n            draft.concentrationContainers[action.payload.destContainerIndex].courses = theDestinationConcentration.courses;\n        });\n    }\n    case \"updateSaveDataBio\":{\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.ochem = CoursesToStrings(state.concentrationContainers[8].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.conc.data = CoursesToStrings(state.concentrationContainers[7].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[6].courses);\n        });\n    }\n    case \"updateSaveDataAI\":{\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[0];\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = [...CoursesToStrings(state.concentrationContainers[1].courses), ...CoursesToStrings(state.concentrationContainers[4].courses)];\n            tmpSaveData.concentration.conc.general = [...CoursesToStrings(state.concentrationContainers[2].courses), ...CoursesToStrings(state.concentrationContainers[5].courses)];\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[7].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[6].courses);\n        });\n    }\n    case \"saveHPC\": {\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.data = CoursesToStrings(state.concentrationContainers[7].courses);\n            tmpSaveData.concentration.conc.ochem = [...CoursesToStrings(state.concentrationContainers[8].courses), ...CoursesToStrings(state.concentrationContainers[10].courses)];\n            tmpSaveData.concentration.conc.cybersecurity = CoursesToStrings(state.concentrationContainers[9].courses);\n        });\n    }\n    case \"updateSaveDataScience\": {\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.data = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[7].courses);\n        });\n    }\n    case \"saveNetworks\": {\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.cybersecurity = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.systems = CoursesToStrings(state.concentrationContainers[7].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[8].courses);\n        });\n    }\n    case \"updateSaveSecurity\": {\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.cybersecurity = CoursesToStrings(state.concentrationContainers[7].courses);\n        });\n    }\n    case \"saveTheory\": {\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.track = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.cybersecurity = CoursesToStrings(state.concentrationContainers[7].courses);\n        });\n    }\n    case \"updateNumberOfSemesters\":{\n        return produce(state, (draft) => {\n            draft.currentSaveData.semesters = [...draft.currentSaveData.semesters, { semesterNum: action.payload.currentSaveData.semesters.length+1, courses: []}];\n        });\n    }\n    case \"updateConcentration\":{\n        return produce(state, (draft) => {\n            draft.concentration = action.payload.concentration; \n            const saveDataIndex = draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === state.currentSaveData.concentration.name);\n            draft.saveData[saveDataIndex] = state.currentSaveData;\n            const newSaveDataIndex = draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name);\n            if (newSaveDataIndex === -1) {\n                const tmpSaveData = [...draft.saveData];\n                tmpSaveData.push({ concentration: action.payload.concentration, semesters: [{semesterNum: 1, courses: []}]});\n                draft.saveData = tmpSaveData;\n                draft.currentSaveData = draft.saveData[draft.saveData.length-1];\n            } else {\n                draft.currentSaveData = draft.saveData[newSaveDataIndex];\n            }\n        });\n    }\n    case \"updateConcentrationContainers\": {\n        return produce(state, (draft) => {\n            draft.concentrationContainers = action.payload.concentrationContainers;\n            return draft;\n        });\n    }\n    case \"updateCurrentSaveDataSemesters\": {\n\n        return produce(state, (draft) => {\n            const courses = action.payload.loadedInCourses.flat(2);\n            for (let i = 0; i < action.payload.loadedInCourses.length; i++) {\n                const stringCourses: string[] = action.payload.loadedInCourses[i];\n                if (draft.currentSaveData.semesters.length < (i+1)) {\n                    draft.currentSaveData.semesters.push({semesterNum: i+1, courses: []});\n                }\n                draft.currentSaveData.semesters[i].courses = StringsToCourses(stringCourses);\n            }\n            for (let i = 0; i < draft.concentrationContainers.length; i++) {\n\n                draft.concentrationContainers[i].courses = draft.concentrationContainers[i].courses.filter((eachCourse) => !courses.includes(eachCourse.name));\n\n            }\n            \n\n        });\n\n    }\n    case \"createCourse\": {\n\n        return produce(state, (draft) => {\n\n            if ((draft.currentSaveData.semesters.length-1) <= action.payload.destContainerIndex) {\n                draft.currentSaveData.semesters[action.payload.destContainerIndex].courses = [...draft.currentSaveData.semesters[action.payload.destContainerIndex].courses, action.payload.newCourse];\n            }\n\n        });\n\n    }\n    case \"updateCurrentSaveData\":{\n        return produce(\n            state, (draft) => {\n                draft.currentSaveData = action.payload.currentSaveData;\n            });\n    }\n    case \"setDisplay\":{\n        return produce(state, (draft) => {\n            draft.display = action.payload.display;\n        });\n    }\n    case \"deleteSemester\":{\n        if ( state.currentSaveData.semesters.length > 0) {\n            const temporarySemesterCourse = action.payload.currentSaveData.semesters[action.payload.currentSaveData.semesters.length-1];\n            if (temporarySemesterCourse.courses.length > 0) {\n                return produce(state, (draft) => {\n                    draft.toastMessage = `Must remove classes from Semester ${draft.currentSaveData.semesters.length} before deleting`;\n                    draft.toastDisplay = true;\n                });\n            } else if(action.payload.currentSaveData.semesters.length === 1) {\n                return produce(state, (draft) => {\n                    draft.toastMessage = \"Must have atleast 1 semester present\";\n                    draft.toastDisplay = true;\n                });\n            } else {\n                return produce(state, (draft) => {\n                    draft.currentSaveData.semesters = draft.currentSaveData.semesters.slice(0,draft.currentSaveData.semesters.length-1);\n                });\n            }\n        } else {\n            return { ...state };\n        }\n    }\n    case \"displayToast\":{\n        return produce(state, (draft) => {\n            draft.toastMessage = action.payload.toastMessage;\n            draft.toastDisplay = action.payload.toastDisplay;\n        });\n    }\n    case \"updateCourse\": {\n        return produce(state, (draft) => {\n            const theSemester: Semester = draft.currentSaveData.semesters[action.payload.sourceContainerIndex];\n            const newTextFields = action.payload.toastMessage.split(\"_\"); // [desc, name, title]\n            const theClass = { ...theSemester.courses[action.payload.sourceIndex], description: newTextFields[0], name: newTextFields[1], title: newTextFields[2]};\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses[action.payload.sourceIndex] = theClass;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses[action.payload.sourceIndex] = theClass;\n        });\n    }\n    default:{\n        break;\n    }\n    }\n    return {...state};\n};","import React, { useState } from \"react\";\nimport { Modal, Button, Badge, Row, Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { Semester } from \"../../interfaces/semester\";\nimport { UseDispatchContext } from \"./DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"./DispatchLogic/UseStateContext\";\n\nexport const EditCourse = (props: {\n    display: boolean;\n    setDisplay: React.Dispatch<React.SetStateAction<boolean>>;\n    course: CourseType;\n    semesterNumber: number;\n}): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    const [titleText, setTitleText] = useState(props.course.title);\n    const [descText, setDescText] = useState(props.course.description);\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n\n    const closeDisplay = (): void => {\n        props.setDisplay(false);\n    };\n    const courseEdit = () => {\n        const theSemester: Semester = state.currentSaveData.semesters[props.semesterNumber];\n        const courseIndex: number = theSemester.courses.findIndex(elem => elem.name === props.course.name);\n        dispatch({type: \"updateCourse\", payload: { ...state, sourceIndex: courseIndex, sourceContainerIndex: props.semesterNumber,  toastMessage: `${descText}_${nameText}_${titleText}`}});\n        props.setDisplay(false);\n    };\n    return (\n        <Modal\n            onHide={() => {\n                closeDisplay();\n            }}\n            show={props.display}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Badge bg=\"primary\">Edit Course Details</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col>\n                        Enter name here:\n                    </Col>\n                    <Col>\n                        <input\n                            onChange={elem => {\n                                setNameText(elem.target.value);\n                            }}\n                            placeholder=\"Enter Course Name\"\n                            type=\"textbox\"\n                            value={nameText}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        Enter Title here:\n                    </Col>\n                    <Col>\n                        <input\n                            onChange={elem => {\n                                setTitleText(elem.target.value);\n                            }}\n                            placeholder=\"Enter Course Title\"\n                            type=\"textbox\"\n                            value={titleText}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        Enter description here:\n                    </Col>\n                    <Col>\n                        <form>\n                            <textarea\n                                cols={45}\n                                onChange={elem => {\n                                    setDescText(elem.target.value);\n                                }}\n                                placeholder=\"Enter Course Description\"\n                                rows={10}\n                                value={descText}\n                            />\n                        </form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{ display: \"block\", textAlign: \"center\" }}>\n                <Button onClick={courseEdit} variant=\"outline-primary\" >Submit Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Col } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n\nexport const EditCoursePanel = (props: {\n    elem: CourseType;\n    ind: number;\n}): JSX.Element => {\n\n    const [display, setDisplay] = useState<boolean>(false);\n\n    return (\n        <Col lg=\"1\" xs>\n            <button\n                className=\"edit-course-button\"\n                data-testid=\"editcoursebutton\"\n                onClick={() => {\n                    setDisplay(true);\n                }}\n            >\n                <img src={`${process.env.PUBLIC_URL}/editbutton.png`} id=\"edit-img\" />\n            </button>\n            {\n                display\n                &&\n                <EditCourse\n                    course={props.elem}\n                    display={display}\n                    semesterNumber={props.ind}\n                    setDisplay={setDisplay}\n                />\n            }\n        </Col>\n    );\n\n};\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Table, ListGroup, Accordion, Col, Row, Badge } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { Semester as SemesterType } from \"../../interfaces/semester\";\nimport { EditCoursePanel } from \"../courses/EditCoursePanel\";\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const getCourses = (semesterCourses: SemesterType[], index: number): CourseType[] => {\n\n    const result = semesterCourses[index];\n    if (result === undefined) {\n        //console.log(\">>>> undefined \");\n        return [];\n    } else {\n        const result2 = semesterCourses[index].courses.length > 0;\n        if ( result2 ) {\n            //console.log(\">>>> valid courses >>>>> \", semesterCourses[index].courses);\n            return semesterCourses[index].courses;\n        } else {\n            //console.log(\">>>> invalid courses \");\n            return [];\n        }\n    }\n\n    //const [courses, setCourses] = useState<CourseType[]>(\n    //    props.semesterCourses[props.ind] !== undefined ? \n    //    (props.semesterCourses[props.ind].courses.length > 0 ? props.semesterCourses[props.ind].courses : [])\n    //    : []);w\n\n};\n\nexport const Semester = (props: {\n    ind: number;\n    semesterCourse: SemesterType;\n}): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>(\n        props.semesterCourse !== undefined ? props.semesterCourse.courses : []);\n    const [credits, setCredits] = useState<number>(0);\n    useEffect(() => {\n        return() => {\n            //console.log(\"unmounting\");\n            setCourses([]);\n        };\n    }, []);\n\n    const getCredits = (courses: CourseType[]) => {\n        const tmpCourses: CourseType[] = courses;\n        let count = 0;\n        for (const eachCourse of tmpCourses) {\n            count += eachCourse.credits;\n        }\n        setCredits(count);\n    };\n\n    useEffect(() => {\n        //console.log(\"courses changed -- \", props.semesterCourse);\n        if (props.semesterCourse !== undefined) {\n            //console.log(\"courses changed [in if]-- \", props.semesterCourse);\n            setCourses(props.semesterCourse.courses);\n            getCredits(props.semesterCourse.courses);\n            //console.log(courses);\n        }\n    }, [props.semesterCourse]);\n\n    return (\n        <Accordion data-testid=\"semesteraccordion\" defaultActiveKey=\"0\" key={`accordion ${props.ind}`} >\n            <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>\n                    <Col xs={2}>\n                        {`Semester ${props.ind + 1}`}\n                    </Col>\n                    <Col>\n                        <Badge>\n                            {`Credits: ${credits}`}\n                        </Badge>\n                    </Col>\n                </Accordion.Header>\n                <Accordion.Body>\n                    <Col key={`semester-table-col-${props.ind}`}>\n                        <Droppable droppableId={`semester-table-${props.ind + 1}`}>\n                            {(prov: DroppableProvided) =>\n                                <Table key={`semester-table-table-${props.ind}`}>\n                                    <thead>\n                                        <tr>\n                                            <td>{`${getSemesterStr(props.ind + 1)}`}</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                                        <tr>\n                                            <td>\n                                                <ListGroup data-testid=\"semestertable\">\n                                                    {\n                                                        courses.map((elem: CourseType, index: number) =>\n                                                            <ListGroup.Item \n                                                                key={elem.name}\n                                                                data-testid=\"courseinsemester\"\n                                                            >\n                                                                <Row>\n                                                                    <Col>\n                                                                        <Course\n                                                                            credits={elem.credits}\n                                                                            description={elem.description}\n                                                                            ind={index}\n                                                                            name={`${elem.name}${elem.title.length > 0 ? `-${elem.title}` : \"\"}`}\n                                                                            title={elem.title}\n                                                                        />\n                                                                    </Col>\n                                                                    <EditCoursePanel \n                                                                        elem={elem}\n                                                                        ind={props.ind}\n                                                                    />\n                                                                </Row>\n                                                            </ListGroup.Item>,\n                                                        )\n                                                    }\n                                                </ListGroup>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            }\n                        </Droppable>\n                    </Col>\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    );\n\n\n};\n","import React from \"react\";\nimport { Semester as SemesterComponent } from \"./Semester\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (): JSX.Element => {\n        \n    const { state } = UseStateContext();\n    //console.log(\"IN SEMESTER TABLE --- state = \", state);\n    return(\n        <>\n            {\n                state.currentSaveData.semesters !== undefined ?\n                    state.currentSaveData.semesters\n                        .map((eachSemester, ind) =>\n                            <SemesterComponent\n                                ind={ind}\n                                key={`semester-table-key-${ind}`}\n                                semesterCourse={eachSemester}\n                            />\n                        )\n                    :\n                    <div>\n                No semesters available\n                    </div>\n            }\n        </>\n    );\n};\n","import { NavDropdown } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const DropdownMenu = (): JSX.Element => {\n\n    const { dispatch } = UseDispatchContext();\n    const { state } = UseStateContext();\n\n    const clickFunc = (concentrationNumber: number) => {\n        dispatch({type: \"updateConcentration\", payload: { ...state, concentration: CONCENTRATIONS[concentrationNumber]}});\n    };\n\n    return (\n        <div>\n            <NavDropdown id=\"basic-navbar-nav\" title=\"Concentrations\" data-testid=\"concentrationMenu\">\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(0);\n                    }}\n                >AI and Robotics\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item data-testid=\"bioConcentration\"\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(1);\n                    }}\n                >\n                    Bioinformatics\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(2);\n                    }}\n                >\n                    Cybersecurity\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(3);\n                    }}\n                >\n                    Data Science\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(4);\n                    }}\n                >\n                    High-Performance Computing\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(5);\n                    }}\n                >\n                    Networks and Systems\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(6);\n                    }}\n                >\n                    Theory\n                </NavDropdown.Item>\n\n            </NavDropdown>\n        </div>\n    );\n};\n","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const AddSemesterButton = (): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    return(\n        <Button\n            data-testid=\"addsemesterbutton\"\n            size=\"sm\"\n            onClick={() => {\n                dispatch({type: \"updateNumberOfSemesters\", payload: { ...state }});\n            }}\n            variant=\"outline-primary\"\n        >\n            Add Semester\n        </Button>\n    );\n};","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const DeleteSemesterButton = (): JSX.Element => {\n    const { dispatch } = UseDispatchContext();\n    const { state } = UseStateContext();\n    return(\n        <Button\n            data-testid=\"deletesemesterbutton\"\n            size=\"sm\"\n            onClick={() => {\n                dispatch({type: \"deleteSemester\", payload: { ...state }});\n            }}\n            variant=\"outline-danger\"\n        >\n            Delete Semester\n        </Button>\n    );\n};\n\n","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\n\nexport const ClearAllSemesterButton = (): JSX.Element => {\n\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n\n    return (\n\n        <Button\n            variant=\"outline-danger\"\n            size=\"sm\"\n            onClick={() => {\n                const theSemesters = state.currentSaveData.semesters;\n                for(let i = 0; i < theSemesters.length; i++) {\n                    const theSemester = theSemesters[i];\n                    for(let j = 0; j < theSemester.courses.length; j++) {\n                        dispatch({type: \"removeCourse\", payload: { ...state, sourceContainerIndex: i, sourceIndex: 0 }});\n                    }\n                }\n                dispatch({type: \"clearAllSemesters\", payload: { ...state }});\n            }}\n        >\n            Clear All Semesters\n        </Button>\n\n    );\n\n};","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { UseStateContext } from \"./DispatchLogic/UseStateContext\";\n\nexport const ExportPlan = (): JSX.Element => {\n    const data: string[][] = [[\"Semester\", \"Course\", \"Credits\"]];\n    const { state } = UseStateContext();\n\n    return (\n        <Button\n            data-testid=\"exportcsvbutton\"\n            size=\"sm\"\n            onClick={() => {\n                for (let i = 0; i < state.currentSaveData.semesters.length; i += 1) {\n                    const courses = state.currentSaveData.semesters[i].courses;\n                    const semesterNum = (i + 1).toString();\n                    for (const eachcourse of courses) {\n                        const courseName = eachcourse.name;\n                        const credits = eachcourse.credits.toString();\n                        data.push([semesterNum, courseName, credits]);\n                    }\n                }\n                const csvContent = `data:text/csv;charset=utf-8,${data.map(elem => elem.join(\",\")).join(\"\\n\")}`;\n\n                const encodedUri = encodeURI(csvContent);\n                const link = document.createElement(\"a\");\n                link.setAttribute(\"href\", encodedUri);\n                link.setAttribute(\"download\", \"my_course_plan.csv\");\n                document.body.appendChild(link);\n                link.click();\n            }}\n            variant=\"outline-secondary\"\n        >\n            Export CSV\n        </Button>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const HowToDropDown = ({ setDisplay }:\n    { setDisplay: React.Dispatch<React.SetStateAction<number>> }): JSX.Element =>\n    <Dropdown>\n        <Dropdown.Toggle id=\"dropdown-basic\" variant=\"success\">\n            Help Menu\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(1);\n                }}\n            >\n                Application Layout\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(2);\n                }}\n            >\n                Navbar\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(3);\n                }}\n            >\n                Concentration Table\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(4);\n                }}\n            >\n                Semester Table\n            </Dropdown.Item>\n        </Dropdown.Menu>\n    </Dropdown>;\n","import { Modal, Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const HowToNavigation = (): JSX.Element =>\n\n    <Modal.Body>\n        How to navigate the help menu:\n        <ul>\n            <li>\n                There is a dropdown menu that looks like this:\n                <Dropdown>\n                    <Dropdown.Toggle id=\"dropdown-basic\" variant=\"outline-success\">\n                        Help Menu\n                    </Dropdown.Toggle>\n                </Dropdown>\n                This dropdown is used to access all of the help menu options\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WholeAppInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/wholeapp.PNG`} />\n        <ul>\n            <li>\n                The <b style={{ color: \"red\" }}>red box</b> is the navbar, which contains links to useful resources (such as course registration/lookup and also undergrad information about concentrations/courses)\n            </li>\n            <li>\n                The <b style={{ color: \"green\" }}>green box</b> is where the concentration requirements are stored, the name of the concentration above. In this example, the name is <b>Artificial Intelligence and Robotics</b>, to access the individual courses of each concentration requirement category, click on the category and a dropdown list of courses you can drag into the blue box appear.\n            </li>\n            <li>\n                The <b style={{ color: \"blue\" }}>blue box</b> is where your semester courses will be. To enter courses into your semester, simply drag them from the concentration requirements(that is the <b style={{ color: \"green\" }}>green box</b>) into the semester box (that is the <b style={{ color: \"blue\" }}>blue box</b>)\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const ConcentrationContainerInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/concentrationguide.gif`} />\n        <ul>\n            <li>\n                Each concentration requirement is able to be clicked on to then expand\n                and reveal a lot of courses you can select from that fit into the requirement for the concentration.\n            </li>\n            <li>\n                These courses can then be dragged and dropped into the semester to plan out your semesters!\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image, Accordion } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const NavBarInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/navbarguide.gif`} />\n        <ul>\n            <li>\n                This navbar contains a plethora of options for each student.\n                <ul>\n                    <Accordion flush>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header>\n                                Categories\n                            </Accordion.Header>\n                            <Accordion.Body>\n                                <Accordion flush>\n                                    <Accordion.Item eventKey=\"2\">\n                                        <Accordion.Header>Useful Links</Accordion.Header>\n                                        <Accordion.Body>\n                                            The <em>Useful links</em> menu contains links such as course search,\n                                            list of undergrad courses, and registration add/drop,\n                                            as well as the link to uds computer science student guidance department\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"3\">\n                                        <Accordion.Header>\n                                            Concentrations\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The <em>Concentrations</em> menu contains\n                                                all the different CISC concentrations\n                                                you can select from,\n                                                and adjusts the courses you can choose from accordingly\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"4\">\n                                        <Accordion.Header>\n                                            Add Semester\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The button works as when it is clicked,\n                                                another semester appears beneath the current one\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"5\">\n                                        <Accordion.Header>\n                                            Export CSV\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The export csv button works as when it is clicked,\n                                                a CSV file containing all the semester information\n                                                is saved onto your computer.\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                </Accordion>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                </ul>\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const SemesterTableInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/semesterguide.gif`} />\n        <ul>\n            <li>\n                Each semester comprises of: The Semester it is,\n                meaning 1st semester 2nd etc., the red button, and the credits display.\n                The semester can be toggled on and off to display the courses within it.\n            </li>\n            <li>\n                <ul>\n                    <li>Red button</li>\n                    <ul>\n                        <li>\n                            The red button works as, if you press it and there are courses\n                            in your semester, it deletes all the courses within the semester.\n                        </li>\n                    </ul>\n                    <li>\n                        Course buttons\n                        <ul>\n                            When courses are moved into a semester,\n                            two buttons appear, one that is red, and one that is yellow.\n                            The red button is to delete that single\n                            course from the semester, and the yellow button is to edit the name of\n                            that course.\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </Modal.Body>;\n","import React from \"react\";\nimport { HowToNavigation } from \"../howtosteps/howtonavigation\";\nimport { WholeAppInfo } from \"../howtosteps/wholeappinfo\";\nimport { ConcentrationContainerInfo } from \"../howtosteps/howtoconcentrationcontainer\";\nimport { NavBarInfo } from \"../howtosteps/howtonavbar\";\nimport { SemesterTableInfo } from \"../howtosteps/howtosemestertable\";\n\nexport const HandleHowToDisplay = (display: number): JSX.Element => {\n\n    switch (display) {\n\n    case 0:\n        return <HowToNavigation />;\n    case 1:\n        return <WholeAppInfo />;\n    case 2:\n        return <NavBarInfo />;\n    case 3:\n        return <ConcentrationContainerInfo />;\n    case 4:\n        return <SemesterTableInfo />;\n    default:\n        return <div />;\n\n    }\n\n};\n","import { Button, Modal, Row, Col, Container } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { HowToDropDown } from \"./howtodropdown/howtodropdown\";\nimport { HandleHowToDisplay } from \"./howtodropdown/howtodropdownlogic\";\n\nexport const HowToDisplay = (): JSX.Element => {\n\n    const [show,\n        setShow] = useState<boolean>(false);\n    const handleShow = () => {\n        setShow(true);\n    };\n    const [currDisplay,\n        setCurrDisplay] = useState<number>(0);\n    const handleClose = () => {\n        setCurrDisplay(0);\n        setShow(false);\n    };\n\n    return (\n\n        <>\n            <Button\n                data-testid=\"howtobutton\"\n                onClick={handleShow}\n                variant=\"outline-success\"\n                size=\"sm\"\n            >\n                How To\n            </Button>\n            <Modal onHide={handleClose} show={show}>\n                <Modal.Header closeButton>\n                    <Container>\n                        <Row style={{ textAlign: \"center\" }}>\n                            <Col>\n                                <Modal.Title>\n                                    How to use our app!\n                                </Modal.Title>\n                            </Col>\n                        </Row>\n                        <br />\n                        <br />\n                        <Row style={{ textAlign: \"left\" }}>\n                            <Col>\n                                <HowToDropDown setDisplay={setCurrDisplay} />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Modal.Header>\n                {HandleHowToDisplay(currDisplay)}\n                <Modal.Footer>\n                    <Button onClick={handleClose} variant=\"outline-danger\">\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n\n    );\n\n};\n","import { UseStateContext } from \"./DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"./DispatchLogic/UseDispatchContext\";\nimport { Button } from \"react-bootstrap\";\nimport { PreReqChecker } from \"./DNDLogicV2/prereqchecker\";\nimport React from \"react\";\n\nexport const PreReqToggleButton = (): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    return(\n        <Button size=\"sm\" variant={state.preReqToggle ? \"primary\" : \"outline-primary\"} onClick={() => {\n            if (state.preReqToggle === false) {\n                // start removing all courses from semesters\n                for (let i = 0; i < state.currentSaveData.semesters.length; i++) {\n                    for (let j = state.currentSaveData.semesters[i].courses.length-1 ; j >= 0; j--) {\n                        const preReqResult = PreReqChecker(state.currentSaveData.semesters, i, state.currentSaveData.semesters[i].courses[j], state, dispatch);\n                        if (!preReqResult) {\n                            console.log(\"theCourse = \", state.currentSaveData.semesters[i].courses[j]);\n                            dispatch({type: \"removeCourse\", payload: { ...state, sourceContainerIndex: i, sourceIndex: j}});\n                        }\n                    }\n                }\n            }\n            dispatch({type: \"togglePreReq\", payload: { ...state }});\n        }}>\n            Pre Req Toggle Button\n        </Button>\n    );\n};","import React from \"react\";\nimport { ProcessCSVData } from \"./DataProcessing/ProcessCSVData\";\nimport * as XLSX from \"xlsx\";\nimport { UseStateContext } from \"./DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"./DispatchLogic/UseDispatchContext\";\n\nexport const ImportPlan = (): JSX.Element => {\n\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n\n    const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files !== null) {\n            const file = e.target.files[0];\n            const reader = new FileReader();\n            reader.onload = (evt) => {\n                if (evt.target !== null) {\n                    const bstr = evt.target.result;\n                    const wb = XLSX.read(bstr, {type: \"binary\"});\n                    const wsname = wb.SheetNames[0];\n                    const ws = wb.Sheets[wsname];\n                    const data = XLSX.utils.sheet_to_csv(ws, { RS: \"#\"});\n                    const result: string[][] | undefined = ProcessCSVData(data.split(\"#\"));\n                    if (result !== undefined) {\n                        dispatch({type: \"updateCurrentSaveDataSemesters\", payload: { ...state, loadedInCourses: result }});\n                    }\n                }\n            };\n            reader.readAsBinaryString(file);\n        }\n    };\n\n    return(\n        <>  \n            <input type=\"file\" accept=\".csv, .xlsx, .xls\" onChange={handleFileUpload}/>\n        </>\n    );\n\n};","\n\n/*\n\nTakes : string array of each row of the csv an element in the array\nReturns: string array of each row within the array a semester and the rows of that row are the classes\n\nExample:\n\n    [[\"CISC108\",\"CISC181\",\"CISC210\"],[\"ENGL111\",\"MATH241\"]]\n\n*/\nexport const ProcessCSVData = (data: string[]): string[][] | undefined => {\n\n    if (data.length === 1) {\n        // only has headers\n        return undefined;\n    }\n\n    const semesters: string[][] = [];\n    let eachSemester: string[] = [];\n    let currSemester = data[1].split(\",\")[0];\n    for (const eachRow of data.slice(1)) {\n\n        const values = eachRow.split(\",\");\n        const semester = values[0];\n        if (semester !== currSemester) {\n            currSemester = semester;\n            semesters.push(eachSemester);\n            eachSemester = [values[1]];\n        } else {\n            eachSemester.push(values[1]);\n        }\n\n    }\n    return semesters;\n\n};","import { Course } from \"../../interfaces/course\";\nimport Courses from \"../../json/courses.json\";\n\nconst theCourses = Courses as Course[];\nconst CourseNames = theCourses.map((eachCourse) => eachCourse.name);\nexport default CourseNames;","import { Button, Modal, ButtonToolbar, ButtonGroup, Form } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { UseStateContext } from \"./DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"./DispatchLogic/UseDispatchContext\";\nimport Multiselect from \"multiselect-react-dropdown\";\nimport { PreReqChecker } from \"./DNDLogicV2/prereqchecker\";\nimport CourseNames from \"../../assets/courseData/CourseNames\";\n\nexport interface MultiSelectInterface{\n\n    name: string\n\n}\n\nexport const CreateCourse = (): JSX.Element => {\n\n    const [show, setShow] = useState<boolean>(false);\n    const [courseName, setCourseName] = useState<string>(\"\");\n    const [courseDescription, setCourseDescription] = useState<string>(\"\");\n    const [courseCredits, setCourseCredits] = useState<number>(0);\n    const [courseTitle, setCourseTitle] = useState<string>(\"\");\n    const [selectedPreReqs, setSelectedPreReqs] = useState<MultiSelectInterface[]>([]);\n    const [selectedCoReqs, setSelectedCoReqs] = useState<MultiSelectInterface[]>([]);\n\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const numberOfSemesters = state.currentSaveData.semesters.length;\n\n    return(\n\n        <>\n        \n            <Button variant=\"primary\" onClick={() => setShow(true)}>\n                Create Course\n            </Button>\n\n            <Modal show={show} onHide={() => setShow(false)}>\n\n                <Modal.Header closeButton>\n                    <Modal.Title>Create Course Menu</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form>\n                        <Form.Group className=\"mb-3\" controlId=\"basicCourseName\">\n                            <Form.Control type=\"text\" placeholder=\"e.g. CISC181\" onChange={(e) => setCourseName(e.target.value)}/>\n                            <Form.Text>Course Name</Form.Text>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"basicCourseDescription\">\n                            <Form.Control type=\"text\" placeholder=\"e.g. Basics of Java\" onChange={(e) => setCourseDescription(e.target.value)} />\n                            <Form.Text>Course Description</Form.Text>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"basicCourseTitle\">\n                            <Form.Control type=\"text\" placeholder=\"e.g. Intro to CS 2\" onChange={(e) => setCourseTitle(e.target.value)} />\n                            <Form.Text>Course Title</Form.Text>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"basicCourseCreditSelector\">\n                            <Form.Control as=\"select\" aria-label=\"basicCourseCreditSelector\" value={courseCredits} onChange={(e) => setCourseCredits(parseInt(e.target.value,10))}>\n                                <option value={0} key={0}>\n                                    0\n                                </option>\n                                <option value={1} key={1}>\n                                    1\n                                </option>\n                                <option value={2} key={2}>\n                                    2\n                                </option>\n                                <option value={3} key={3}>\n                                    3\n                                </option>\n                                <option value={4} key={4}>\n                                    4\n                                </option>\n                            </Form.Control>\n                            <Form.Text>\n                                Credits\n                            </Form.Text>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"basicPreReqSelector\">\n                            <Form.Label>Pre Reqs</Form.Label>\n                            <Multiselect \n                                options={CourseNames.map((eachCourseName) => ({name : eachCourseName}))}\n                                selectedValues={selectedPreReqs}\n                                onSelect={setSelectedPreReqs}\n                                onRemove={setSelectedPreReqs}\n                                displayValue=\"name\"\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"basicCoReqSelector\">\n                            <Form.Label>Co Reqs</Form.Label>\n                            <Multiselect\n                                options={CourseNames.map((eachCourseName) => ({name : eachCourseName}))}\n                                selectedValues={selectedCoReqs}\n                                onSelect={setSelectedCoReqs}\n                                onRemove={setSelectedCoReqs}\n                                displayValue=\"name\"\n                            />\n                        </Form.Group>\n                    </Form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <ButtonToolbar>\n                        {\n                            new Array(numberOfSemesters).fill(0).map((eachElement, index) =>\n                                <ButtonGroup  key={index} className=\"me-2\" aria-label=\"create course modal button group\">\n                                    <Button\n                                        data-testid=\"createcoursebutton\"\n                                        key={index}\n                                        variant=\"outline-primary\"\n                                        onClick={()=>{\n                                            const formattedPreReqs = selectedPreReqs.map((eachPreReq) => eachPreReq.name);\n                                            const formattedCoReqs = selectedCoReqs.map((eachCoReq) => eachCoReq.name);\n                                            const createdCourse =  {\n                                                name: courseName,\n                                                description: courseDescription,\n                                                credits: courseCredits,\n                                                title: courseTitle,\n                                                prereqs: formattedPreReqs,\n                                                coreqs: formattedCoReqs,\n                                                section: 10,\n                                                lab: courseCredits > 3,\n                                                fromIndex: 0,\n                                                fromContainerIndex: 0\n                                            };\n                                            const preReqResult = PreReqChecker(state.currentSaveData.semesters, index, createdCourse, state, dispatch);\n                                            if (preReqResult) {\n                                                dispatch({type: \"createCourse\", payload: { ...state, destContainerIndex: index, newCourse: createdCourse }});\n                                            }\n                                            setCourseName(\"\");\n                                            setCourseDescription(\"\");\n                                            setCourseCredits(0);\n                                            setCourseTitle(\"\");\n                                            setSelectedPreReqs([]);\n                                            setSelectedCoReqs([]);\n                                            setShow(false);\n                                        }}\n                                    >\n                                        {`Semester ${index+1}`}\n                                    </Button>\n                                </ButtonGroup>\n                            )\n                        }\n                    </ButtonToolbar>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n};\n","import React from \"react\";\nimport { Navbar, Nav, NavDropdown, Container, ButtonToolbar, ButtonGroup } from \"react-bootstrap\";\nimport { DropdownMenu } from \"../DropdownMenu\";\nimport { AddSemesterButton } from \"../../semesters/AddSemesterButton\";\nimport { DeleteSemesterButton } from \"../../semesters/DeleteSemesterButton\";\nimport { ClearAllSemesterButton } from \"../../semesters/ClearAllSemesterButton\";\nimport { ExportPlan } from \"../ExportPlan\";\nimport { HowToDisplay } from \"../howto/howtodisplay\";\nimport { PreReqToggleButton } from \"../PreReqToggleButton\";\nimport { ImportPlan } from \"../ImportPlan\";\nimport { CreateCourse } from \"../CreateCourse\";\n\nexport const CourseSchedulerNavbar = (): JSX.Element => {\n\n    return(\n\n        <Navbar bg=\"light\" data-testid=\"navbar\" expand=\"lg\" >\n            <Container>\n                <Navbar.Brand href=\"#home\">UDCIS Course Scheduler</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        <NavDropdown data-testid=\"navbardropdown\" id=\"basic-navbar-nav\" title=\"Useful Links\" >\n                            <NavDropdown.Item data-testid=\"navdropdownitem1\" href=\"https://udapps.nss.udel.edu/CoursesSearch/\" >Course Search</NavDropdown.Item>\n                            <NavDropdown.Item data-testid=\"navdropdownitem2\" href=\"https://www.cis.udel.edu/academics/undergraduate-programs/resources/courses/\" >CISC Undergraduate Courses</NavDropdown.Item>\n                            <NavDropdown.Item data-testid=\"navdropdownitem3\" href=\"https://webreg.nss.udel.edu/registration/schedule/\" >Registration Add/Drop</NavDropdown.Item>\n                            <NavDropdown.Item data-testid=\"navdropdownitem4\" href=\"https://ud-cis-teaching.github.io/student-guidance/\" >UD CIS Student Guidance</NavDropdown.Item>\n                        </NavDropdown>\n                        <DropdownMenu/>\n                        <ButtonToolbar>\n                            <ButtonGroup className=\"me-2\" aria-label=\"add semester button\">\n                                <AddSemesterButton/>\n                            </ButtonGroup>\n                            <ButtonGroup className=\"me-2\" aria-label=\"delete semester button\">\n                                <DeleteSemesterButton/>\n                            </ButtonGroup>\n                            <ButtonGroup className=\"me-2\" aria-label=\"clear all semester button\">\n                                <ClearAllSemesterButton/>\n                            </ButtonGroup>\n                            <ButtonGroup className=\"me-2\" aria-label=\"export csv plan\">\n                                <ExportPlan/>\n                            </ButtonGroup>\n                            <ButtonGroup className=\"me-2\" aria-label=\"import csv plan\">\n                                <ImportPlan />\n                            </ButtonGroup>\n                            <ButtonGroup className=\"me-2\" aria-label=\"how to display button\">\n                                <HowToDisplay/>\n                            </ButtonGroup>\n                            <ButtonGroup className=\"me-2\" aria-label=\"pre req toggle button\">\n                                <PreReqToggleButton />\n                            </ButtonGroup>\n                            <ButtonGroup className=\"me-2\" aria-label=\"create course button\">\n                                <CreateCourse />\n                            </ButtonGroup>\n                        </ButtonToolbar>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n};\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { WelcomeToast, PreReqSameSemesterToast } from \"./util/Notifications\";\nimport React, { useReducer, useEffect } from \"react\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { onDragEndLogic } from \"./util/DropLogic\";\nimport { Footer } from \"./util/Footer\";\nimport { initialState } from \"../assets/data/statedata/InitialState\";\nimport { reducerFunction } from \"./util/DispatchLogic/SchedulerReducerFunction\";\nimport { DispatchContext } from \"./util/DispatchLogic/DispatchContext\";\nimport { StateContext } from \"./util/DispatchLogic/StateContext\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport { CourseSchedulerNavbar } from \"./util/Navbar/CourseSchedulerNavbar\";\n\nexport const MainPage = (): JSX.Element => {\n    const [state, dispatch] = useReducer(reducerFunction, initialState);\n    const {\n        concentration,\n        display,\n        concentrationContainers,\n        toastDisplay,\n        toastMessage,\n    } = state;\n\n    useEffect(() => {\n        setTimeout(() => {\n            dispatch({type: \"setDisplay\", payload: { ...state, display: false } });\n        }, 1000);\n        dispatch({type: \"setDisplay\", payload: { ...state, display: true } });\n    },[]);\n\n    const dispatchValue = { dispatch };\n    const stateValue = { state };\n\n    const onDragEnd = (result: DropResult) => {\n        onDragEndLogic(\n            result,\n            state,\n            dispatch,\n            concentrationContainers,\n            state.currentSaveData.semesters\n        );\n    };\n\n    return (\n        <DispatchContext.Provider value={dispatchValue}>\n            <StateContext.Provider value={stateValue}>\n                <DragDropContext\n                    onDragEnd={onDragEnd}\n                >\n                    <Container>\n                        <br />\n                        <Row>\n                            <Col>\n                                <WelcomeToast display={display} />\n                                <PreReqSameSemesterToast display={toastDisplay} errMsg={toastMessage} />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <CourseSchedulerNavbar />\n                            <button onClick={() => {\n                                dispatch({type: \"displayState\", payload: { ...state }});\n                            }}>\n                                Display State\n                            </button>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <br />\n                                <DisplayCourseList concentration={concentration}/>\n                            </Col>\n                            <Col>\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <div>\n                                    <SemesterTable />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Footer />\n                        </Row>\n                    </Container>\n                </DragDropContext>\n            </StateContext.Provider>\n        </DispatchContext.Provider>\n    );\n};\n","import React from \"react\";\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nexport const App = (): JSX.Element => {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n};\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\n            /* webpackChunkName: \"web-vitals\" */\n            \"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        })\n            .catch(err => err as string);\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}