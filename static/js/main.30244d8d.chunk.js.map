{"version":3,"sources":["components/util/Notifications.tsx","context/SemesterCourseContext.ts","components/courses/Course.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","context/CourseContext.ts","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","SemesterCourseContext","React","createContext","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","getSemesterStr","semesterNum","SemesterTable","Consumer","value","droppableId","Table","Array","fill","map","e","i","droppableProps","section","DropdownMenu","setConcentration","Dropdown","Toggle","variant","id","Menu","as","onClick","CONCENTRATIONS","CourseContainer","courses","placeholder","AIConc","StringsToCourses","core","capstone","conc","general","writing","stats","systems","elective","BioConc","SecurityConc","DataScienceConc","HPCConc","NetworksConc","TheoryConc","DisplayCourseList","concentration","stringCourses","console","log","allCourses","COURSES","length","courseName","course","push","CourseContext","MainPage","useState","setCourses","semesterCourses","setSemesterCourses","setDisplay","useEffect","setTimeout","Provider","onDragEnd","result","destination","source","theCourses","theCourse","splice","tmpSemesterCourses","tmpCourses","Container","Row","Col","Badge","bg","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30244d8d.chunk.js","sourcesContent":["import { Modal } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;","import { Course as CourseType } from \"../interfaces/course\";\nimport React from \"react\";\n\nexport const SemesterCourseContext = React.createContext<CourseType[]>([]);\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, ListGroup } from \"react-bootstrap\";\nimport React from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { SemesterCourseContext } from \"../../context/SemesterCourseContext\";\nimport { Course } from \"../courses/Course\";\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const SemesterTable = (): JSX.Element =>\n    <SemesterCourseContext.Consumer>\n        {value =>\n            <Droppable droppableId=\"semester-table\">\n                {(prov: DroppableProvided) =>\n\n                    <Table >\n                        <thead>\n                            <tr>\n                                {new Array(1).fill(0).map((e, i) => <th key={i}>{`${getSemesterStr(i + 1)} semester`}</th>)}\n                            </tr>\n                        </thead>\n                        <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                            <tr>\n                                <td>\n                                    <ListGroup>\n                                        {\n                                            value.map((e, i) =>\n                                                <ListGroup.Item key={i}>\n                                                    <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                </ListGroup.Item>\n                                            )\n                                        }\n                                    </ListGroup>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                }\n            </Droppable>\n        }\n    </SemesterCourseContext.Consumer>;\n","import { Dropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu({setConcentration}:\n    {setConcentration: (concentration:Concentration)=>void}): JSX.Element{\n    \n    return <div>\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Concentrations:\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[0])}>AI and Robotics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[1])}>Bioinformatics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[2])}>Cybersecurity</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[3])}>Data Science</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[4])}>High-Performance Computing</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[5])}>Networks and Systems</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[6])}>Theory</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport const CourseContainer = (props: { courses: CourseType[] }): JSX.Element =>\n    <>\n        <Droppable droppableId=\"coursecontainer\">\n            {(prov) =>\n                <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                    {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                    {prov.placeholder}\n                </ListGroup>\n            }\n        </Droppable>\n    </>;\n","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\n\nexport function AIConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].conc.general)}/>\n        <p>Choose One Lab Sequence: (Needs fixing)</p>\n        \n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].conc.stats)}/>\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].conc.systems)}/>\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].conc.elective)}/>\n    </div>;\n}\n\nexport function BioConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Bioinformatics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].conc.general)}/>\n        <p>Choose One Chem Sequence:</p>\n        <p>Choose One Organic Chem Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].conc.stats)}/>\n        <p>Select One Data Analysis Course:</p>\n        <p>Select Two from the Following:</p>\n    </div>;\n}\n\nexport function SecurityConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Cybersecurity</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].conc.general)}/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].conc.stats)}/>\n        <p>Select Two Advanced Reqs:</p>\n        <p>Select Two from the Following:</p>\n    </div>;\n}\n\nexport function DataScienceConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[3].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[3].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[3].conc.general)}/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].writing)}/>\n        <p>Select One Advanced Data Science:</p>\n        <p>Select One Advanced Math:</p>\n        <p>Select One of the Following:</p>\n    </div>;\n}\n\nexport function HPCConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <p>Come back and figure this one out later</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].writing)}/>\n    </div>;\n}\n\nexport function NetworksConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Networks and Systems</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].conc.general)}/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].conc.stats)}/>\n        <p>Select One Security Requirement:</p>\n        <p>Select Two Systems Requirements:</p>\n        <p>Select Two of the Following:</p>\n    </div>;\n}\n\nexport function TheoryConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Theory</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].conc.general)}/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].conc.stats)}/>\n        <p>Select One of the Following Tracks:</p>\n        <p>Select Two of the Following:</p>\n    </div>;\n}","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport function DisplayCourseList({concentration}:{concentration:Concentration}): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n        console.log(\"Entered conversion function\");\n        const courses = [];\n        const allCourses = COURSES as CourseType[];\n        for (let i=0; i<stringCourses.length; i++){\n            const courseName = stringCourses[i];\n            for (let i=0; i<allCourses.length; i++){\n                console.log(\"Looping through all courses\");\n                const course = allCourses[i];\n                console.log(course.name);\n                console.log(courseName);\n                if (courseName === course.name){\n                    courses.push(course);\n                    console.log(\"Added a course to courses\");\n                }\n            }\n            console.log(courses);\n        }\n        return courses;\n    }\n\n    if (concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses}></AIConc>;\n    } else if (concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses}></BioConc>;\n    } else if (concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses}></SecurityConc>;\n    } else if (concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses}></DataScienceConc>;\n    } else if (concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses}></HPCConc>;\n    } else if (concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses}></NetworksConc>;\n    } else if (concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import COURSES from \"../json/courses.json\";\nimport { Course } from \"../interfaces/course\";\nimport React from \"react\";\n\nexport const CourseContext = React.createContext<Course[]>(COURSES as Course[]);\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { CourseContext } from \"../context/CourseContext\";\nimport COURSES from \"../json/courses.json\";\nimport { Course as CourseType } from \"../interfaces/course\";\nimport { SemesterCourseContext } from \"../context/SemesterCourseContext\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [courses, setCourses] = useState<CourseType[]>(COURSES as CourseType[]);\n    const [semesterCourses, setSemesterCourses] = useState<CourseType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },4500);\n    },[]);  \n\n    const onDragEnd = (result: DropResult) => {\n        if (!result.destination) {\n            return;\n        }\n\n        if(result.source.droppableId == \"coursecontainer\" && result.destination?.droppableId == \"semester-table\"){\n            // dragging course from course container to semester table\n            const theCourses = courses;\n            const theCourse = theCourses.splice(result.source.index, 1)[0];\n            setCourses(theCourses);\n            const tmpSemesterCourses = semesterCourses;\n            tmpSemesterCourses.splice(result.destination?.index,0,theCourse);\n            setSemesterCourses(tmpSemesterCourses);\n\n        } else if(result.source.droppableId == \"coursecontainer\" && result.destination?.droppableId == \"coursecontainer\"){\n\n            // dropping within same container\n            if(result.source.index == result.destination?.index){\n                // do nothing\n            } else {\n                const tmpCourses = courses;\n                const theCourse = courses.splice(result.source.index,1)[0];\n                tmpCourses.splice(result.destination?.index,0,theCourse);\n                setCourses(tmpCourses);\n            }\n\n        } else if(result.source.droppableId == \"semester-table\" && result.destination?.droppableId == \"semester-table\"){\n            // dropping within same semester-table\n            if(result.source.index == result.destination.index){\n                // do nothing\n            } else{\n                // edit order\n                const tmpSemesterCourses = semesterCourses;\n                // take course out of old spot\n                const theCourse = tmpSemesterCourses.splice(result.source.index,1)[0];\n                // place course in new spot\n                tmpSemesterCourses.splice(result.destination?.index,0,theCourse);\n                setSemesterCourses(tmpSemesterCourses);\n            }\n        }\n\n        /*\n        console.log(result);\n        const theCourses = courses;\n        const theCourse = theCourses.splice(result.source.index, 1)[0];\n        console.log(`the course = ${Object.values(theCourse)}`);\n        if (result.destination.droppableId === \"coursecontainer\") {\n            theCourses.splice(result.destination?.index, 0, theCourse);\n            setCourses(theCourses);\n        } else if (result.destination.droppableId === \"semester-table\") {\n            const tmpSemesterCourses = semesterCourses;\n            tmpSemesterCourses.splice(result.destination?.index, 0, theCourse);\n            setSemesterCourses(tmpSemesterCourses);\n            setCourses(theCourses);\n            console.log(\"running proper func\");\n        }\n        */\n    };\n\n    return (\n        <>\n            <CourseContext.Provider value={courses}>\n                <SemesterCourseContext.Provider value={semesterCourses}>\n                    <DragDropContext\n                        onDragEnd={onDragEnd}\n                    >\n                        <Container>\n                            <br />\n                            <Row>\n                                <Col>\n                                    {<WelcomeToast display={display}/>}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Badge bg=\"primary\"><h1>Course Scheduler</h1></Badge>\n                                </Col>\n                            </Row>\n                            <br />\n                            <Row>\n                                <Col>\n                                    <Row>\n                                        <Col>\n                                            <DropdownMenu setConcentration={setConcentration}></DropdownMenu>\n                                        </Col>\n                                    </Row>\n                                    <br />\n                                    <Row>\n                                        <Col>\n                                        </Col>\n                                    </Row>\n                                </Col>\n                            </Row>\n                            <br />\n                            <br />\n                            <Row>\n                                <Col>\n                                    <DisplayCourseList concentration={concentration}></DisplayCourseList>\n                                </Col>\n                                <Col>\n                                    <SemesterTable />\n                                </Col>\n                            </Row>\n                        </Container>\n                    </DragDropContext>\n                </SemesterCourseContext.Provider>\n            </CourseContext.Provider>\n        </>\n    );\n};\n","import React from \"react\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}