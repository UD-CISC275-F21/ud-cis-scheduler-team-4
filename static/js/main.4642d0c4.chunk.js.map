{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/util/EditCourse.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","EditCourse","useState","course","nameText","setNameText","placeholder","type","value","onChange","e","target","Button","onClick","setDisplay","tmpSemesters","semesterCourses","tmpSemester","ind1","i","length","semesternum","semesterNumber","splice","courses","setSemesterCourses","getSemesterStr","semesterNum","Semester","setCourses","func1","console","log","forEach","Object","values","useEffect","find","semesters","push","courseSetter","Col","droppableId","Table","droppableProps","map","Row","section","xs","lg","variant","tmpCourses","SemesterTable","Array","fill","elem","Accordion","defaultActiveKey","eventKey","semestersCourses","DropdownMenu","setConcentration","Dropdown","Toggle","id","Menu","as","CONCENTRATIONS","CourseContainer","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","SecurityConc","DataScienceConc","HPCConc","NetworksConc","TheoryConc","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","setSemesters","MainPage","concentrationContainers","setTimeout","entries","onDragEnd","result","destination","includes","source","parseInt","substring","lastIndexOf","theCourse","semesterNum1Id","semesterNum2Id","semesterNum1","semesterNum2","oneFound","twoFound","semester1","semester2","ind2","theSemester","semester1Courses","sourceCourse","semester2Courses","tmpConcentrationContainers","tmpContainer","tmpConcCourses","tmpConcCourse","tmpSemesterCourses","semesterDropId","tmpSemesterCourses2","sourceId","tmpConcContainers","tmpConcContainer","tmpConcContainerCourses","tmpConcContainer1","tmpConcContainer2","tmpConc1Courses","tmpConc2Courses","tmpConc1Course","Container","Badge","bg","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4642d0c4.chunk.js","sourcesContent":["import { Modal } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import React, { useState } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\nexport const EditCourse = (props: {display: boolean, setDisplay: React.Dispatch<React.SetStateAction<boolean>>, course: CourseType, setCourses: React.Dispatch<React.SetStateAction<CourseType[]>>, semesterNumber: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    return (\n        <Modal show={true}>\n            <Modal.Header>\n                <Modal.Title>\n                    HEADER\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <input placeholder=\"Enter Course Name\"type=\"textbox\" value={nameText} \n                    onChange={(e) =>{\n                        setNameText(e.target.value);\n                    }\n                    }/>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={() => {\n                    props.setDisplay(!props.display);\n                    const tmpSemesters: SemesterType[] = props.semesterCourses;\n                    let tmpSemester: SemesterType = tmpSemesters[0];\n                    let ind1 = -1;\n                    for(let i = 0; i < tmpSemesters.length; i++){\n                        if(tmpSemesters[i].semesternum === props.semesterNumber){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind1 = i;\n                            break;\n                        }\n                    }\n                    for(let i=0;i<tmpSemester.courses.length;i++){\n                        if(tmpSemester.courses[i].name===props.course.name){\n                            //found course\n                            tmpSemester.courses[i].name = nameText;\n                        }\n                    }\n                    tmpSemesters.splice(ind1,0,tmpSemester);\n                    props.setSemesterCourses([...tmpSemesters]);\n                }}>END EDIT</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, ListGroup } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Col, Button, Row } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: { ind: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n\n    const func1 = (courses: CourseType[]) => {\n\n        console.log(\"---calling func1 with---\");\n        courses.forEach(e => console.log(Object.values(e)));\n        setCourses(courses);\n\n    };\n\n    useEffect(() => {\n\n        console.log(\"rendering semester\");\n        if(!props.semesterCourses.find(e => e.semesternum == props.ind+1)){\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({semesternum: props.ind+1, courses: courses, courseSetter: func1});\n            props.setSemesterCourses(semesters);\n            //console.log(semesters);\n        }\n\n    }, []);\n\n    useEffect(() => {\n\n        console.log(\"setter changed!\");\n\n    },[setCourses]);\n\n    useEffect(() => {\n\n        console.log(\"----courses are now----\");\n        courses.forEach(e => console.log(Object.values(e)));\n\n    }, [courses]);\n\n    return(\n        <Col key={`semester-table-col-${props.ind}`}>\n            <Droppable droppableId={`semester-table-${props.ind+1}`}>\n                {(prov: DroppableProvided) =>\n                    <Table key={`semester-table-table-${props.ind}`}>\n                        <thead>\n                            <tr>\n                                <td>{`${getSemesterStr(props.ind+1)}`}</td>\n                            </tr>\n                        </thead>\n                        <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                            <tr>\n                                <td>\n                                    <ListGroup>\n                                        {\n                                            courses.map((e, i) =>\n                                                <>\n                                                    <ListGroup.Item key={i}>\n                                                        <Row>\n                                                            <Col>\n                                                                <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                            </Col>\n                                                            <Col xs lg=\"1\">\n                                                                <Button variant=\"danger\" onClick={() => {\n                                                                    const tmpCourses: CourseType[] = [...courses];\n                                                                    for(let i = 0; i < tmpCourses.length; i++){\n                                                                        const theCourse: CourseType = tmpCourses[i];\n                                                                        if(theCourse.name === e.name){\n                                                                            // found course\n                                                                            tmpCourses.splice(i,1);\n                                                                        }\n                                                                    }\n                                                                    setCourses([...tmpCourses]);\n                                                                    const tmpSemesters: SemesterType[] = props.semesterCourses;\n                                                                    let tmpSemester: SemesterType = tmpSemesters[0];\n                                                                    for(let i = 0; i < tmpSemesters.length; i++){\n                                                                        tmpSemester = tmpSemesters[i];\n                                                                        if(tmpSemester.semesternum === props.ind+1){\n                                                                            // found semester\n                                                                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                                                                            tmpSemester.courses = [...tmpCourses];\n                                                                            tmpSemester.courseSetter([...tmpCourses]);\n                                                                            tmpSemesters.splice(i,0,tmpSemester);\n                                                                            props.setSemesterCourses([...tmpSemesters]);\n                                                                            return e.name;\n                                                                        }\n                                                                    }\n\n                                                                    return e.name;\n                                                                }}></Button>\n                                                                <Button variant=\"warning\" onClick={()=>{\n                                                                    setDisplay(!display);\n                                                                }}>\n                                                                </Button>\n                                                                {display && <EditCourse display={display} setDisplay={setDisplay} course={e} setCourses={setCourses} semesterNumber={props.ind+1} semesterCourses={props.semesterCourses} setSemesterCourses={props.setSemesterCourses} ></EditCourse>}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                </>\n                                            )\n                                        }\n                                    </ListGroup>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                }\n            </Droppable>\n        </Col>\n    );\n\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { Accordion } from \"react-bootstrap\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number, semestersCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n\n    return(\n        <>\n            {\n                new Array(props.semesters).fill(0).map((elem, ind) =>\n                    <Accordion key={`accordion ${ind}`} defaultActiveKey=\"0\">\n                        <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header>{`Semester ${ind+1}`}</Accordion.Header>\n                            <Accordion.Body>\n                                <Semester ind={ind} key={`semester-table-key-${ind}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                )\n            }\n        </>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu({setConcentration}:\n    {setConcentration: (concentration:Concentration)=>void}): JSX.Element{\n    \n    return <div>\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Concentrations:\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[0])}>AI and Robotics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[1])}>Bioinformatics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[2])}>Cybersecurity</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[3])}>Data Science</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[4])}>High-Performance Computing</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[5])}>Networks and Systems</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[6])}>Theory</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[], name: string}): JSX.Element => {\n\n    return(\n        <>\n            <Droppable droppableId={props.name}>\n                {(prov) =>\n                    <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                        {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                        {prov.placeholder}\n                    </ListGroup>\n                }\n            </Droppable>\n        </>\n    );\n};","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport function AIConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>} ): JSX.Element{\n    \n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone-1\",\n                    \"courses\": capstone1Courses,\n                    \"setCourses\": setCapstone1Courses\n\n                },\n                {\n                    \"name\": \"general-1\",\n                    \"courses\": general1Courses,\n                    \"setCourses\": setGeneral1Courses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"capstone-2\",\n                    \"courses\": capstone2Courses,\n                    \"setCourses\": setCapstone2Courses\n                },\n                {\n                    \"name\": \"general-2\",\n                    \"courses\": general2Courses,\n                    \"setCourses\": setGeneral2Courses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                }\n\n            ]\n\n        );\n    },[]);\n\n    return<div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name={\"core\"}  />\n        <CourseContainer courses={capstone1Courses} name={\"capstone-1\"} />\n        <CourseContainer courses={general1Courses} name={\"general-1\"} />\n        <p>Choose One Lab Sequence: (Needs fixing)</p>\n        \n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name={\"writing\"} />\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={capstone2Courses} name={\"capstone-2\"} />\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={general2Courses} name={\"general-2\"} />\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={electiveCourses} name={\"elective\"} />\n    </div>;\n}\n\nexport function BioConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n\n    return(\n        <div>\n            <h2>Bioinformatics</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Chem Sequence:</p>\n            <p>Choose One Organic Chem Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Data Analysis Course:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function SecurityConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n   \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Cybersecurity</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stats\"/>\n            <p>Select Two Advanced Reqs:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function DataScienceConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].writing));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n\n            ]\n\n        );\n    }, []);\n    \n    return<div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <p>Select One Advanced Data Science:</p>\n        <p>Select One Advanced Math:</p>\n        <p>Select One of the Following:</p>\n    </div>;\n}\n\nexport function HPCConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    \n    useEffect(() => {\n\n        props.setConcentrationContainers(\n\n            [\n\n                {\n\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n\n                }\n\n            ]\n\n        );\n    \n    },[]);\n\n\n    return<div>\n        <p>Come back and figure this one out later</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n    </div>;\n}\n\nexport function NetworksConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    \n    return(\n        <div>\n            <h2>Networks and Systems</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Security Requirement:</p>\n            <p>Select Two Systems Requirements:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n\nexport function TheoryConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Theory</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One of the Following Tracks:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport function DisplayCourseList(props: {concentration: Concentration, setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>> }): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n\n        const allCourses = COURSES as CourseType[];\n\n        const tmparr: CourseType[] = stringCourses.map(e => [...allCourses.filter(i => i.name == e)]).flat(2);\n\n        return tmparr;\n\n    }\n\n    if (props.concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></AIConc>;\n    } else if (props.concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></BioConc>;\n    } else if (props.concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers} ></SecurityConc>;\n    } else if (props.concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></DataScienceConc>;\n    } else if (props.concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></HPCConc>;\n    } else if (props.concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></NetworksConc>;\n    } else if (props.concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: { setSemesters: React.Dispatch<React.SetStateAction<number>>, semesters: number}): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }}>Add Semester</Button>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../interfaces/course\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]); // is initialized to the first concentration container, contains all of the parts of the concentration, outlined in the comment below\n    /*\n\n    {\n\n        \"name\": \"core\" <--- what part of the concentration it is\n        courses: [] <--- the courses in the part\n        setCourses: [] <--- the way to update the courses in the part when we drag into the semester\n\n    }\n\n\n    */\n\n    // maybe make an object like indexes are the semesters so {1: [\"CISC101\",\"CISC106\"]}\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },1);\n    },[]);  \n\n    useEffect(() => {\n\n        console.log(\"edited semesterCourses from MainPage.tsx\");\n        semesterCourses.forEach(e => console.log(Object.entries(e)));\n\n    },[semesterCourses]);\n\n    const onDragEnd = (result: DropResult) => {\n        console.log(semesterCourses);\n        console.log(result);\n        console.log(concentrationContainers);\n\n        if (!result.destination) {\n            return;\n        }if(result.destination.droppableId.includes(\"semester-table\")){\n            \n            if(!result.source.droppableId.includes(\"semester-table\")){\n\n                console.log(\"from conc container\");\n\n                const tmpConcentrationContainers = [...concentrationContainers];\n\n                let tmpContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n                let ind1 = -1;\n                for(let i = 0; i < concentrationContainers.length; i++){ // finding container , ex: core, capstone\n\n                    if(concentrationContainers[i].name === result.source.droppableId){\n                        tmpContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses = tmpContainer.courses;\n                const tmpConcCourse = tmpConcCourses.splice(result.source.index,1)[0];\n                tmpContainer.setCourses(tmpConcCourses);\n                tmpConcentrationContainers.splice(ind1,0,tmpContainer)[0];\n                setConcentrationContainers(tmpConcentrationContainers);\n                \n                // move spliced course to semester table\n                // get semester number from id\n                const tmpSemesterCourses = [...semesterCourses];\n                const semesterDropId = result.destination.droppableId;\n                const semesterNumber = parseInt(semesterDropId.substring(semesterDropId.lastIndexOf(\"-\")+1));\n                let tmpSemester: SemesterType = [...tmpSemesterCourses][0];\n                let ind2 = -1;\n                for(let i = 0; i < semesterCourses.length; i++){\n\n                    if(semesterCourses[i].semesternum == semesterNumber){\n                        tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n                \n                const tmpSemesterCourses2 = [...tmpSemester.courses]; \n                if(tmpSemesterCourses2.length === 0){\n                    tmpSemesterCourses2.push(tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n                } else{\n\n                    tmpSemesterCourses2.splice(result.destination.index,0,tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n\n                }\n            } else if(result.source.droppableId === result.destination.droppableId){\n\n                // dropping in same table\n                console.log(\"dropping in same table\");\n\n                if(result.source.droppableId.includes(\"semester-table\")){\n                    \n                    console.log(\"within same semester table\");\n\n                    const semesterNum = parseInt(result.source.droppableId.substring(result.source.droppableId.lastIndexOf(\"-\")+1));\n\n                    const tmpSemesters: SemesterType[] = [...semesterCourses];\n                    \n                    let tmpSemester: SemesterType = tmpSemesters[0];\n\n                    let ind = 0;\n\n                    for(let i = 0; i < tmpSemesters.length; i++){\n\n                        if(tmpSemesters[i].semesternum == semesterNum){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind = i;\n                            break;\n                        }\n\n                    }\n\n                    console.log(Object.entries(tmpSemester));\n\n                    const courses: CourseType[] = [...tmpSemester.courses];\n                    console.log(\"----before any splicing----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    const theCourse: CourseType = courses.splice(result.source.index,1)[0]; // gets 108\n                    console.log(`---spliced course--- : ${Object.values(theCourse)}`);\n                    console.log(\"----before----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    courses.splice(result.destination.index,0,theCourse);\n                    console.log(\"----after----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemester.courseSetter([...courses]);\n                    tmpSemester.courses = [...courses];\n                    console.log(\"----after setting----\");\n                    tmpSemester.courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemesters.splice(ind,0,tmpSemester);\n                    console.log(\"----before setting semesters----\");\n                    setSemesterCourses(tmpSemesters);\n\n                }\n\n\n\n            } else if(result.source.droppableId.includes(\"semester-table\") && result.destination.droppableId.includes(\"semester-table\")){\n\n                // dropping from one semester table to the next\n\n                console.log(\"semestertable --> semestertable\");\n\n                const semesterNum1Id = result.source.droppableId;\n                const semesterNum2Id = result.destination.droppableId;\n\n                //console.log(`semesterNum1Id = ${semesterNum1Id}`);\n                //console.log(`semesterNum2Id = ${semesterNum2Id}`);\n\n                const semesterNum1 = parseInt(semesterNum1Id.substring(semesterNum1Id.lastIndexOf(\"-\")+1));\n\n                const semesterNum2 = parseInt(semesterNum2Id.substring(semesterNum2Id.lastIndexOf(\"-\")+1));\n\n                // got the numbers of semester1 and semester2\n\n                const tmpSemesters = [...semesterCourses];\n\n                let oneFound = false;\n                let twoFound = false;\n                let semester1 = tmpSemesters[0];\n                let semester2 = tmpSemesters[0];\n                //console.log(`semester1# = ${semesterNum1}`);\n                //console.log(`semester2# = ${semesterNum2}`);\n\n                let i = 0;\n\n                let ind1 = 0;\n                let ind2 = 0;\n\n                for(i = 0; !oneFound || !twoFound ;){\n\n                    const theSemester = tmpSemesters[i];\n                    if(theSemester){\n                        //console.log(`the semester = ${Object.entries(theSemester)}, onefound = ${oneFound} and twofound = ${twoFound}, semesterstatus = ${theSemester === null || theSemester == undefined}`);\n                    } else{\n                        //console.log(\"semester is null\");\n                    }\n\n\n                    if(oneFound && twoFound){\n                        break;\n                    } else if(!oneFound && theSemester.semesternum == semesterNum1){\n                        //console.log(\"splicing first semester\");\n                        oneFound = true;\n                        semester1 = tmpSemesters.splice(i,1)[0];\n                        ind1 = i;\n                        i = 0;\n                        continue;\n                    } else if(!twoFound && theSemester.semesternum == semesterNum2){\n                        //console.log(\"splicing second semester\");\n                        twoFound = true;\n                        semester2 = tmpSemesters.splice(i,1)[0];\n                        ind2 = i;\n                        i = 0;\n                        continue;\n                    } else{\n                        i++;\n                    }\n                    //console.log(\"else\");\n                    //console.log(Object.values(tmpSemesters));\n\n                }\n\n                // got both semesters\n\n                // splice from source\n\n                const semester1Courses: CourseType[] = [...semester1.courses];\n                const sourceCourse = semester1Courses.splice(result.source.index,1)[0];\n                semester1.courseSetter(semester1Courses);\n                semester1.courses = [...semester1Courses];\n\n                const semester2Courses: CourseType[] = [...semester2.courses];\n                semester2Courses.splice(result.destination.index,0,sourceCourse);\n                semester2.courses = [...semester2Courses];\n                semester2.courseSetter([...semester2Courses]);\n\n                tmpSemesters.splice(ind1,0,semester1);\n                tmpSemesters.splice(ind2,0,semester2);\n                setSemesterCourses(tmpSemesters);\n\n            }\n        } else{\n\n            if ( result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\") ) {\n                \n                const tmpSemesters: SemesterType[] = [...semesterCourses];\n\n                const sourceId: string = result.source.droppableId;\n                const semesterNum: number = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\")));\n                let tmpSemester: SemesterType = tmpSemesters[0];\n                let ind = -1;\n\n                for(let i = 0; i < tmpSemesters.length; i++){\n\n                    if(tmpSemesters[i].semesternum === semesterNum){\n                        // found semester\n                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                        ind = i;\n                        break;\n                    }\n\n                }\n\n                const tmpSemesterCourses: CourseType[] = [...tmpSemester.courses];\n                const theCourse: CourseType = tmpSemesterCourses.splice(result.source.index,1)[0];\n\n                tmpSemester.courses = [...tmpSemesterCourses];\n                tmpSemester.courseSetter([...tmpSemesterCourses]);\n\n                tmpSemesters.splice(ind,0,tmpSemester);\n\n                setSemesterCourses(tmpSemesters);\n\n                // semester updated\n\n\n                const tmpConcContainers = [...concentrationContainers];\n\n                let tmpConcContainer: ConcentrationContainerType = tmpConcContainers[0];\n\n                let ind2 = -1;\n\n                for(let i = 0; i < tmpConcContainers.length; i++){\n\n                    if(tmpConcContainers[i].name === result.destination.droppableId){\n                        // found concentration container\n                        tmpConcContainer = tmpConcContainers.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcContainerCourses = [...tmpConcContainer.courses];\n\n                tmpConcContainerCourses.splice(result.destination.index,0,theCourse);\n\n                tmpConcContainer.courses = [...tmpConcContainerCourses];\n                \n                tmpConcContainer.setCourses([...tmpConcContainerCourses]);\n\n                // found concentration container\n\n                tmpConcContainers.splice(ind2,0,tmpConcContainer);\n\n                setConcentrationContainers(tmpConcContainers);\n\n\n\n\n            } else if(result.source.droppableId !== result.destination.droppableId && !result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\")){\n                // dropping from core --> language for instance\n                const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n                let tmpConcContainer1: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let tmpConcContainer2: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let ind1 = -1;\n\n                let ind2 = -1;\n\n                for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                    if(ind1 !== -1 && ind2 !== -1){\n                        break;\n                    } else if(tmpConcentrationContainers[i].name == result.source.droppableId){\n                        tmpConcContainer1 = tmpConcentrationContainers[i];\n                        ind1 = i;\n                        continue;\n                    } else if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                        tmpConcContainer2 = tmpConcentrationContainers[i];\n                        ind2 = i;\n                        continue;\n                    }\n\n                }\n\n                const tmpConc1Courses: CourseType[] = [...tmpConcContainer1.courses];\n\n                const tmpConc2Courses: CourseType[] = [...tmpConcContainer2.courses];\n\n                const tmpConc1Course: CourseType = tmpConc1Courses.splice(result.source.index,1)[0];\n\n                tmpConcContainer1.courses = [...tmpConc1Courses];\n\n                tmpConcContainer1.setCourses([...tmpConc1Courses]);\n\n                tmpConc2Courses.splice(result.destination.index,0,tmpConc1Course);\n\n                tmpConcContainer2.courses = [...tmpConc2Courses];\n\n                tmpConcContainer2.setCourses([...tmpConc2Courses]);\n\n                tmpConcentrationContainers.splice(ind1,0,tmpConcContainer1);\n\n                tmpConcentrationContainers.splice(ind2,0,tmpConcContainer2);\n\n                setConcentrationContainers([...tmpConcentrationContainers]);\n\n            } else {\n\n                console.log(\"container --> container\");\n\n                const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n                let tmpConcContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let ind1 = -1;\n                \n                for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                    if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                        // found container\n                        tmpConcContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses: CourseType[] = [...tmpConcContainer.courses];\n\n                const tmpConcCourse: CourseType = tmpConcCourses.splice(result.source.index,1)[0];\n\n                // spliced course, now place course\n\n                tmpConcCourses.splice(result.destination.index,0,tmpConcCourse);\n\n                tmpConcContainer.courses = tmpConcCourses;\n\n                tmpConcContainer.setCourses([...tmpConcCourses]);\n\n                tmpConcentrationContainers.splice(ind1,0,tmpConcContainer);\n\n                setConcentrationContainers(tmpConcentrationContainers);\n\n            }\n\n        }\n    };\n\n    return (\n        <>\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            >\n                <Container>\n                    <br />\n                    <Row>\n                        <Col>\n                            {<WelcomeToast display={display}/>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Badge bg=\"primary\"><h1>Course Scheduler</h1></Badge>\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <DropdownMenu setConcentration={setConcentration}></DropdownMenu>\n                                </Col>\n                            </Row>\n                            <br />\n                            <Row>\n                                <Col>\n                                    <AddSemesterButton setSemesters={setSemesters} semesters={semesters} />\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            <DisplayCourseList concentration={concentration} setConcentrationContainers={setConcentrationContainers} ></DisplayCourseList>\n                        </Col>\n                        <Col>\n                            <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </DragDropContext>\n        </>\n    );\n};\n","import React from \"react\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}