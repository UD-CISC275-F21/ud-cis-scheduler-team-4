{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","getSemesterStr","semesterNum","Semester","useState","courses","setCourses","func1","console","log","forEach","e","Object","values","useEffect","semesterCourses","find","semesternum","semesters","push","courseSetter","setSemesterCourses","Col","droppableId","Table","droppableProps","map","i","section","SemesterTable","Array","fill","elem","semestersCourses","DropdownMenu","setConcentration","Dropdown","Toggle","variant","id","Menu","as","onClick","CONCENTRATIONS","CourseContainer","placeholder","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","SecurityConc","DataScienceConc","HPCConc","NetworksConc","TheoryConc","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","Button","tmpSemesters","setSemesters","MainPage","setDisplay","concentrationContainers","setTimeout","entries","onDragEnd","result","destination","includes","source","parseInt","substring","lastIndexOf","tmpSemester","length","splice","theCourse","tmpConcentrationContainers","tmpContainer","ind1","tmpConcCourses","tmpConcCourse","tmpSemesterCourses","semesterDropId","semesterNumber","ind2","tmpSemesterCourses2","Container","Row","Badge","bg","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d93a60e.chunk.js","sourcesContent":["import { Modal } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, ListGroup } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: { ind: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n\n    const func1 = (courses: CourseType[]) => {\n\n        console.log(\"---calling func1 with---\");\n        courses.forEach(e => console.log(Object.values(e)));\n        setCourses(courses);\n\n    };\n\n    useEffect(() => {\n\n        console.log(\"rendering semester\");\n        if(!props.semesterCourses.find(e => e.semesternum == props.ind+1)){\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({semesternum: props.ind+1, courses: courses, courseSetter: func1});\n            props.setSemesterCourses(semesters);\n            //console.log(semesters);\n        }\n\n    }, []);\n\n    useEffect(() => {\n\n        console.log(\"setter changed!\");\n\n    },[setCourses]);\n\n    useEffect(() => {\n\n        console.log(\"----courses are now----\");\n        courses.forEach(e => console.log(Object.values(e)));\n\n    }, [courses]);\n\n    return(\n        <Col key={`semester-table-col-${props.ind}`}>\n            <Droppable droppableId={`semester-table-${props.ind+1}`}>\n                {(prov: DroppableProvided) =>\n                    <Table key={`semester-table-table-${props.ind}`}>\n                        <thead>\n                            <tr>\n                                <td>{`${getSemesterStr(props.ind+1)}`}</td>\n                            </tr>\n                        </thead>\n                        <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                            <tr>\n                                <td>\n                                    <ListGroup>\n                                        {\n                                            courses.map((e, i) =>\n                                                <ListGroup.Item key={i}>\n                                                    <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                </ListGroup.Item>\n                                            )\n                                        }\n                                    </ListGroup>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                }\n            </Droppable>\n        </Col>\n    );\n\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number, semestersCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n\n    return(\n        <>\n            {\n                new Array(props.semesters).fill(0).map((elem, ind) =>\n                    <Semester ind={ind} key={`semester-table-key-${ind}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />\n                )\n            }\n        </>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu({setConcentration}:\n    {setConcentration: (concentration:Concentration)=>void}): JSX.Element{\n    \n    return <div>\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Concentrations:\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[0])}>AI and Robotics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[1])}>Bioinformatics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[2])}>Cybersecurity</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[3])}>Data Science</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[4])}>High-Performance Computing</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[5])}>Networks and Systems</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[6])}>Theory</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[], name: string}): JSX.Element => {\n\n    return(\n        <>\n            <Droppable droppableId={props.name}>\n                {(prov) =>\n                    <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                        {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                        {prov.placeholder}\n                    </ListGroup>\n                }\n            </Droppable>\n        </>\n    );\n};","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport function AIConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>} ): JSX.Element{\n    \n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone-1\",\n                    \"courses\": capstone1Courses,\n                    \"setCourses\": setCapstone1Courses\n\n                },\n                {\n                    \"name\": \"general-1\",\n                    \"courses\": general1Courses,\n                    \"setCourses\": setGeneral1Courses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"capstone-2\",\n                    \"courses\": capstone2Courses,\n                    \"setCourses\": setCapstone2Courses\n                },\n                {\n                    \"name\": \"general-2\",\n                    \"courses\": general2Courses,\n                    \"setCourses\": setGeneral2Courses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                }\n\n            ]\n\n        );\n    },[]);\n\n    return<div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name={\"core\"}  />\n        <CourseContainer courses={capstone1Courses} name={\"capstone-1\"} />\n        <CourseContainer courses={general1Courses} name={\"general-1\"} />\n        <p>Choose One Lab Sequence: (Needs fixing)</p>\n        \n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name={\"writing\"} />\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={capstone2Courses} name={\"capstone-2\"} />\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={general2Courses} name={\"general-2\"} />\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={electiveCourses} name={\"elective\"} />\n    </div>;\n}\n\nexport function BioConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n\n    return(\n        <div>\n            <h2>Bioinformatics</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Chem Sequence:</p>\n            <p>Choose One Organic Chem Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Data Analysis Course:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function SecurityConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n   \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Cybersecurity</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stats\"/>\n            <p>Select Two Advanced Reqs:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function DataScienceConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].writing));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n\n            ]\n\n        );\n    }, []);\n    \n    return<div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <p>Select One Advanced Data Science:</p>\n        <p>Select One Advanced Math:</p>\n        <p>Select One of the Following:</p>\n    </div>;\n}\n\nexport function HPCConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    \n    useEffect(() => {\n\n        props.setConcentrationContainers(\n\n            [\n\n                {\n\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n\n                }\n\n            ]\n\n        );\n    \n    },[]);\n\n\n    return<div>\n        <p>Come back and figure this one out later</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n    </div>;\n}\n\nexport function NetworksConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    \n    return(\n        <div>\n            <h2>Networks and Systems</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Security Requirement:</p>\n            <p>Select Two Systems Requirements:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n\nexport function TheoryConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Theory</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One of the Following Tracks:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport function DisplayCourseList(props: {concentration: Concentration, setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>> }): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n\n        const allCourses = COURSES as CourseType[];\n\n        const tmparr: CourseType[] = stringCourses.map(e => [...allCourses.filter(i => i.name == e)]).flat(2);\n\n        return tmparr;\n\n    }\n\n    if (props.concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></AIConc>;\n    } else if (props.concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></BioConc>;\n    } else if (props.concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers} ></SecurityConc>;\n    } else if (props.concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></DataScienceConc>;\n    } else if (props.concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></HPCConc>;\n    } else if (props.concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></NetworksConc>;\n    } else if (props.concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: { setSemesters: React.Dispatch<React.SetStateAction<number>>, semesters: number}): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }}>Add Semester</Button>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../interfaces/course\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]); // is initialized to the first concentration container, contains all of the parts of the concentration, outlined in the comment below\n    /*\n\n    {\n\n        \"name\": \"core\" <--- what part of the concentration it is\n        courses: [] <--- the courses in the part\n        setCourses: [] <--- the way to update the courses in the part when we drag into the semester\n\n    }\n\n\n    */\n\n    // maybe make an object like indexes are the semesters so {1: [\"CISC101\",\"CISC106\"]}\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },1);\n    },[]);  \n\n    useEffect(() => {\n\n        semesterCourses.forEach(e => console.log(Object.entries(e)));\n\n    },[semesterCourses]);\n\n    const onDragEnd = (result: DropResult) => {\n        console.log(semesterCourses);\n        console.log(result);\n        console.log(concentrationContainers);\n\n        if (!result.destination) {\n            return;\n        }if(result.destination.droppableId.includes(\"semester-table\")){\n            \n            if(!result.source.droppableId.includes(\"semester-table\")){\n                const tmpConcentrationContainers = [...concentrationContainers];\n\n                let tmpContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n                let ind1 = -1;\n                for(let i = 0; i < concentrationContainers.length; i++){ // finding container , ex: core, capstone\n\n                    if(concentrationContainers[i].name === result.source.droppableId){\n                        tmpContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses = tmpContainer.courses;\n                const tmpConcCourse = tmpConcCourses.splice(result.source.index,1)[0];\n                tmpContainer.setCourses(tmpConcCourses);\n                tmpConcentrationContainers.splice(ind1,0,tmpContainer)[0];\n                setConcentrationContainers(tmpConcentrationContainers);\n                \n                // move spliced course to semester table\n                // get semester number from id\n                const tmpSemesterCourses = [...semesterCourses];\n                const semesterDropId = result.destination.droppableId;\n                const semesterNumber = parseInt(semesterDropId.substring(semesterDropId.lastIndexOf(\"-\")+1));\n                let tmpSemester: SemesterType = [...tmpSemesterCourses][0];\n                let ind2 = -1;\n                for(let i = 0; i < semesterCourses.length; i++){\n\n                    if(semesterCourses[i].semesternum == semesterNumber){\n                        tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n                \n                const tmpSemesterCourses2 = [...tmpSemester.courses]; \n                if(tmpSemesterCourses2.length === 0){\n                    tmpSemesterCourses2.push(tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n                } else{\n\n                    tmpSemesterCourses2.splice(result.destination.index,0,tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n\n                }\n            } else if(result.source.droppableId === result.destination.droppableId){\n\n                // dropping in same table\n\n                if(result.source.droppableId.includes(\"semester-table\")){\n                    \n                    console.log(\"within same semester table\");\n\n                    const semesterNum = parseInt(result.source.droppableId.substring(result.source.droppableId.lastIndexOf(\"-\")+1));\n\n                    const tmpSemesters: SemesterType[] = [...semesterCourses];\n                    \n                    let tmpSemester: SemesterType = tmpSemesters[0];\n\n                    let ind = 0;\n\n                    for(let i = 0; i < tmpSemesters.length; i++){\n\n                        if(tmpSemesters[i].semesternum == semesterNum){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind = i;\n                            break;\n                        }\n\n                    }\n\n                    console.log(Object.entries(tmpSemester));\n\n                    const courses: CourseType[] = [...tmpSemester.courses];\n                    console.log(\"----before any splicing----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    const theCourse: CourseType = courses.splice(result.source.index,1)[0]; // gets 108\n                    console.log(`---spliced course--- : ${Object.values(theCourse)}`);\n                    console.log(\"----before----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    courses.splice(result.destination.index,0,theCourse);\n                    console.log(\"----after----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemester.courseSetter([...courses]);\n                    tmpSemester.courses = [...courses];\n                    console.log(\"----after setting----\");\n                    tmpSemester.courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemesters.splice(ind,0,tmpSemester);\n                    console.log(\"----before setting semesters----\");\n                    setSemesterCourses(tmpSemesters);\n\n                }\n\n\n\n            }\n\n        }\n    };\n\n    return (\n        <>\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            >\n                <Container>\n                    <br />\n                    <Row>\n                        <Col>\n                            {<WelcomeToast display={display}/>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Badge bg=\"primary\"><h1>Course Scheduler</h1></Badge>\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <DropdownMenu setConcentration={setConcentration}></DropdownMenu>\n                                </Col>\n                            </Row>\n                            <br />\n                            <Row>\n                                <Col>\n                                    <AddSemesterButton setSemesters={setSemesters} semesters={semesters} />\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            <DisplayCourseList concentration={concentration} setConcentrationContainers={setConcentrationContainers} ></DisplayCourseList>\n                        </Col>\n                        <Col>\n                            <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </DragDropContext>\n        </>\n    );\n};\n","import React from \"react\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}