{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","context/CourseContext.ts","components/semesters/AddSemesterButton.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","getSemesterStr","semesterNum","Semester","useState","courses","setCourses","useEffect","semesterCourses","find","e","semesternum","semesters","push","courseSetter","setSemesterCourses","console","log","Col","droppableId","Table","droppableProps","map","i","section","SemesterTable","Array","fill","elem","semestersCourses","DropdownMenu","setConcentration","Dropdown","Toggle","variant","id","Menu","as","onClick","CONCENTRATIONS","CourseContainer","placeholder","AIConc","StringsToCourses","core","capstone","conc","general","writing","stats","systems","elective","BioConc","SecurityConc","DataScienceConc","HPCConc","NetworksConc","TheoryConc","DisplayCourseList","concentration","stringCourses","allCourses","COURSES","length","courseName","course","CourseContext","React","createContext","AddSemesterButton","Button","tmpSemesters","setSemesters","MainPage","setDisplay","setTimeout","Provider","value","onDragEnd","result","destination","source","includes","num","parseInt","substring","lastIndexOf","semester","Object","values","tmpSemesterCourses","tmpSemester","splice","theCourse","tmpCourses","id1","ind1","num1","undefined","theSemester","theSemesterCourses","Container","Row","Badge","bg","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c8b3b9d.chunk.js","sourcesContent":["import { Modal } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, ListGroup } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: { ind: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n\n    useEffect(() => {\n\n        if(!props.semesterCourses.find(e => e.semesternum == props.ind+1)){\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({semesternum: props.ind+1, courses: courses, courseSetter: setCourses});\n            props.setSemesterCourses(semesters);\n            console.log(semesters);\n        }\n\n    }, []);\n\n    return(\n        <Col key={`semester-table-col-${props.ind}`}>\n            <Droppable droppableId={`semester-table-${props.ind+1}`}>\n                {(prov: DroppableProvided) =>\n                    <Table key={`semester-table-table-${props.ind}`}>\n                        <thead>\n                            <tr>\n                                <td>{`${getSemesterStr(props.ind+1)}`}</td>\n                            </tr>\n                        </thead>\n                        <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                            <tr>\n                                <td>\n                                    <ListGroup>\n                                        {\n                                            courses.map((e, i) =>\n                                                <ListGroup.Item key={i}>\n                                                    <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                </ListGroup.Item>\n                                            )\n                                        }\n                                    </ListGroup>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                }\n            </Droppable>\n        </Col>\n    );\n\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number, semestersCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n\n    return(\n        <>\n            {\n                new Array(props.semesters).fill(0).map((elem, ind) =>\n                    <Semester ind={ind} key={`semester-table-key-${ind}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />\n                )\n            }\n        </>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu({setConcentration}:\n    {setConcentration: (concentration:Concentration)=>void}): JSX.Element{\n    \n    return <div>\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Concentrations:\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[0])}>AI and Robotics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[1])}>Bioinformatics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[2])}>Cybersecurity</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[3])}>Data Science</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[4])}>High-Performance Computing</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[5])}>Networks and Systems</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[6])}>Theory</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport const CourseContainer = (props: { courses: CourseType[] }): JSX.Element =>\n    <>\n        <Droppable droppableId=\"coursecontainer\">\n            {(prov) =>\n                <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                    {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                    {prov.placeholder}\n                </ListGroup>\n            }\n        </Droppable>\n    </>;\n","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\n\nexport function AIConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].conc.general)}/>\n        <p>Choose One Lab Sequence: (Needs fixing)</p>\n        \n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].conc.stats)}/>\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].conc.systems)}/>\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[0].conc.elective)}/>\n    </div>;\n}\n\nexport function BioConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Bioinformatics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].conc.general)}/>\n        <p>Choose One Chem Sequence:</p>\n        <p>Choose One Organic Chem Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[1].conc.stats)}/>\n        <p>Select One Data Analysis Course:</p>\n        <p>Select Two from the Following:</p>\n    </div>;\n}\n\nexport function SecurityConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Cybersecurity</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].conc.general)}/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].conc.stats)}/>\n        <p>Select Two Advanced Reqs:</p>\n        <p>Select Two from the Following:</p>\n    </div>;\n}\n\nexport function DataScienceConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[3].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[3].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[3].conc.general)}/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].writing)}/>\n        <p>Select One Advanced Data Science:</p>\n        <p>Select One Advanced Math:</p>\n        <p>Select One of the Following:</p>\n    </div>;\n}\n\nexport function HPCConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <p>Come back and figure this one out later</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[2].writing)}/>\n    </div>;\n}\n\nexport function NetworksConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Networks and Systems</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].conc.general)}/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[5].conc.stats)}/>\n        <p>Select One Security Requirement:</p>\n        <p>Select Two Systems Requirements:</p>\n        <p>Select Two of the Following:</p>\n    </div>;\n}\n\nexport function TheoryConc({StringsToCourses}:\n    {StringsToCourses: (stringCourses:string[])=>Course[]}): JSX.Element{\n    return <div>\n        <h2>Theory</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].core)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].capstone)}/>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].conc.general)}/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].writing)}/>\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={StringsToCourses(CONCENTRATIONS[6].conc.stats)}/>\n        <p>Select One of the Following Tracks:</p>\n        <p>Select Two of the Following:</p>\n    </div>;\n}","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport function DisplayCourseList({concentration}:{concentration:Concentration}): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n        console.log(\"Entered conversion function\");\n        const courses = [];\n        const allCourses = COURSES as CourseType[];\n        for (let i=0; i<stringCourses.length; i++){\n            const courseName = stringCourses[i];\n            for (let i=0; i<allCourses.length; i++){\n                console.log(\"Looping through all courses\");\n                const course = allCourses[i];\n                console.log(course.name);\n                console.log(courseName);\n                if (courseName === course.name){\n                    courses.push(course);\n                    console.log(\"Added a course to courses\");\n                }\n            }\n            console.log(courses);\n        }\n        return courses;\n    }\n\n    if (concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses}></AIConc>;\n    } else if (concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses}></BioConc>;\n    } else if (concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses}></SecurityConc>;\n    } else if (concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses}></DataScienceConc>;\n    } else if (concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses}></HPCConc>;\n    } else if (concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses}></NetworksConc>;\n    } else if (concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import COURSES from \"../json/courses.json\";\nimport { Course } from \"../interfaces/course\";\nimport React from \"react\";\n\nexport const CourseContext = React.createContext<Course[]>(COURSES as Course[]);\n","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: { setSemesters: React.Dispatch<React.SetStateAction<number>>, semesters: number}): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }}>Add Semester</Button>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { CourseContext } from \"../context/CourseContext\";\nimport COURSES from \"../json/courses.json\";\nimport { Course as CourseType } from \"../interfaces/course\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [courses, setCourses] = useState<CourseType[]>(COURSES as CourseType[]);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n\n    // maybe make an object like indexes are the semesters so {1: [\"CISC101\",\"CISC106\"]}\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },100000);\n    },[]);  \n\n    const onDragEnd = (result: DropResult) => {\n        if (!result.destination) {\n            return;\n        }\n        console.log(result);\n        if(result.source.droppableId == \"coursecontainer\" && result.destination?.droppableId.includes(\"semester-table\")){\n            // dragging course from course container to semester table\n            console.log(\"tripped course -> semester\");\n            const id = result.destination.droppableId;\n            const num = parseInt(id.substring(id.lastIndexOf(\"-\")+1));\n            let ind = 0;\n            for(let i = 0; i < semesterCourses.length; i++){\n\n                const semester = semesterCourses[i];\n                console.log(`semester = ${Object.values(semester)}`);\n                if(semester.semesternum == num){\n                    ind = i;\n                    break;\n                }\n\n            }\n            const tmpSemesterCourses = semesterCourses;\n            const tmpSemester = tmpSemesterCourses.splice(ind,1)[0];\n            const theCourse = courses.splice(result.source.index,1)[0];\n\n            console.log(`tmpSemesterCourses = ${tmpSemesterCourses}`);\n            console.log(`tmpSemester = ${tmpSemester}`);\n            console.log(`theCourse = ${theCourse}`);\n\n            tmpSemester.courses.push(theCourse);\n            tmpSemester.courseSetter(tmpSemester.courses);\n            tmpSemesterCourses.splice(ind,0,tmpSemester);\n            setSemesterCourses(tmpSemesterCourses);\n\n        } else if(result.source.droppableId == \"coursecontainer\" && result.destination?.droppableId == \"coursecontainer\"){\n\n            // dropping within same container\n            if(result.source.index == result.destination?.index){\n                // do nothing\n            } else {\n                const tmpCourses = courses;\n                const theCourse = courses.splice(result.source.index,1)[0];\n                tmpCourses.splice(result.destination?.index,0,theCourse);\n                setCourses(tmpCourses);\n            }\n\n        } else if(result.source.droppableId.includes(\"semester-table\") && result.destination?.droppableId.includes(\"semester-table\")){\n            // dropping within same semester-table\n            console.log(\"dropping within semester table\");\n            // issue occurs here when we move semesters around in the same table and then try introducing another course, method fails\n            if(result.source.droppableId == result.destination.droppableId){ // dropping in exact same container\n                console.log(\"Dropping in same exact container\");\n                console.log(`Semester courses = ${Object.values(semesterCourses)}`);\n                // same destination\n                if(result.source.index == result.destination.index){\n                    // do nothing, moving course in same spot\n                } else{\n\n                    const id1 = result.source.droppableId;\n                    let ind1 = -1;\n                    const num1 = parseInt(id1.substring(id1.lastIndexOf(\"-\")+1));\n                    for(let i = 0; i < semesterCourses.length; i++){\n\n                        if(semesterCourses[i] !== undefined && semesterCourses[i].semesternum == num1){\n                            ind1 = i;\n                            break;\n                        }\n                        \n                    }\n                    // found where semester is located\n                    const tmpSemesterCourses = [...semesterCourses];\n                    const theSemester = tmpSemesterCourses.splice(ind1,1)[0];\n\n                    const theSemesterCourses = theSemester.courses;\n                    const theCourse = theSemesterCourses.splice(result.source.index,1)[0];\n\n                    theSemesterCourses.splice(result.destination.index,0,theCourse);\n                    theSemester.courseSetter(theSemesterCourses);\n                    theSemester.courses = theSemesterCourses;\n                    tmpSemesterCourses.splice(ind1,0,theSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n\n                }\n            }\n            if(result.source.index == result.destination.index){\n                // do nothing\n            } else{\n                // edit order\n                const tmpSemesterCourses = semesterCourses;\n                // take course out of old spot\n                const theCourse = tmpSemesterCourses.splice(result.source.index,1)[0];\n                // place course in new spot\n                tmpSemesterCourses.splice(result.destination?.index,0,theCourse);\n                setSemesterCourses(tmpSemesterCourses);\n            }\n        }\n    };\n\n    return (\n        <>\n            <CourseContext.Provider value={courses}>\n                <DragDropContext\n                    onDragEnd={onDragEnd}\n                >\n                    <Container>\n                        <br />\n                        <Row>\n                            <Col>\n                                {<WelcomeToast display={display}/>}\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Badge bg=\"primary\"><h1>Course Scheduler</h1></Badge>\n                            </Col>\n                        </Row>\n                        <br />\n                        <Row>\n                            <Col>\n                                <Row>\n                                    <Col>\n                                        <DropdownMenu setConcentration={setConcentration}></DropdownMenu>\n                                    </Col>\n                                </Row>\n                                <br />\n                                <Row>\n                                    <Col>\n                                        <AddSemesterButton setSemesters={setSemesters} semesters={semesters} />\n                                    </Col>\n                                </Row>\n                            </Col>\n                        </Row>\n                        <br />\n                        <br />\n                        <Row>\n                            <Col>\n                                <DisplayCourseList concentration={concentration}></DisplayCourseList>\n                            </Col>\n                            <Col>\n                                <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                            </Col>\n                        </Row>\n                    </Container>\n                </DragDropContext>\n            </CourseContext.Provider>\n        </>\n    );\n};\n","import React from \"react\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}