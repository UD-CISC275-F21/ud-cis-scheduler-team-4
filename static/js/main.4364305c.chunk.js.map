{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/util/EditCourse.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","EditCourse","useState","course","nameText","setNameText","onHide","setDisplay","closeButton","Badge","bg","Row","Col","placeholder","type","value","onChange","e","target","style","textAlign","Button","variant","onClick","tmpSemesters","semesterCourses","tmpSemester","ind1","i","length","semesternum","semesterNumber","splice","courses","setSemesterCourses","getSemesterStr","semesterNum","Semester","setCourses","func1","console","log","forEach","Object","values","useEffect","find","semesters","push","courseSetter","Accordion","defaultActiveKey","eventKey","xs","tmpSemesterCourses","theSemester","droppableId","Table","droppableProps","map","section","lg","tmpCourses","SemesterTable","Array","fill","elem","semestersCourses","DropdownMenu","clickFunc","setConcentration","CONCENTRATIONS","Dropdown","Toggle","id","Menu","as","CourseContainer","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","SecurityConc","DataScienceConc","HPCConc","NetworksConc","TheoryConc","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","setSemesters","MainPage","concentrationContainers","setTimeout","entries","onDragEnd","result","destination","includes","source","parseInt","substring","lastIndexOf","theCourse","semesterNum1Id","semesterNum2Id","semesterNum1","semesterNum2","oneFound","twoFound","semester1","semester2","ind2","semester1Courses","sourceCourse","semester2Courses","tmpConcentrationContainers","tmpContainer","tmpConcCourses","tmpConcCourse","semesterDropId","tmpSemesterCourses2","sourceId","tmpConcContainers","tmpConcContainer","tmpConcContainerCourses","tmpConcContainer1","tmpConcContainer2","tmpConc1Courses","tmpConc2Courses","tmpConc1Course","Container","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4364305c.chunk.js","sourcesContent":["import { Modal } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import React, { useState } from \"react\";\nimport { Modal, Button, Badge, Row, Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\nexport const EditCourse = (props: {display: boolean, setDisplay: React.Dispatch<React.SetStateAction<boolean>>, course: CourseType, setCourses: React.Dispatch<React.SetStateAction<CourseType[]>>, semesterNumber: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    return (\n        <Modal show={true} onHide={() => props.setDisplay(false)}>\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Badge bg=\"primary\">Edit Course Details</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col>\n                        Enter name here:\n                    </Col>\n                    <Col>\n                        <input placeholder=\"Enter Course Name\"type=\"textbox\" value={nameText} \n                            onChange={(e) =>{\n                                setNameText(e.target.value);\n                            }\n                            }/>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{ display: \"block\", textAlign: \"center\" }}>\n                <Button variant=\"outline-primary\" onClick={() => {\n                    props.setDisplay(!props.display);\n                    const tmpSemesters: SemesterType[] = props.semesterCourses;\n                    let tmpSemester: SemesterType = tmpSemesters[0];\n                    let ind1 = -1;\n                    for(let i = 0; i < tmpSemesters.length; i++){\n                        if(tmpSemesters[i].semesternum === props.semesterNumber){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind1 = i;\n                            break;\n                        }\n                    }\n                    for(let i=0;i<tmpSemester.courses.length;i++){\n                        if(tmpSemester.courses[i].name===props.course.name){\n                            //found course\n                            tmpSemester.courses[i].name = nameText;\n                        }\n                    }\n                    tmpSemesters.splice(ind1,0,tmpSemester);\n                    props.setSemesterCourses([...tmpSemesters]);\n                }}>Submit Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, ListGroup, Accordion, Col, Button, Row } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: { ind: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n\n    const func1 = (courses: CourseType[]) => {\n\n        console.log(\"---calling func1 with---\");\n        courses.forEach(e => console.log(Object.values(e)));\n        setCourses(courses);\n\n    };\n\n    useEffect(() => {\n\n        console.log(\"rendering semester\");\n        if(!props.semesterCourses.find(e => e.semesternum == props.ind+1)){\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({semesternum: props.ind+1, courses: courses, courseSetter: func1});\n            props.setSemesterCourses(semesters);\n            //console.log(semesters);\n        }\n\n    }, []);\n\n    useEffect(() => {\n\n        console.log(\"setter changed!\");\n\n    },[setCourses]);\n\n    useEffect(() => {\n\n        console.log(\"----courses are now----\");\n        courses.forEach(e => console.log(Object.values(e)));\n\n    }, [courses]);\n\n    return(\n        <Accordion key={`accordion ${props.ind}`} defaultActiveKey=\"0\">\n            <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>\n                    <Col xs={2}>\n                        {`Semester ${props.ind+1}`}\n                    </Col>\n                    <Col>\n                        <Button variant=\"danger\" onClick={() => {\n                        \n                            const tmpSemesterCourses = [...props.semesterCourses];\n\n                            let theSemester = tmpSemesterCourses[0];\n\n                            let ind1 = 0;\n\n                            for(let i = 0; i < tmpSemesterCourses.length; i++){\n\n                                if(tmpSemesterCourses[i].semesternum === props.ind+1){\n                                    // found semester\n                                    ind1 = i;\n                                    theSemester = tmpSemesterCourses.splice(i,1)[0];\n                                    break;\n                                }\n\n                            }\n\n                            theSemester.courses = [];\n                            theSemester.courseSetter([]);\n\n                            tmpSemesterCourses.splice(ind1,0,theSemester);\n\n                            props.setSemesterCourses([...tmpSemesterCourses]);\n\n\n                        }}></Button>\n                    </Col>\n                </Accordion.Header>\n                <Accordion.Body>\n                    <Col key={`semester-table-col-${props.ind}`}>\n                        <Droppable droppableId={`semester-table-${props.ind+1}`}>\n                            {(prov: DroppableProvided) =>\n                                <Table key={`semester-table-table-${props.ind}`}>\n                                    <thead>\n                                        <tr>\n                                            <td>{`${getSemesterStr(props.ind+1)}`}</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                                        <tr>\n                                            <td>\n                                                <ListGroup>\n                                                    {\n                                                        courses.map((e, i) =>\n                                                            <>\n                                                                <ListGroup.Item key={i}>\n                                                                    <Row>\n                                                                        <Col>\n                                                                            <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                                        </Col>\n                                                                        <Col xs lg=\"1\">\n                                                                            <Button variant=\"danger\" onClick={() => {\n                                                                                const tmpCourses: CourseType[] = [...courses];\n                                                                                for(let i = 0; i < tmpCourses.length; i++){\n                                                                                    const theCourse: CourseType = tmpCourses[i];\n                                                                                    if(theCourse.name === e.name){\n                                                                                        // found course\n                                                                                        tmpCourses.splice(i,1);\n                                                                                    }\n                                                                                }\n                                                                                setCourses([...tmpCourses]);\n                                                                                const tmpSemesters: SemesterType[] = props.semesterCourses;\n                                                                                let tmpSemester: SemesterType = tmpSemesters[0];\n                                                                                for(let i = 0; i < tmpSemesters.length; i++){\n                                                                                    tmpSemester = tmpSemesters[i];\n                                                                                    if(tmpSemester.semesternum === props.ind+1){\n                                                                                        // found semester\n                                                                                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                                                                                        tmpSemester.courses = [...tmpCourses];\n                                                                                        tmpSemester.courseSetter([...tmpCourses]);\n                                                                                        tmpSemesters.splice(i,0,tmpSemester);\n                                                                                        props.setSemesterCourses([...tmpSemesters]);\n                                                                                        return e.name;\n                                                                                    }\n                                                                                }\n\n                                                                                return e.name;\n                                                                            }}></Button>\n                                                                            <Button variant=\"warning\" onClick={()=>{\n                                                                                setDisplay(!display);\n                                                                            }}>\n                                                                            </Button>\n                                                                            {display && <EditCourse display={display} setDisplay={setDisplay} course={e} setCourses={setCourses} semesterNumber={props.ind+1} semesterCourses={props.semesterCourses} setSemesterCourses={props.setSemesterCourses} ></EditCourse>}\n                                                                        </Col>\n                                                                    </Row>\n                                                                </ListGroup.Item>\n                                                            </>\n                                                        )\n                                                    }\n                                                </ListGroup>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            }\n                        </Droppable>\n                    </Col>\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    );\n\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number, semestersCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n\n    return(\n        <>\n            {\n                new Array(props.semesters).fill(0).map((elem, ind) =>\n                    <Semester ind={ind} key={`semester-table-key-${ind}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />\n                )\n            }\n        </>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu(props: { setConcentration: React.Dispatch<React.SetStateAction<Concentration>>, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element{\n    \n    const clickFunc = (ind: number) => {\n\n        const tmpSemesterCourses = [...props.semesterCourses];\n\n        for(let i = 0; i < tmpSemesterCourses.length; i++){\n\n            const tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n            tmpSemester.courses = [];\n            tmpSemester.courseSetter([]);\n            tmpSemesterCourses.splice(i,0,tmpSemester);\n\n        }\n        props.setSemesterCourses([...tmpSemesterCourses]);\n\n        props.setConcentration(CONCENTRATIONS[ind]);\n\n    };\n\n    return <div>\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Concentrations:\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                \n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(0);\n                }}>AI and Robotics</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(1);\n                }}>Bioinformatics</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(2);\n                }}>Cybersecurity</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(3);\n                }}>Data Science</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(4);\n                }}>High-Performance Computing</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(5);\n                }}>Networks and Systems</Dropdown.Item>\n\n\n                <Dropdown.Item as=\"button\" onClick={()=>{\n                    clickFunc(6);\n                }}>Theory</Dropdown.Item>\n\n            </Dropdown.Menu>\n        </Dropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[], name: string}): JSX.Element => {\n\n    return(\n        <>\n            <Droppable droppableId={props.name}>\n                {(prov) =>\n                    <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                        {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                        {prov.placeholder}\n                    </ListGroup>\n                }\n            </Droppable>\n        </>\n    );\n};","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport function AIConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>} ): JSX.Element{\n    \n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone-1\",\n                    \"courses\": capstone1Courses,\n                    \"setCourses\": setCapstone1Courses\n\n                },\n                {\n                    \"name\": \"general-1\",\n                    \"courses\": general1Courses,\n                    \"setCourses\": setGeneral1Courses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"capstone-2\",\n                    \"courses\": capstone2Courses,\n                    \"setCourses\": setCapstone2Courses\n                },\n                {\n                    \"name\": \"general-2\",\n                    \"courses\": general2Courses,\n                    \"setCourses\": setGeneral2Courses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                }\n\n            ]\n\n        );\n    },[]);\n\n    return<div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name={\"core\"}  />\n        <CourseContainer courses={capstone1Courses} name={\"capstone-1\"} />\n        <CourseContainer courses={general1Courses} name={\"general-1\"} />\n        <p>Choose One Lab Sequence: (Needs fixing)</p>\n        \n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name={\"writing\"} />\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={capstone2Courses} name={\"capstone-2\"} />\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={general2Courses} name={\"general-2\"} />\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={electiveCourses} name={\"elective\"} />\n    </div>;\n}\n\nexport function BioConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n\n    return(\n        <div>\n            <h2>Bioinformatics</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Chem Sequence:</p>\n            <p>Choose One Organic Chem Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Data Analysis Course:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function SecurityConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n   \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Cybersecurity</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stats\"/>\n            <p>Select Two Advanced Reqs:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function DataScienceConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].writing));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n\n            ]\n\n        );\n    }, []);\n    \n    return<div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <p>Select One Advanced Data Science:</p>\n        <p>Select One Advanced Math:</p>\n        <p>Select One of the Following:</p>\n    </div>;\n}\n\nexport function HPCConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    \n    useEffect(() => {\n\n        props.setConcentrationContainers(\n\n            [\n\n                {\n\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n\n                }\n\n            ]\n\n        );\n    \n    },[]);\n\n\n    return<div>\n        <p>Come back and figure this one out later</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n    </div>;\n}\n\nexport function NetworksConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    \n    return(\n        <div>\n            <h2>Networks and Systems</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Security Requirement:</p>\n            <p>Select Two Systems Requirements:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n\nexport function TheoryConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Theory</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One of the Following Tracks:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport function DisplayCourseList(props: {concentration: Concentration, setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>> }): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n\n        const allCourses = COURSES as CourseType[];\n\n        const tmparr: CourseType[] = stringCourses.map(e => [...allCourses.filter(i => i.name == e)]).flat(2);\n\n        return tmparr;\n\n    }\n\n    if (props.concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></AIConc>;\n    } else if (props.concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></BioConc>;\n    } else if (props.concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers} ></SecurityConc>;\n    } else if (props.concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></DataScienceConc>;\n    } else if (props.concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></HPCConc>;\n    } else if (props.concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></NetworksConc>;\n    } else if (props.concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: { setSemesters: React.Dispatch<React.SetStateAction<number>>, semesters: number}): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }}>Add Semester</Button>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../interfaces/course\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]); // is initialized to the first concentration container, contains all of the parts of the concentration, outlined in the comment below\n    /*\n\n    {\n\n        \"name\": \"core\" <--- what part of the concentration it is\n        courses: [] <--- the courses in the part\n        setCourses: [] <--- the way to update the courses in the part when we drag into the semester\n\n    }\n\n\n    */\n\n    // maybe make an object like indexes are the semesters so {1: [\"CISC101\",\"CISC106\"]}\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },1);\n    },[]);  \n\n    useEffect(() => {\n\n        console.log(\"edited semesterCourses from MainPage.tsx\");\n        semesterCourses.forEach(e => console.log(Object.entries(e)));\n\n    },[semesterCourses]);\n\n    const onDragEnd = (result: DropResult) => {\n        console.log(semesterCourses);\n        console.log(result);\n        console.log(concentrationContainers);\n\n        if (!result.destination) {\n            return;\n        }if(result.destination.droppableId.includes(\"semester-table\")){\n            \n            if(!result.source.droppableId.includes(\"semester-table\")){\n\n                console.log(\"from conc container\");\n\n                const tmpConcentrationContainers = [...concentrationContainers];\n\n                let tmpContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n                let ind1 = -1;\n                for(let i = 0; i < concentrationContainers.length; i++){ // finding container , ex: core, capstone\n\n                    if(concentrationContainers[i].name === result.source.droppableId){\n                        tmpContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses = tmpContainer.courses;\n                const tmpConcCourse = tmpConcCourses.splice(result.source.index,1)[0];\n                tmpContainer.setCourses(tmpConcCourses);\n                tmpConcentrationContainers.splice(ind1,0,tmpContainer)[0];\n                setConcentrationContainers(tmpConcentrationContainers);\n                \n                // move spliced course to semester table\n                // get semester number from id\n                const tmpSemesterCourses = [...semesterCourses];\n                const semesterDropId = result.destination.droppableId;\n                const semesterNumber = parseInt(semesterDropId.substring(semesterDropId.lastIndexOf(\"-\")+1));\n                let tmpSemester: SemesterType = [...tmpSemesterCourses][0];\n                let ind2 = -1;\n                for(let i = 0; i < semesterCourses.length; i++){\n\n                    if(semesterCourses[i].semesternum == semesterNumber){\n                        tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n                \n                const tmpSemesterCourses2 = [...tmpSemester.courses]; \n                if(tmpSemesterCourses2.length === 0){\n                    tmpSemesterCourses2.push(tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n                } else{\n\n                    tmpSemesterCourses2.splice(result.destination.index,0,tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n\n                }\n            } else if(result.source.droppableId === result.destination.droppableId){\n\n                // dropping in same table\n                console.log(\"dropping in same table\");\n\n                if(result.source.droppableId.includes(\"semester-table\")){\n                    \n                    console.log(\"within same semester table\");\n\n                    const semesterNum = parseInt(result.source.droppableId.substring(result.source.droppableId.lastIndexOf(\"-\")+1));\n\n                    const tmpSemesters: SemesterType[] = [...semesterCourses];\n                    \n                    let tmpSemester: SemesterType = tmpSemesters[0];\n\n                    let ind = 0;\n\n                    for(let i = 0; i < tmpSemesters.length; i++){\n\n                        if(tmpSemesters[i].semesternum == semesterNum){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind = i;\n                            break;\n                        }\n\n                    }\n\n                    console.log(Object.entries(tmpSemester));\n\n                    const courses: CourseType[] = [...tmpSemester.courses];\n                    console.log(\"----before any splicing----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    const theCourse: CourseType = courses.splice(result.source.index,1)[0]; // gets 108\n                    console.log(`---spliced course--- : ${Object.values(theCourse)}`);\n                    console.log(\"----before----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    courses.splice(result.destination.index,0,theCourse);\n                    console.log(\"----after----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemester.courseSetter([...courses]);\n                    tmpSemester.courses = [...courses];\n                    console.log(\"----after setting----\");\n                    tmpSemester.courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemesters.splice(ind,0,tmpSemester);\n                    console.log(\"----before setting semesters----\");\n                    setSemesterCourses(tmpSemesters);\n\n                }\n\n\n\n            } else if(result.source.droppableId.includes(\"semester-table\") && result.destination.droppableId.includes(\"semester-table\")){\n\n                // dropping from one semester table to the next\n\n                console.log(\"semestertable --> semestertable\");\n\n                const semesterNum1Id = result.source.droppableId;\n                const semesterNum2Id = result.destination.droppableId;\n\n                //console.log(`semesterNum1Id = ${semesterNum1Id}`);\n                //console.log(`semesterNum2Id = ${semesterNum2Id}`);\n\n                const semesterNum1 = parseInt(semesterNum1Id.substring(semesterNum1Id.lastIndexOf(\"-\")+1));\n\n                const semesterNum2 = parseInt(semesterNum2Id.substring(semesterNum2Id.lastIndexOf(\"-\")+1));\n\n                // got the numbers of semester1 and semester2\n\n                const tmpSemesters = [...semesterCourses];\n\n                let oneFound = false;\n                let twoFound = false;\n                let semester1 = tmpSemesters[0];\n                let semester2 = tmpSemesters[0];\n                //console.log(`semester1# = ${semesterNum1}`);\n                //console.log(`semester2# = ${semesterNum2}`);\n\n                let i = 0;\n\n                let ind1 = 0;\n                let ind2 = 0;\n\n                for(i = 0; !oneFound || !twoFound ;){\n\n                    const theSemester = tmpSemesters[i];\n                    if(theSemester){\n                        //console.log(`the semester = ${Object.entries(theSemester)}, onefound = ${oneFound} and twofound = ${twoFound}, semesterstatus = ${theSemester === null || theSemester == undefined}`);\n                    } else{\n                        //console.log(\"semester is null\");\n                    }\n\n\n                    if(oneFound && twoFound){\n                        break;\n                    } else if(!oneFound && theSemester.semesternum == semesterNum1){\n                        //console.log(\"splicing first semester\");\n                        oneFound = true;\n                        semester1 = tmpSemesters.splice(i,1)[0];\n                        ind1 = i;\n                        i = 0;\n                        continue;\n                    } else if(!twoFound && theSemester.semesternum == semesterNum2){\n                        //console.log(\"splicing second semester\");\n                        twoFound = true;\n                        semester2 = tmpSemesters.splice(i,1)[0];\n                        ind2 = i;\n                        i = 0;\n                        continue;\n                    } else{\n                        i++;\n                    }\n                    //console.log(\"else\");\n                    //console.log(Object.values(tmpSemesters));\n\n                }\n\n                // got both semesters\n\n                // splice from source\n\n                const semester1Courses: CourseType[] = [...semester1.courses];\n                const sourceCourse = semester1Courses.splice(result.source.index,1)[0];\n                semester1.courseSetter(semester1Courses);\n                semester1.courses = [...semester1Courses];\n\n                const semester2Courses: CourseType[] = [...semester2.courses];\n                semester2Courses.splice(result.destination.index,0,sourceCourse);\n                semester2.courses = [...semester2Courses];\n                semester2.courseSetter([...semester2Courses]);\n\n                tmpSemesters.splice(ind1,0,semester1);\n                tmpSemesters.splice(ind2,0,semester2);\n                setSemesterCourses(tmpSemesters);\n\n            }\n        } else{\n\n            if ( result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\") ) {\n                \n                const tmpSemesters: SemesterType[] = [...semesterCourses];\n\n                const sourceId: string = result.source.droppableId;\n                const semesterNum: number = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\")));\n                let tmpSemester: SemesterType = tmpSemesters[0];\n                let ind = -1;\n\n                for(let i = 0; i < tmpSemesters.length; i++){\n\n                    if(tmpSemesters[i].semesternum === semesterNum){\n                        // found semester\n                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                        ind = i;\n                        break;\n                    }\n\n                }\n\n                const tmpSemesterCourses: CourseType[] = [...tmpSemester.courses];\n                const theCourse: CourseType = tmpSemesterCourses.splice(result.source.index,1)[0];\n\n                tmpSemester.courses = [...tmpSemesterCourses];\n                tmpSemester.courseSetter([...tmpSemesterCourses]);\n\n                tmpSemesters.splice(ind,0,tmpSemester);\n\n                setSemesterCourses(tmpSemesters);\n\n                // semester updated\n\n\n                const tmpConcContainers = [...concentrationContainers];\n\n                let tmpConcContainer: ConcentrationContainerType = tmpConcContainers[0];\n\n                let ind2 = -1;\n\n                for(let i = 0; i < tmpConcContainers.length; i++){\n\n                    if(tmpConcContainers[i].name === result.destination.droppableId){\n                        // found concentration container\n                        tmpConcContainer = tmpConcContainers.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcContainerCourses = [...tmpConcContainer.courses];\n\n                tmpConcContainerCourses.splice(result.destination.index,0,theCourse);\n\n                tmpConcContainer.courses = [...tmpConcContainerCourses];\n                \n                tmpConcContainer.setCourses([...tmpConcContainerCourses]);\n\n                // found concentration container\n\n                tmpConcContainers.splice(ind2,0,tmpConcContainer);\n\n                setConcentrationContainers(tmpConcContainers);\n\n\n\n\n            } else if(result.source.droppableId !== result.destination.droppableId && !result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\")){\n                // dropping from core --> language for instance\n                const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n                let tmpConcContainer1: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let tmpConcContainer2: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let ind1 = -1;\n\n                let ind2 = -1;\n\n                for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                    if(ind1 !== -1 && ind2 !== -1){\n                        break;\n                    } else if(tmpConcentrationContainers[i].name == result.source.droppableId){\n                        tmpConcContainer1 = tmpConcentrationContainers[i];\n                        ind1 = i;\n                        continue;\n                    } else if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                        tmpConcContainer2 = tmpConcentrationContainers[i];\n                        ind2 = i;\n                        continue;\n                    }\n\n                }\n\n                const tmpConc1Courses: CourseType[] = [...tmpConcContainer1.courses];\n\n                const tmpConc2Courses: CourseType[] = [...tmpConcContainer2.courses];\n\n                const tmpConc1Course: CourseType = tmpConc1Courses.splice(result.source.index,1)[0];\n\n                tmpConcContainer1.courses = [...tmpConc1Courses];\n\n                tmpConcContainer1.setCourses([...tmpConc1Courses]);\n\n                tmpConc2Courses.splice(result.destination.index,0,tmpConc1Course);\n\n                tmpConcContainer2.courses = [...tmpConc2Courses];\n\n                tmpConcContainer2.setCourses([...tmpConc2Courses]);\n\n                tmpConcentrationContainers.splice(ind1,0,tmpConcContainer1);\n\n                tmpConcentrationContainers.splice(ind2,0,tmpConcContainer2);\n\n                setConcentrationContainers([...tmpConcentrationContainers]);\n\n            } else {\n\n                console.log(\"container --> container\");\n\n                const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n                let tmpConcContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let ind1 = -1;\n                \n                for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                    if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                        // found container\n                        tmpConcContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses: CourseType[] = [...tmpConcContainer.courses];\n\n                const tmpConcCourse: CourseType = tmpConcCourses.splice(result.source.index,1)[0];\n\n                // spliced course, now place course\n\n                tmpConcCourses.splice(result.destination.index,0,tmpConcCourse);\n\n                tmpConcContainer.courses = tmpConcCourses;\n\n                tmpConcContainer.setCourses([...tmpConcCourses]);\n\n                tmpConcentrationContainers.splice(ind1,0,tmpConcContainer);\n\n                setConcentrationContainers(tmpConcentrationContainers);\n\n            }\n\n        }\n    };\n\n    return (\n        <>\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            >\n                <Container>\n                    <br />\n                    <Row>\n                        <Col>\n                            {<WelcomeToast display={display}/>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Badge bg=\"primary\"><h1>Course Scheduler</h1></Badge>\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <DropdownMenu setConcentration={setConcentration} semesterCourses={semesterCourses} setSemesterCourses={setSemesterCourses}></DropdownMenu>\n                                </Col>\n                            </Row>\n                            <br />\n                            <Row>\n                                <Col>\n                                    <AddSemesterButton setSemesters={setSemesters} semesters={semesters} />\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            <DisplayCourseList concentration={concentration} setConcentrationContainers={setConcentrationContainers} ></DisplayCourseList>\n                        </Col>\n                        <Col>\n                            <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </DragDropContext>\n        </>\n    );\n};\n","import React from \"react\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}