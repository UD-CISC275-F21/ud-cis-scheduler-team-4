{"version":3,"sources":["components/util/DispatchLogic/DispatchContext.tsx","components/util/DispatchLogic/UseDispatchContext.tsx","components/util/DispatchLogic/StateContext.tsx","components/util/DispatchLogic/UseStateContext.tsx","components/util/Notifications.tsx","components/util/DropdownMenu.tsx","components/courses/CourseInfo.tsx","components/courses/Course.tsx","components/courses/CourseContainer.tsx","components/courses/DisplayCourseListHelperFunctions/StringsToCourses.tsx","components/courses/concentrations/AIConc.tsx","components/courses/concentrations/BioConc.tsx","components/courses/concentrations/DataScienceConc.tsx","components/courses/concentrations/HPCConc.tsx","components/courses/concentrations/NetworksConc.tsx","components/courses/concentrations/SecurityConc.tsx","components/courses/concentrations/TheoryConc.tsx","components/courses/DisplayCourseList.tsx","components/courses/DisplayCourseListHelperFunctions/DisplayCourseListMap.tsx","components/semesters/AddSemesterButton.tsx","components/semesters/DeleteSemesterButton.tsx","components/util/DNDLogicV2/prereqchecker.tsx","components/util/DNDLogicV2/DropLogicExecutor.tsx","components/util/DropLogic.tsx","components/util/DNDLogicV2/revprereqchecker.tsx","components/util/ExportPlan.tsx","components/util/howto/howtodropdown/howtodropdown.tsx","components/util/howto/howtosteps/howtonavigation.tsx","components/util/howto/howtosteps/wholeappinfo.tsx","components/util/howto/howtosteps/howtoconcentrationcontainer.tsx","components/util/howto/howtosteps/howtonavbar.tsx","components/util/howto/howtosteps/howtosemestertable.tsx","components/util/howto/howtodropdown/howtodropdownlogic.tsx","components/util/howto/howtodisplay.tsx","components/util/Footer.tsx","assets/data/statedata/InitialState.tsx","components/courses/DisplayCourseListHelperFunctions/CoursesToStrings.tsx","components/util/DispatchLogic/SchedulerReducerFunction.tsx","components/util/EditCourse.tsx","components/courses/EditCoursePanel.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DispatchContext","React","createContext","undefined","UseDispatchContext","context","useContext","Error","StateContext","UseStateContext","WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","PreReqSameSemesterToast","state","dispatch","useEffect","setTimeout","type","payload","toastMessage","toastDisplay","Toast","bg","onClose","className","errMsg","DropdownMenu","clickFunc","concentrationNumber","concentration","CONCENTRATIONS","NavDropdown","id","title","Item","as","onClick","CourseInfo","courseName","name","split","courseTitle","onHide","setDisplay","closeButton","Badge","credits","description","Course","useState","draggableId","index","ind","prov","ListGroup","ref","innerRef","draggableProps","dragHandleProps","fill","height","viewBox","width","xmlns","d","CourseContainer","droppableId","droppableProps","courses","map","eachcourse","length","placeholder","StringsToCourses","stringCourses","allCourses","COURSES","elem","filter","i","flat","AIConc","concentrationContainers","saveData","core","capstone","conc","general","writing","stats","systems","elective","lab","Accordion","defaultActiveKey","eventKey","BioConc","findIndex","eachSaveData","data","ochem","console","log","DataScienceConc","sourceContainerIndex","HPCConc","cybersecurity","NetworksConc","SecurityConc","TheoryConc","track","DisplayCourseList","DisplayCourseListMap","AddSemesterButton","Button","semesters","variant","DeleteSemesterButton","PreReqChecker","placingIndex","courseBeingPlaced","semesterCourses","slice","join","coursePreReqs","prereqs","StringBuffer","eachPreReq","RegExp","test","push","includes","replace","DropLogicExecutor","dispatchType","destinationContainerIndex","sourceIndex","droppingIndex","destIndex","destContainerIndex","onDragEndLogic","result","destination","sourceId","source","destinationId","sourceIdSemester","destIdSemester","dropIndex","semesterNum1","parseInt","substring","lastIndexOf","concentrationNumber1","eachConcentrationContainer","semester1Num","semester2Num","ind1","semesterNum","ind2","preReqCheckerResult","ErrorBuffer","eachCourse","RevPreReqChecker","eachSemester","concentrationContainerIndex","eachContainer","semesterCoursesIndex","concentrationNumberDest","concentrationNumberSource","ExportPlan","toString","csvContent","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","HowToDropDown","Dropdown","Toggle","Menu","HowToNavigation","WholeAppInfo","Image","fluid","src","process","style","color","ConcentrationContainerInfo","NavBarInfo","flush","SemesterTableInfo","HandleHowToDisplay","HowToDisplay","setShow","currDisplay","setCurrDisplay","handleClose","Container","Row","textAlign","Col","href","rel","target","initialState","deleteTriggered","numberOfSemesters","currentSaveData","CoursesToStrings","reducerFunction","action","produce","draft","theConcentration","theSemester","theCourse","splice","theSourceSemester","theDestSemester","theSplicedCourse","theSourceConcentration","theDestinationConcentration","tmpSaveData","saveDataIndex","newSaveDataIndex","indexToUpdate","indexWhereSaveDataIs","newTextFields","theClass","EditCourse","course","nameText","setNameText","titleText","setTitleText","descText","setDescText","onChange","value","cols","rows","courseIndex","semesterNumber","EditCoursePanel","lg","xs","getSemesterStr","Semester","semesterCourse","setCourses","setCredits","tmpCourses","count","getCredits","Table","SemesterTable","MainPage","useReducer","dispatchValue","stateValue","Provider","onDragEnd","Navbar","expand","Brand","Collapse","Nav","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","err","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.418cd2b5.chunk.js","sourcesContent":["import React from \"react\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\n\nexport const DispatchContext = React.createContext<{dispatch: React.Dispatch<SchedulerAction>} | undefined>(undefined);","import { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\nimport { DispatchContext } from \"./DispatchContext\";\nimport React from \"react\";\n\nexport const UseDispatchContext = (): {dispatch: React.Dispatch<SchedulerAction>} => {\n    const context = React.useContext(DispatchContext);\n    if (context === undefined) {\n        throw new Error(\"DispatchContext must have a value\");\n    }\n    return context;\n};","import React from \"react\";\nimport { State } from \"../../../interfaces/State\";\n\nexport const StateContext = React.createContext<{state: State} | undefined>(undefined);","import { State } from \"../../../interfaces/State\";\nimport React from \"react\";\nimport { StateContext } from \"./StateContext\";\n\nexport const UseStateContext = (): {state: State} => {\n    const context = React.useContext(StateContext);\n    if (context === undefined) {\n        throw new Error(\"StateContext must have a value\");\n    }\n    return context;\n};","import { Modal, Toast } from \"react-bootstrap\";\nimport React, { useEffect } from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const WelcomeToast = (props: { display: boolean }): JSX.Element =>\n    <Modal show={props.display}>\n        <Modal.Header>\n            <Modal.Title>\n                Welcome to the Course App!\n            </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            Here you can drag and drop courses into your schedule,\n            and also concentrations are available to select from the dropdown as well!\n        </Modal.Body>\n        <Modal.Footer>\n            <small>Created by Kurt, Luke, and Cameron!</small>\n        </Modal.Footer>\n    </Modal>;\n\n\nexport const PreReqSameSemesterToast = (props: { errMsg: string; display: boolean }): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    useEffect(() => {\n        if (props.display) {\n            setTimeout(() => {\n                dispatch({type: \"displayToast\", payload: { ...state, toastMessage: \"\", toastDisplay: false }});\n            }, 4000);\n        }\n    },[props.display]);\n    return(\n        <Toast\n            bg=\"danger\"\n            onClose={() => {\n                dispatch({type: \"displayToast\", payload: { ...state, toastMessage: \"\", toastDisplay: false }});\n            }}\n            show={props.display}\n        >\n            <Toast.Header>\n                <strong className=\"me-auto\">Invalid Course Selected</strong>\n                <small>\n                    Close\n                </small>\n            </Toast.Header>\n            <Toast.Body>\n                {props.errMsg}\n            </Toast.Body>\n        </Toast>\n    );\n};\n","import { NavDropdown } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const DropdownMenu = (): JSX.Element => {\n\n    const { dispatch } = UseDispatchContext();\n    const { state } = UseStateContext();\n\n    const clickFunc = (concentrationNumber: number) => {\n        dispatch({type: \"updateConcentration\", payload: { ...state, concentration: CONCENTRATIONS[concentrationNumber]}});\n    };\n\n    return (\n        <div>\n            <NavDropdown id=\"basic-navbar-nav\" title=\"Concentrations\" >\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(0);\n                    }}\n                >AI and Robotics\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(1);\n                    }}\n                >\n                    Bioinformatics\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(2);\n                    }}\n                >\n                    Cybersecurity\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(3);\n                    }}\n                >\n                    Data Science\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(4);\n                    }}\n                >\n                    High-Performance Computing\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(5);\n                    }}\n                >\n                    Networks and Systems\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(6);\n                    }}\n                >\n                    Theory\n                </NavDropdown.Item>\n\n            </NavDropdown>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Badge, Modal } from \"react-bootstrap\";\n\nexport const CourseInfo = (\n    props:\n    {display: boolean;\n    setDisplay: React.Dispatch<React.SetStateAction<boolean>>;\n    name: string;\n    description: string;\n    credits: number;\n}): JSX.Element => {\n    const courseName = props.name.split(\"-\")[0];\n    const courseTitle = props.name.split(\"-\")[1];\n    return (\n        <Modal\n            onHide={() => {\n                props.setDisplay(false);\n            }}\n            show={props.display}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <h1>{`${courseName}`}</h1>\n                    <h5>{`${courseTitle}`}</h5>\n                    <Badge>Credits: {`${props.credits}`}</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {`${props.description}`}\n            </Modal.Body>\n        </Modal>\n    );\n};\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../../css/style.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React, { useState } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { CourseInfo } from \"./CourseInfo\";\n\n\nexport const Course = (props: { name: string; description: string; title: string; credits: number; ind: number }): JSX.Element => {\n    const [display, setDisplay] = useState<boolean>(false);\n    return (\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {prov =>\n                <ListGroup.Item data-testid=\"courseitem\" ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>\n                    {props.name}\n                    <button\n                        className=\"course-button\"\n                        onClick={() => {\n                            setDisplay(!display);\n                        }}\n                        type=\"button\"\n                    >\n                        <svg className=\"bi bi-three-dots-vertical\" fill=\"currentColor\" height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z\" />\n                        </svg>\n                    </button>\n                    {display &&\n                    <CourseInfo\n                        credits={props.credits}\n                        description={props.description}\n                        display={display}\n                        name={props.name}\n                        setDisplay={setDisplay}\n                    />\n                    }\n                </ListGroup.Item>\n            }\n        </Draggable>\n    );\n};\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[]; name: string }): JSX.Element =>\n    <Droppable droppableId={props.name}>\n        {prov =>\n            <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                {props.courses.map((eachcourse: CourseType, index: number) =>\n                    <Course\n                        credits={eachcourse.credits}\n                        description={eachcourse.description}\n                        ind={index}\n                        key={eachcourse.name}\n                        name={`${eachcourse.name}${eachcourse.title.length > 0 ? `-${eachcourse.title}` : \"\"}`}\n                        title={eachcourse.title}\n                    />,\n                )}\n                {prov.placeholder}\n            </ListGroup>\n        }\n    </Droppable>;\n","import COURSES from \"../../../json/courses.json\";\nimport { Course } from \"../../../interfaces/course\";\n\nexport const StringsToCourses = (stringCourses: string[]): Course[] => {\n    /** Takes a list of strings, and returns a list of courses by looking in courses.json for matching names.\n     *  Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n     */\n    const allCourses = COURSES as Course[];\n    const courseList: Course[] = stringCourses.map(elem => [...allCourses.filter(i => i.name === elem)]).flat(2);\n    return courseList;\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\n\n\nexport const AIConc = (): JSX.Element => {\n    \n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n\n    useEffect(() => {\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n            ...state,\n            concentrationContainers:\n            [ \n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[0].concentration.core)\n                },\n                {\n                    name: \"capstone-1\",\n                    courses: StringsToCourses(state.saveData[0].concentration.capstone)\n                },\n                {\n                    name: \"general-1\",\n                    courses: StringsToCourses(state.saveData[0].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[0].concentration.writing)\n                },\n                {\n                    name: \"capstone-2\",\n                    courses: StringsToCourses(state.saveData[0].concentration.conc.stats)\n                },\n                {\n                    name: \"general-2\",\n                    courses: StringsToCourses(state.saveData[0].concentration.conc.systems)\n                },\n                {\n                    name: \"elective\",\n                    courses: StringsToCourses(state.saveData[0].concentration.conc.elective)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[0].concentration.lab)\n                }\n            ]\n        }});\n        return() => {\n            dispatch({type: \"updateSaveDataAI\", payload: { ...state, }});\n        };\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 8 ?\n            <div>\n                <h2>Artificial Intelligence and Robotics</h2>\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>CISC Core and Concentration</Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone-1\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>Two-Course Lab Sequence</Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[7].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>Writing Course</Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"3\">\n                        <Accordion.Header>Statistics Course</Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"capstone-2\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"4\">\n                        <Accordion.Header>Systems Course</Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[5].courses} name=\"general-2\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"5\">\n                        <Accordion.Header>Electives(Select Four)</Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[6].courses} name=\"elective\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                </Accordion>\n            </div>\n            :\n            <div>\n            Concentration Unavailable\n            </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const BioConc = (): JSX.Element => {\n\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Bioinformatics\");\n\n    useEffect(() => {\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n            ...state,\n            concentrationContainers:\n            [\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"electives\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                },\n                {\n                    name: \"data\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.data)\n                },\n                {\n                    name: \"ochem-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.ochem)\n                }\n            ]\n        }});\n        return() => {\n            console.log(\"BIO CONC UNMOUNTING\");\n            dispatch({type: \"updateSaveDataBio\", payload: { ...state }});\n        };\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 9 ?\n            <div>\n                <h2>Bioinformatics</h2>\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>\n                            CISC Core and Concentration\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>\n                            Chem Sequence\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[5].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>\n                            One Organic Chem Sequence\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[8].courses} name=\"ochem-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n\n                    <Accordion.Item eventKey=\"3\">\n                        <Accordion.Header>\n                            Writing Course\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"4\">\n                        <Accordion.Header>\n                            One Statistics Course\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"stat\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"5\">\n\n                        <Accordion.Header>\n                            One Data Analysis Course\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n\n                            <CourseContainer courses={state.concentrationContainers[7].courses} name=\"data\" />\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"6\">\n\n                        <Accordion.Header>\n                            Two Electives\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n\n                            <CourseContainer courses={state.concentrationContainers[6].courses} name=\"electives\" />\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                </Accordion>\n\n            </div>\n            :\n            <div>\n                Concentration Unavailable\n            </div>\n        \n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const DataScienceConc = (): JSX.Element => {\n    \n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Data Science\");\n\n    useEffect(() => {\n        \n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"electives\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                },\n                {\n                    name: \"datascience\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.data)\n                },\n                {\n                    name: \"math\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                }\n            ]\n\n        }});\n        return() => {\n            console.log(\"DATA SCIENCE UNMOUNTING\");\n            dispatch({type: \"updateSaveDataScience\", payload: { ...state, sourceContainerIndex: index }});\n        };\n    },[]);\n\n    return (\n        <div>\n            <h2>Data Science</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                        <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                        <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[3].courses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[4].courses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Data Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[6].courses} name=\"datascience\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        One Advanced Math\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[7].courses} name=\"math\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        One Elective\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={state.concentrationContainers[5].courses} name=\"electives\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n\n            </Accordion>\n\n\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const HPCConc = (): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"High-Performance Computing\");\n    \n    useEffect(() => {\n\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"elective\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                },\n                {\n                    name: \"math\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.data)\n                },\n                {\n                    name: \"dataCourses\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.ochem)\n                },\n                {\n                    name: \"machineLearningCourses\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.cybersecurity)\n                },\n                {\n                    name: \"dataTrack\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.ochem)\n                }\n\n            ]\n\n        }});\n        return() => {\n            dispatch({type: \"saveHPC\", payload: { ...state, sourceContainerIndex: index }});\n        };\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 10 ?\n            <div>\n                <h2>High-Performance Computing</h2>\n\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>\n                            CISC Core and Concentration\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>\n                            Two Lab Courses\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>\n                            One Writing\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n\n                    <Accordion.Item eventKey=\"3\">\n\n                        <Accordion.Header>\n                            Choose one of the tracks\n                        </Accordion.Header>\n                        <Accordion.Body>\n\n                            <Accordion>\n\n                                <Accordion.Item eventKey=\"4\">\n\n                                    <Accordion.Header>\n                                        Applied Math\n                                    </Accordion.Header>\n                                    <Accordion.Body>\n\n                                        <CourseContainer courses={state.concentrationContainers[6].courses} name=\"elective\" />\n                                        <CourseContainer courses={state.concentrationContainers[7].courses} name=\"math\" />\n                                        <CourseContainer courses={state.concentrationContainers[5].courses} name=\"stat\" />\n\n                                    </Accordion.Body>\n\n                                </Accordion.Item>\n                                <Accordion.Item eventKey=\"5\">\n\n                                    <Accordion.Header>\n                                        Data Track\n                                    </Accordion.Header>\n                                    <Accordion.Body>\n                                        <CourseContainer courses={state.concentrationContainers[8].courses} name=\"dataCourses\" />\n                                        <CourseContainer courses={state.concentrationContainers[10].courses} name=\"dataTrack\" />\n                                    </Accordion.Body>\n\n                                </Accordion.Item>\n\n                            </Accordion>\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"6\">\n\n                        <Accordion.Header>\n                            One Machine Learning\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[9].courses} name=\"machineLearningCourses\" />\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                </Accordion>\n            </div>\n            :\n            <h2>\n                High-Performance Computing\n            </h2>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const NetworksConc = (): JSX.Element => {\n\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Networks and Systems\");\n    useEffect(() => {\n\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"security\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.cybersecurity)\n                },\n                {\n                    name: \"systems\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.systems)\n                },\n                {\n                    name: \"electives\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                }\n\n            ]\n\n        }});\n        return() => {\n            dispatch({type: \"saveNetworks\", payload: { ...state, sourceContainerIndex: index }});\n        };\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 9 ?\n            <div>\n                <h2>Networks and Systems</h2>\n\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>\n                            CISC Core and Concentration\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>\n                            Two Lab Courses\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[5].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>\n                            One Writing\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n\n                    <Accordion.Item eventKey=\"3\">\n                        <Accordion.Header>\n                            One Statistics Course\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"stat\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"4\">\n                        <Accordion.Header>\n                            One Security Math\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[6].courses} name=\"security\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"5\">\n\n                        <Accordion.Header>\n                            Two Systems Courses\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n\n                            <CourseContainer courses={state.concentrationContainers[7].courses} name=\"systems\" />\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"6\">\n\n                        <Accordion.Header>\n                            Two Electives\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[8].courses} name=\"electives\" />\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n\n                </Accordion>\n            </div>\n            :\n            <h2>\n                Networks And Systems\n            </h2>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\n\nexport const SecurityConc = (): JSX.Element => {\n    \n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Cybersecurity\");\n\n    useEffect(() => {\n\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"electives\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.elective)\n                },\n                {\n                    name: \"security\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.cybersecurity)\n                }\n            ]\n\n        }});\n        return() => {\n            dispatch({type: \"updateSaveSecurity\", payload: { ...state, sourceContainerIndex: index }});\n        };\n\n    },[]);\n\n    return (\n        state.concentrationContainers.length >= 8 ?\n            <div>\n                <h2>Cybersecurity</h2>\n                <Accordion defaultActiveKey=\"8\">\n\n                    <Accordion.Item eventKey=\"0\">\n                        <Accordion.Header>\n                            CISC Core and Concentration\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                            <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                            <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"1\">\n                        <Accordion.Header>\n                            Two Lab Courses\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[5].courses} name=\"lab-1\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"2\">\n                        <Accordion.Header>\n                            One Writing\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n\n                    <Accordion.Item eventKey=\"3\">\n                        <Accordion.Header>\n                            Statistics Course\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[4].courses} name=\"stat\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"4\">\n                        <Accordion.Header>\n                            Two Advanced Requirements\n                        </Accordion.Header>\n                        <Accordion.Body>\n                            <CourseContainer courses={state.concentrationContainers[7].courses} name=\"security\" />\n                        </Accordion.Body>\n                    </Accordion.Item>\n\n                    <Accordion.Item eventKey=\"5\">\n\n                        <Accordion.Header>\n                            Two Electives\n                        </Accordion.Header>\n\n                        <Accordion.Body>\n\n                            <CourseContainer courses={state.concentrationContainers[6].courses} name=\"electives\" />\n\n                        </Accordion.Body>\n\n                    </Accordion.Item>\n\n\n\n                </Accordion>\n            </div>\n            :\n            <div>Concentration Unavailable</div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport React, { useEffect } from \"react\";\nimport { UseStateContext } from \"../../util/DispatchLogic/UseStateContext\";\nimport { UseDispatchContext } from \"../../util/DispatchLogic/UseDispatchContext\";\nimport { StringsToCourses } from \"../DisplayCourseListHelperFunctions/StringsToCourses\";\n\nexport const TheoryConc = (): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    const index = state.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === \"Theory of Computation\");\n    \n    useEffect(() => {\n\n        dispatch({type: \"updateConcentrationContainers\", payload: {\n\n            ...state,\n            concentrationContainers: [\n\n                {\n                    name: \"core\",\n                    courses: StringsToCourses(state.saveData[index].concentration.core)\n                },\n                {\n                    name: \"capstone\",\n                    courses: StringsToCourses(state.saveData[index].concentration.capstone)\n                },\n                {\n                    name: \"general\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.general)\n                },\n                {\n                    name: \"writing\",\n                    courses: StringsToCourses(state.saveData[index].concentration.writing)\n                },\n                {\n                    name: \"stat\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.stats)\n                },\n                {\n                    name: \"lab-1\",\n                    courses: StringsToCourses(state.saveData[index].concentration.lab)\n                },\n                {\n                    name: \"discrete\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.track)\n                },\n                {\n                    name: \"continuous\",\n                    courses: StringsToCourses(state.saveData[index].concentration.conc.cybersecurity)\n                }\n\n            ]\n\n        }});\n        return() => {\n            dispatch({type: \"saveTheory\", payload: { ...state }});\n        };\n\n    },[]);\n\n    return (\n        <div>\n            <h2>Theory</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[0].courses} name=\"core\" />\n                        <CourseContainer courses={state.concentrationContainers[1].courses} name=\"capstone\" />\n                        <CourseContainer courses={state.concentrationContainers[2].courses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[5].courses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[3].courses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={state.concentrationContainers[4].courses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"4\">\n\n                    <Accordion.Header>\n                        Select One of the Four-Course Tracks\n                    </Accordion.Header>\n                    <Accordion.Body>\n\n                        <Accordion>\n\n                            <Accordion.Item eventKey=\"5\">\n\n                                <Accordion.Header>\n                                    Discrete\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={state.concentrationContainers[6].courses} name=\"discrete\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                            <Accordion.Item eventKey=\"6\">\n\n                                <Accordion.Header>\n                                    Continuous\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={state.concentrationContainers[7].courses} name=\"continuous\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                        </Accordion>\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n            </Accordion>\n\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { DisplayCourseListMap } from \"./DisplayCourseListHelperFunctions/DisplayCourseListMap\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const DisplayCourseList = ({concentration}: {concentration: Concentration}): JSX.Element => {\n    const { state } = UseStateContext();\n    const index = state.saveData.findIndex(eachSaveData => eachSaveData.concentration.name === state.concentration.name);\n    return  index !== -1 ?\n        DisplayCourseListMap(concentration)\n        :\n        <div>Cannot find Concentration Save Data</div>;\n};\n","import React from \"react\";\nimport { Concentration } from \"../../../interfaces/concentration\";\nimport { AIConc } from \"../concentrations/AIConc\";\nimport { BioConc } from \"../concentrations/BioConc\";\nimport { DataScienceConc } from \"../concentrations/DataScienceConc\";\nimport { HPCConc } from \"../concentrations/HPCConc\";\nimport { NetworksConc } from \"../concentrations/NetworksConc\";\nimport { SecurityConc } from \"../concentrations/SecurityConc\";\nimport { TheoryConc } from \"../concentrations/TheoryConc\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport { StringsToCourses } from \"./StringsToCourses\";\nimport { SavedProgress } from \"../../../interfaces/savedprogress\";\nimport { Course } from \"../../../interfaces/course\";\n\n\nexport const DisplayCourseListMap = (concentration: Concentration): JSX.Element => {\n\n    //console.log(\"concentration = \", concentration);\n    switch(concentration.name){\n\n    case CONCENTRATIONS[0].name: {\n        // we know its AIConc at this point\n        return <AIConc/>;\n    }\n    case CONCENTRATIONS[1].name: {\n        return <BioConc/>;\n    }\n    case CONCENTRATIONS[2].name: {\n        return <SecurityConc/>;\n    }\n    case CONCENTRATIONS[3].name: {\n        return <DataScienceConc/>;\n    }\n    case CONCENTRATIONS[4].name: {\n        return <HPCConc/>;\n    }\n    case CONCENTRATIONS[5].name: {\n        return <NetworksConc/>;\n    }\n    case CONCENTRATIONS[6].name: {\n        return <TheoryConc/>;\n    }\n    default: {\n        return <div>Concentration Unavailable</div>;\n    }\n\n    }\n};\n\nexport const mapper = (concentration: Concentration): ((props: {\n    StringsToCourses: (stringCourses: string[]) => Course[];\n    setConcentrationContainers: (concentrationContainers: ConcentrationContainerType[]) => void;\n    saveData: SavedProgress;\n}) => JSX.Element) | undefined => {\n    switch(concentration) {\n    case CONCENTRATIONS[0]:\n        return AIConc;\n    }\n    /*\n    case CONCENTRATIONS[1]:\n        return BioConc;\n    case CONCENTRATIONS[2]:\n        return DataScienceConc;\n    case CONCENTRATIONS[3]:\n        return HPCConc;\n    case CONCENTRATIONS[4]:\n        return NetworksConc;\n    case CONCENTRATIONS[5]:\n        return SecurityConc;\n    case CONCENTRATIONS[6]:\n        return TheoryConc;\n    }\n    */\n};","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const AddSemesterButton = (): JSX.Element => {\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n    return(\n        <Button\n            data-testid=\"addsemesterbutton\"\n            onClick={() => {\n                dispatch({type: \"updateNumberOfSemesters\", payload: { ...state, semesters: state.semesters + 1}});\n            }}\n            variant=\"outline-primary\"\n        >\n            Add Semester\n        </Button>\n    );\n};","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { UseDispatchContext } from \"../util/DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\nexport const DeleteSemesterButton = (): JSX.Element => {\n    const { dispatch } = UseDispatchContext();\n    const { state } = UseStateContext();\n    return(\n        <Button\n            data-testid=\"deletesemesterbutton\"\n            onClick={() => {\n                dispatch({type: \"deleteSemester\", payload: { ...state }});\n            }}\n            variant=\"outline-danger\"\n        >\n            Delete Semester\n        </Button>\n    );\n};\n\n","import { Course as CourseType } from \"../../../interfaces/course\";\nimport { Semester } from \"../../../interfaces/semester\";\nimport React from \"react\";\nimport { State } from \"../../../interfaces/State\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\n\nexport const PreReqChecker = (\n    semesters: Semester[],\n    placingIndex: number,\n    courseBeingPlaced: CourseType,\n    state: State,\n    dispatch: React.Dispatch<SchedulerAction>\n): boolean => {\n    const semesterCourses: string = semesters.slice(0, placingIndex)\n        .map(elem => elem.courses.map(eachcourse => eachcourse.name))\n        .flat(2)\n        .join(\"\");\n    const coursePreReqs: string[] = courseBeingPlaced.prereqs;\n    const StringBuffer: string[] = [];\n    for (const eachPreReq of coursePreReqs) {\n        const expr = new RegExp(eachPreReq);\n        const result: boolean = expr.test(semesterCourses);\n        if (!result) {\n            StringBuffer.push(eachPreReq.includes(\"|\") ? `${eachPreReq.split(\"|\").join(\" or \")}, and ` : `${eachPreReq}, and `);\n        }\n    }\n    if (StringBuffer.length > 0) {\n        StringBuffer[StringBuffer.length - 1] = StringBuffer[StringBuffer.length - 1].replace(\", and\", \"\");\n        dispatch({type: \"displayToast\", payload: { ...state, toastMessage: `PreReq(s) required are : ${StringBuffer.join(\"\\n\")}`, toastDisplay: true}});\n        return false;\n    }\n    return true;\n};","import { State } from \"../../../interfaces/State\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\nimport React from \"react\";\n\nexport const DropLogicExecutor = (\n    state: State,\n    dispatch: React.Dispatch<SchedulerAction>,\n    dispatchType: string,\n    sourceContainerIndex: number,\n    destinationContainerIndex: number,\n    sourceIndex: number,\n    droppingIndex: number,\n): void => {\n    dispatch({type: dispatchType, payload: {\n        ...state,\n        sourceIndex: sourceIndex,\n        sourceContainerIndex: sourceContainerIndex,\n        destIndex: droppingIndex,\n        destContainerIndex: destinationContainerIndex\n    }});\n};\n","import React from \"react\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { Semester } from \"../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { PreReqChecker } from \"./DNDLogicV2/prereqchecker\";\nimport { RevPreReqChecker } from \"./DNDLogicV2/revprereqchecker\";\nimport { State } from \"../../interfaces/State\";\nimport { SchedulerAction } from \"../../interfaces/SchedulerAction\";\nimport { DropLogicExecutor } from \"./DNDLogicV2/DropLogicExecutor\";\n\n// TODO: Implement PreReq Checker\n\nexport const successPrint = (result: number): void => {\n    console.log(result >= 1 ? \"Success!\" : \"Failure\");\n};\n\nexport const onDragEndLogic = (\n    result: DropResult,\n    state: State,\n    dispatch: React.Dispatch<SchedulerAction>,\n    concentrationContainers: ConcentrationContainerType[],\n    semesters: Semester[],\n): void => {\n    if (!result.destination) {\n        return;\n    }\n    //console.log(\"IN DROPLOGIC, semesterCourses = \", semesterCourses);\n    /*\n    If where you are dropping TO is a semester\n    */\n    const sourceId = result.source.droppableId;\n    const destinationId = result.destination.droppableId;\n    const sourceIdSemester = sourceId.includes(\"semester-table\");\n    const destIdSemester = destinationId.includes(\"semester-table\");\n    const sourceIndex = result.source.index;\n    const dropIndex = result.destination.index;\n    if(sourceId === destinationId) {\n        if (sourceIdSemester) {\n            // semester --> same semesters\n            //console.log(\"Executing DropLogic if->if\");\n            const semesterNum1 = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n            DropLogicExecutor(state,dispatch,\"semesterToSemester\",semesterNum1-1,semesterNum1-1,result.source.index,result.destination.index);\n        } else {\n            // concentration --> concentration\n            //console.log(\"Executing DropLogic if->else\");\n            const concentrationNumber1 = concentrationContainers.findIndex((eachConcentrationContainer) => eachConcentrationContainer.name === destinationId);\n            DropLogicExecutor(state, dispatch, \"concentrationToConcentration\", concentrationNumber1, concentrationNumber1, sourceIndex, dropIndex);\n        }\n    } else if (sourceIdSemester) {\n        if (destIdSemester) {\n            // semester --> different semester\n            //console.log(\"Executing DropLogic elseif1->if\");\n            const semester1Num = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n            const semester2Num = destIdSemester ? parseInt(destinationId.substring(destinationId.lastIndexOf(\"-\") + 1), 10) : -1;\n            const ind1 = semesters.findIndex(elem => elem.semesterNum === semester1Num);\n            const ind2 = semesters.findIndex(elem => elem.semesterNum === semester2Num);\n            const preReqCheckerResult = PreReqChecker(semesters, ind2, semesters[ind1].courses[sourceIndex], state, dispatch) && RevPreReqChecker(semesters, ind2, semesters[ind1].courses[sourceIndex], state, dispatch);\n            if (preReqCheckerResult) {\n                DropLogicExecutor(state, dispatch, \"semesterToSemester\", ind1, ind2, result.source.index, result.destination.index);\n            }\n        } else {\n            //console.log(\"Executing DropLogic elseif1->else\");\n            // semester --> concentration\n            const semester1Num = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n            const ind1 = semesters.findIndex((eachSemester) => eachSemester.semesterNum === semester1Num);\n            const ind2 = concentrationContainers.findIndex((eachConcentrationContainer) => eachConcentrationContainer.name === destinationId);\n            DropLogicExecutor(state, dispatch, \"semesterToConcentration\", ind1, ind2, sourceIndex, dropIndex);\n        }\n    } else if (destIdSemester) {\n        // concentration --> semester\n        //console.log(\"Executing DropLogic elseif2\");\n        const semesterNum = parseInt(destinationId.substring(destinationId.lastIndexOf(\"-\") + 1), 10);\n        const concentrationContainerIndex = state.concentrationContainers.findIndex((eachContainer) => eachContainer.name === sourceId);\n        const semesterCoursesIndex = semesters.findIndex((eachSemester) => eachSemester.semesterNum === semesterNum);\n        const PreReqResult = PreReqChecker(semesters, semesterCoursesIndex, concentrationContainers[concentrationContainerIndex].courses[sourceIndex], state, dispatch);\n        if (PreReqResult) {\n            DropLogicExecutor(state, dispatch, \"concentrationToSemester\", concentrationContainerIndex, semesterCoursesIndex, sourceIndex, dropIndex);\n        }\n    } else {\n        //console.log(\"Executing DropLogic else\");\n        // concentration --> semester\n        const concentrationNumberDest = concentrationContainers.findIndex((eachConcentrationContainer) => eachConcentrationContainer.name === destinationId);\n        const concentrationNumberSource = concentrationContainers.findIndex((eachConcentrationContainer) => eachConcentrationContainer.name === sourceId);\n        DropLogicExecutor(state, dispatch, \"concentrationToConcentration\", concentrationNumberSource, concentrationNumberDest, sourceIndex, dropIndex);\n    }\n    \n};\n","import { Course as CourseType } from \"../../../interfaces/course\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\nimport { Semester } from \"../../../interfaces/semester\";\nimport React from \"react\";\nimport { State } from \"../../../interfaces/State\";\n\nexport const RevPreReqChecker = (\n    semesters: Semester[],\n    placingIndex: number,\n    courseBeingPlaced: CourseType,\n    state: State,\n    dispatch: React.Dispatch<SchedulerAction>\n): boolean => {\n\n    const ErrorBuffer: string[] = [];\n    for (const eachCourse of semesters[placingIndex].courses) {\n        for (const eachPreReq of eachCourse.prereqs) {\n            const expr = new RegExp(eachPreReq);\n            const result = expr.test(courseBeingPlaced.name);\n            if (result) {\n                ErrorBuffer.push(\n                    `${eachPreReq.includes(\"|\") ? `For ${eachCourse.name} : ${eachPreReq.split(\"|\").join(\" or \")}, and ` : `${eachPreReq}, and `}`\n                );\n            }\n        }\n    }\n\n    if (ErrorBuffer.length > 0) {\n        dispatch({type: \"displayToast\", payload: { ...state, toastMessage: `PreReq(s) required are : ${ErrorBuffer.join(\"\\n\")}`, toastDisplay: true}});\n        return false;\n    }\n\n    return true;\n\n\n};","import React from \"react\";\nimport { Semester } from \"../../interfaces/semester\";\nimport { Button } from \"react-bootstrap\";\n\nexport const ExportPlan = (props: { semesterCourses: Semester[] }): JSX.Element => {\n    const data: string[][] = [[\"Semester\", \"Course\", \"Credits\"]];\n\n    return (\n        <Button\n            data-testid=\"exportcsvbutton\"\n            onClick={() => {\n                for (let i = 0; i < props.semesterCourses.length; i += 1) {\n                    const courses = props.semesterCourses[i].courses;\n                    const semesterNum = (i + 1).toString();\n                    for (const eachcourse of courses) {\n                        const courseName = eachcourse.name;\n                        const credits = eachcourse.credits.toString();\n                        data.push([semesterNum, courseName, credits]);\n                    }\n                }\n                const csvContent = `data:text/csv;charset=utf-8,${data.map(elem => elem.join(\",\")).join(\"\\n\")}`;\n\n                const encodedUri = encodeURI(csvContent);\n                const link = document.createElement(\"a\");\n                link.setAttribute(\"href\", encodedUri);\n                link.setAttribute(\"download\", \"my_course_plan.csv\");\n                document.body.appendChild(link);\n                link.click();\n            }}\n            variant=\"outline-secondary\"\n        >\n            Export CSV\n        </Button>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const HowToDropDown = ({ setDisplay }:\n    { setDisplay: React.Dispatch<React.SetStateAction<number>> }): JSX.Element =>\n    <Dropdown>\n        <Dropdown.Toggle id=\"dropdown-basic\" variant=\"success\">\n            Help Menu\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(1);\n                }}\n            >\n                Application Layout\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(2);\n                }}\n            >\n                Navbar\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(3);\n                }}\n            >\n                Concentration Table\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(4);\n                }}\n            >\n                Semester Table\n            </Dropdown.Item>\n        </Dropdown.Menu>\n    </Dropdown>;\n","import { Modal, Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const HowToNavigation = (): JSX.Element =>\n\n    <Modal.Body>\n        How to navigate the help menu:\n        <ul>\n            <li>\n                There is a dropdown menu that looks like this:\n                <Dropdown>\n                    <Dropdown.Toggle id=\"dropdown-basic\" variant=\"outline-success\">\n                        Help Menu\n                    </Dropdown.Toggle>\n                </Dropdown>\n                This dropdown is used to access all of the help menu options\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WholeAppInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/wholeapp.PNG`} />\n        <ul>\n            <li>\n                The <b style={{ color: \"red\" }}>red box</b> is the navbar, which contains links to useful resources (such as course registration/lookup and also undergrad information about concentrations/courses)\n            </li>\n            <li>\n                The <b style={{ color: \"green\" }}>green box</b> is where the concentration requirements are stored, the name of the concentration above. In this example, the name is <b>Artificial Intelligence and Robotics</b>, to access the individual courses of each concentration requirement category, click on the category and a dropdown list of courses you can drag into the blue box appear.\n            </li>\n            <li>\n                The <b style={{ color: \"blue\" }}>blue box</b> is where your semester courses will be. To enter courses into your semester, simply drag them from the concentration requirements(that is the <b style={{ color: \"green\" }}>green box</b>) into the semester box (that is the <b style={{ color: \"blue\" }}>blue box</b>)\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const ConcentrationContainerInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/concentrationguide.gif`} />\n        <ul>\n            <li>\n                Each concentration requirement is able to be clicked on to then expand\n                and reveal a lot of courses you can select from that fit into the requirement for the concentration.\n            </li>\n            <li>\n                These courses can then be dragged and dropped into the semester to plan out your semesters!\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image, Accordion } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const NavBarInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/navbarguide.gif`} />\n        <ul>\n            <li>\n                This navbar contains a plethora of options for each student.\n                <ul>\n                    <Accordion flush>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header>\n                                Categories\n                            </Accordion.Header>\n                            <Accordion.Body>\n                                <Accordion flush>\n                                    <Accordion.Item eventKey=\"2\">\n                                        <Accordion.Header>Useful Links</Accordion.Header>\n                                        <Accordion.Body>\n                                            The <em>Useful links</em> menu contains links such as course search,\n                                            list of undergrad courses, and registration add/drop,\n                                            as well as the link to uds computer science student guidance department\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"3\">\n                                        <Accordion.Header>\n                                            Concentrations\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The <em>Concentrations</em> menu contains\n                                                all the different CISC concentrations\n                                                you can select from,\n                                                and adjusts the courses you can choose from accordingly\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"4\">\n                                        <Accordion.Header>\n                                            Add Semester\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The button works as when it is clicked,\n                                                another semester appears beneath the current one\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"5\">\n                                        <Accordion.Header>\n                                            Export CSV\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The export csv button works as when it is clicked,\n                                                a CSV file containing all the semester information\n                                                is saved onto your computer.\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                </Accordion>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                </ul>\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const SemesterTableInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/semesterguide.gif`} />\n        <ul>\n            <li>\n                Each semester comprises of: The Semester it is,\n                meaning 1st semester 2nd etc., the red button, and the credits display.\n                The semester can be toggled on and off to display the courses within it.\n            </li>\n            <li>\n                <ul>\n                    <li>Red button</li>\n                    <ul>\n                        <li>\n                            The red button works as, if you press it and there are courses\n                            in your semester, it deletes all the courses within the semester.\n                        </li>\n                    </ul>\n                    <li>\n                        Course buttons\n                        <ul>\n                            When courses are moved into a semester,\n                            two buttons appear, one that is red, and one that is yellow.\n                            The red button is to delete that single\n                            course from the semester, and the yellow button is to edit the name of\n                            that course.\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </Modal.Body>;\n","import React from \"react\";\nimport { HowToNavigation } from \"../howtosteps/howtonavigation\";\nimport { WholeAppInfo } from \"../howtosteps/wholeappinfo\";\nimport { ConcentrationContainerInfo } from \"../howtosteps/howtoconcentrationcontainer\";\nimport { NavBarInfo } from \"../howtosteps/howtonavbar\";\nimport { SemesterTableInfo } from \"../howtosteps/howtosemestertable\";\n\nexport const HandleHowToDisplay = (display: number): JSX.Element => {\n\n    switch (display) {\n\n    case 0:\n        return <HowToNavigation />;\n    case 1:\n        return <WholeAppInfo />;\n    case 2:\n        return <NavBarInfo />;\n    case 3:\n        return <ConcentrationContainerInfo />;\n    case 4:\n        return <SemesterTableInfo />;\n    default:\n        return <div />;\n\n    }\n\n};\n","import { Button, Modal, Row, Col, Container } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { HowToDropDown } from \"./howtodropdown/howtodropdown\";\nimport { HandleHowToDisplay } from \"./howtodropdown/howtodropdownlogic\";\n\nexport const HowToDisplay = (): JSX.Element => {\n\n    const [show,\n        setShow] = useState<boolean>(false);\n    const handleShow = () => {\n        setShow(true);\n    };\n    const [currDisplay,\n        setCurrDisplay] = useState<number>(0);\n    const handleClose = () => {\n        setCurrDisplay(0);\n        setShow(false);\n    };\n\n    return (\n\n        <>\n            <Button\n                data-testid=\"howtobutton\"\n                onClick={handleShow}\n                variant=\"outline-success\"\n            >\n                How To\n            </Button>\n            <Modal onHide={handleClose} show={show}>\n                <Modal.Header closeButton>\n                    <Container>\n                        <Row style={{ textAlign: \"center\" }}>\n                            <Col>\n                                <Modal.Title>\n                                    How to use our app!\n                                </Modal.Title>\n                            </Col>\n                        </Row>\n                        <br />\n                        <br />\n                        <Row style={{ textAlign: \"left\" }}>\n                            <Col>\n                                <HowToDropDown setDisplay={setCurrDisplay} />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Modal.Header>\n                {HandleHowToDisplay(currDisplay)}\n                <Modal.Footer>\n                    <Button onClick={handleClose} variant=\"outline-danger\">\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n\n    );\n\n};\n","import React from \"react\";\n\nexport const Footer = (): JSX.Element =>\n    <div className=\"footer\">\n        <hr />\n        <p>\n            Created by Kurt Hammen, Luke Halko, and Cameron Thacker. Made 2021. Check out\n            {\" \"}\n            <a href=\"https://github.com/UD-CISC275-F21/ud-cis-scheduler-team-4\" rel=\"noopener noreferrer\" target=\"_blank\">our repository.</a>\n        </p>\n    </div>;\n\n// github repository\n// see what other people have\n","import CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { SavedProgress } from \"../../../interfaces/savedprogress\";\nimport { State } from \"../../../interfaces/State\";\n\nexport const initialState: State = {\n    concentration : CONCENTRATIONS[0],\n    semesterCourses : [],\n    display : false,\n    semesters : 1,\n    concentrationContainers: [],\n    toastDisplay: false,\n    toastMessage: \"\",\n    deleteTriggered: -1,\n    saveData: [{\n        concentration: CONCENTRATIONS[0],\n        numberOfSemesters: 1,\n        semesters: [],\n    } as SavedProgress],\n    currentSaveData: {\n        concentration: CONCENTRATIONS[0],\n        numberOfSemesters: 1,\n        semesters: [{semesterNum: 1, courses: []}],\n    } as SavedProgress,\n    sourceIndex: 0,\n    sourceContainerIndex: 0,\n    destIndex: 0,\n    destContainerIndex: 0\n};","import { Course } from \"../../../interfaces/course\";\n\nexport const CoursesToStrings = (courses: Course[]): string[] => {\n    /** Takes a list of courses, and returns a list of strings by mapping each course to it's name\n     */\n    return courses.map((eachCourse) => eachCourse.name);\n};","import produce from \"immer\";\nimport { Semester } from \"../../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport { Course } from \"../../../interfaces/course\";\nimport { State } from \"../../../interfaces/State\";\nimport { SchedulerAction } from \"../../../interfaces/SchedulerAction\";\nimport { CoursesToStrings } from \"../../courses/DisplayCourseListHelperFunctions/CoursesToStrings\";\n\nexport const reducerFunction = (state: State, action: SchedulerAction ): State => {\n    //console.log(\"state = \", state);\n    switch (action.type) {\n    case \"checkState\": {\n        return produce(state, (draft) => {\n            console.log(\"current state = \", state);\n            console.log(\"draft = \", draft);\n        });\n    }\n    case \"concentrationToSemester\": {\n        return produce(state, (draft) => {\n            // PreReqChecker here\n            //console.log(\"C-->StateContext state = \", state, \" and payload = \", action.payload);\n            const theConcentration: ConcentrationContainerType = draft.concentrationContainers[action.payload.sourceContainerIndex];\n            const theSemester: Semester = draft.currentSaveData.semesters[action.payload.destContainerIndex];\n            const theCourse = theConcentration.courses.splice(action.payload.sourceIndex,1)[0];\n            theSemester.courses.splice(action.payload.destIndex,0,theCourse);\n            draft.concentrationContainers[action.payload.sourceContainerIndex] = theConcentration;\n            //draft.semesterCourses[action.payload.destContainerIndex] = theSemester;\n            draft.currentSaveData.semesters[action.payload.destContainerIndex].courses = theSemester.courses;\n        });\n    }\n    case \"semesterToConcentration\": {\n        return produce(state, (draft) => {\n            //console.log(\"S-->C state = \", state, \" and payload = \", action.payload);\n            const theConcentration: ConcentrationContainerType = draft.concentrationContainers[action.payload.destContainerIndex];\n            const theSemester: Semester = draft.currentSaveData.semesters[action.payload.sourceContainerIndex];\n            const theCourse: Course = theSemester.courses.splice(action.payload.sourceIndex, 1)[0];\n            theConcentration.courses.splice(action.payload.destIndex, 0, theCourse);\n            draft.concentrationContainers[draft.destContainerIndex].courses = theConcentration.courses;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSemester.courses;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSemester.courses;\n        });\n    }\n    case \"semesterToSemester\": {\n        return produce(state, (draft) => {\n            //console.log(\"S-->S state = \", state, \" and payload = \", action.payload);\n            const theSourceSemester: Semester = draft.currentSaveData.semesters[action.payload.sourceContainerIndex];\n            const theDestSemester: Semester = draft.currentSaveData.semesters[action.payload.destContainerIndex];\n            const theSplicedCourse: Course = theSourceSemester.courses.splice(action.payload.sourceIndex, 1)[0];\n            theDestSemester.courses.splice(action.payload.destIndex, 0, theSplicedCourse);\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSourceSemester.courses;\n            draft.currentSaveData.semesters[action.payload.destContainerIndex].courses = theDestSemester.courses;\n            draft.currentSaveData.semesters[action.payload.destContainerIndex].courses = theDestSemester.courses;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses = theSourceSemester.courses;\n        });\n    }\n    case \"concentrationToConcentration\": {\n        return produce(state, (draft) => {\n            //console.log(\"C-->C state = \", state, \" and payload = \", action.payload);\n            const theSourceConcentration: ConcentrationContainerType = draft.concentrationContainers[action.payload.sourceContainerIndex];\n            const theDestinationConcentration: ConcentrationContainerType = draft.concentrationContainers[action.payload.destContainerIndex];\n            const theCourse = theSourceConcentration.courses.splice(action.payload.sourceIndex, 1)[0];\n            theDestinationConcentration.courses.splice(action.payload.destIndex, 0, theCourse);\n            draft.concentrationContainers[action.payload.sourceContainerIndex].courses = theSourceConcentration.courses;\n            draft.concentrationContainers[action.payload.destContainerIndex].courses = theDestinationConcentration.courses;\n        });\n    }\n    case \"updateSaveDataBio\":{\n        return produce(state, (draft) => {\n            //console.log(\"updating Save Data\");\n            // set saveData index to be sourceContainerIndex\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.ochem = CoursesToStrings(state.concentrationContainers[8].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.conc.data = CoursesToStrings(state.concentrationContainers[7].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[6].courses);\n        });\n    }\n    case \"updateSaveDataAI\":{\n        return produce(state, (draft) => {\n            //console.log(\"updating Save Data\");\n            // set saveData index to be sourceContainerIndex\n            const tmpSaveData = draft.saveData[0];\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = [...CoursesToStrings(state.concentrationContainers[1].courses), ...CoursesToStrings(state.concentrationContainers[4].courses)];\n            tmpSaveData.concentration.conc.general = [...CoursesToStrings(state.concentrationContainers[2].courses), ...CoursesToStrings(state.concentrationContainers[5].courses)];\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[7].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[6].courses);\n        });\n    }\n    case \"saveHPC\": {\n        return produce(state, (draft) => {\n\n            //console.log(\"Updating HPC Concentration\");\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.data = CoursesToStrings(state.concentrationContainers[7].courses);\n            tmpSaveData.concentration.conc.ochem = [...CoursesToStrings(state.concentrationContainers[8].courses), ...CoursesToStrings(state.concentrationContainers[10].courses)];\n            tmpSaveData.concentration.conc.cybersecurity = CoursesToStrings(state.concentrationContainers[9].courses);\n        });\n    }\n    case \"updateSaveDataScience\": {\n\n        return produce(state, (draft) => {\n\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.data = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[7].courses);\n        });\n\n    }\n    case \"saveNetworks\": {\n\n        return produce(state, (draft) => {\n\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.cybersecurity = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.systems = CoursesToStrings(state.concentrationContainers[7].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[8].courses);\n        \n        });\n    }\n    case \"updateSaveSecurity\": {\n\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.elective = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.cybersecurity = CoursesToStrings(state.concentrationContainers[7].courses);\n        });\n    }\n    case \"saveTheory\": {\n\n        return produce(state, (draft) => {\n            const tmpSaveData = draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name)];// found saveData\n            //console.log(\"SAVEDATA = \", tmpSaveData);\n            tmpSaveData.concentration.core = CoursesToStrings(state.concentrationContainers[0].courses);\n            tmpSaveData.concentration.capstone = CoursesToStrings(state.concentrationContainers[1].courses);\n            tmpSaveData.concentration.conc.general = CoursesToStrings(state.concentrationContainers[2].courses);\n            tmpSaveData.concentration.writing = CoursesToStrings(state.concentrationContainers[3].courses);\n            tmpSaveData.concentration.conc.stats = CoursesToStrings(state.concentrationContainers[4].courses);\n            tmpSaveData.concentration.lab = CoursesToStrings(state.concentrationContainers[5].courses);\n            tmpSaveData.concentration.conc.track = CoursesToStrings(state.concentrationContainers[6].courses);\n            tmpSaveData.concentration.conc.cybersecurity = CoursesToStrings(state.concentrationContainers[7].courses);\n        });\n\n    }\n    case \"updateNumberOfSemesters\":{\n        //console.log(\"--- adding semester, state = \", state);\n        return produce(state, (draft) => {\n            draft.currentSaveData.semesters = [...draft.currentSaveData.semesters, { semesterNum: action.payload.currentSaveData.semesters.length+1, courses: []}];\n        });\n    }\n    case \"updateConcentration\":{\n        //console.log(\"updating concentration with payload : \", action.payload);\n        return produce(state, (draft) => {\n            draft.concentration = action.payload.concentration; \n            // update checklist --- concentrationContainers, semesterCourses, concentration\n            const saveDataIndex = draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === state.currentSaveData.concentration.name);\n            // found where we store previous currentSaveData, so then we can update it\n            draft.saveData[saveDataIndex] = state.currentSaveData;\n            const newSaveDataIndex = draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name);\n            if (newSaveDataIndex === -1) {\n                // saveData is not present, create new one and append onto end\n                const tmpSaveData = [...draft.saveData];\n                tmpSaveData.push({ concentration: action.payload.concentration, numberOfSemesters: 1, semesters: [{semesterNum: 1, courses: []}]});\n                draft.saveData = tmpSaveData;\n                draft.currentSaveData = draft.saveData[draft.saveData.length-1];\n            } else {\n                //console.log(\"found save data\");\n                draft.currentSaveData = draft.saveData[newSaveDataIndex];\n            }\n            // updated saveData and currentSaveData -- cannot update concentrationContainers because that has not been rendered yet <-- if its been saved before, upload it, if not, just leave it\n            // update semesterCourses <-- check\n\n        });\n    }\n    case \"updateConcentrationContainers\": {\n        //console.log(\"updating concentrationcontainers with payload \", action.payload);\n        return produce(state, (draft) => {\n            //console.log(\"payload = \", action.payload);\n            draft.concentrationContainers = action.payload.concentrationContainers;\n            return draft;\n        });\n    }\n    case \"updateCurrentSaveData\":{\n        return produce(\n            state, (draft) => {\n                draft.currentSaveData = action.payload.currentSaveData;\n            });\n    }\n    case \"setDisplay\":{\n        return produce(state, (draft) => {\n            draft.display = action.payload.display;\n        });\n    }\n    case \"deleteSemester\":{\n        //console.log(\"semesterCourses = \", state.semesterCourses, \" and number of semesters = \", state.currentSaveData.numberOfSemesters);\n        if ( state.currentSaveData.semesters.length > 0) {\n            const temporarySemesterCourse = action.payload.currentSaveData.semesters[action.payload.currentSaveData.semesters.length-1];\n            if (temporarySemesterCourse.courses.length > 0) {\n                //console.log(\"indelete if -> if\");\n                // display error\n                return produce(state, (draft) => {\n                    draft.toastMessage = `Must remove classes from Semester ${draft.currentSaveData.semesters.length} before deleting`;\n                    draft.toastDisplay = true;\n                });\n            } else if(action.payload.currentSaveData.semesters.length === 1) {\n                //console.log(\"indelete if -> else if\");\n                return produce(state, (draft) => {\n                    draft.toastMessage = \"Must have atleast 1 semester present\";\n                    draft.toastDisplay = true;\n                });\n            } else {\n                return produce(state, (draft) => {\n                    //console.log(\"indelete if -> else\");\n                    draft.currentSaveData.semesters = draft.currentSaveData.semesters.slice(0,draft.currentSaveData.semesters.length-1);\n                });\n            }\n        } else {\n            //console.log(\"indeleteelse\");\n            return { ...state };\n        }\n    }\n    case \"displayToast\":{\n        return produce(state, (draft) => {\n            draft.toastMessage = action.payload.toastMessage;\n            draft.toastDisplay = action.payload.toastDisplay;\n        });\n    }\n    case \"NoSavedConcentration\": {\n        return produce(state, (draft) => {\n            const indexToUpdate = draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === draft.currentSaveData.concentration.name);\n            draft.saveData[indexToUpdate] = draft.currentSaveData;\n            draft.saveData = [...draft.saveData, {\n                concentration: action.payload.concentration,\n                numberOfSemesters: 1,\n                semesters: [],\n            }];\n            draft.semesters = 1;\n            draft.currentSaveData = draft.saveData[draft.saveData.length-1];\n            draft.currentSaveData.numberOfSemesters = 1;\n        });\n    }\n    case \"SavedConcentration\": {\n        return produce(state, (draft) => {\n            const indexWhereSaveDataIs = draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === action.payload.concentration.name);\n            draft.currentSaveData = draft.saveData[indexWhereSaveDataIs];\n            draft.semesters = draft.currentSaveData.numberOfSemesters;\n            //draft.currentSaveData.semesters = draft.currentSaveData.semesters;\n\n        });\n    }\n    case \"SetSemesterCourses\": {\n        return produce(state, (draft) => {\n            draft.currentSaveData = {...draft.currentSaveData, semesters: action.payload.currentSaveData.semesters};\n            draft.currentSaveData.semesters = action.payload.currentSaveData.semesters;\n            draft.saveData[draft.saveData.findIndex((eachSaveData) => eachSaveData.concentration.name === draft.currentSaveData.concentration.name)].semesters = draft.currentSaveData.semesters;\n        });\n    }\n    case \"updateCourse\": {\n\n        return produce(state, (draft) => {\n            //console.log(\"in update course with msg = \", action.payload);\n            const theSemester: Semester = draft.currentSaveData.semesters[action.payload.sourceContainerIndex];\n            const newTextFields = action.payload.toastMessage.split(\"_\"); // [desc, name, title]\n            const theClass = { ...theSemester.courses[action.payload.sourceIndex], description: newTextFields[0], name: newTextFields[1], title: newTextFields[2]};\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses[action.payload.sourceIndex] = theClass;\n            draft.currentSaveData.semesters[action.payload.sourceContainerIndex].courses[action.payload.sourceIndex] = theClass;\n        });\n    }\n    default:{\n        break;\n    }\n    }\n    return {...state};\n};","import React, { useState } from \"react\";\nimport { Modal, Button, Badge, Row, Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { Semester } from \"../../interfaces/semester\";\nimport { UseDispatchContext } from \"./DispatchLogic/UseDispatchContext\";\nimport { UseStateContext } from \"./DispatchLogic/UseStateContext\";\n\nexport const EditCourse = (props: {\n    display: boolean;\n    setDisplay: React.Dispatch<React.SetStateAction<boolean>>;\n    course: CourseType;\n    semesterNumber: number;\n}): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    const [titleText, setTitleText] = useState(props.course.title);\n    const [descText, setDescText] = useState(props.course.description);\n    const { state } = UseStateContext();\n    const { dispatch } = UseDispatchContext();\n\n    const closeDisplay = (): void => {\n        props.setDisplay(false);\n    };\n    const courseEdit = () => {\n        const theSemester: Semester = state.currentSaveData.semesters[props.semesterNumber];\n        const courseIndex: number = theSemester.courses.findIndex(elem => elem.name === props.course.name);\n        dispatch({type: \"updateCourse\", payload: { ...state, sourceIndex: courseIndex, sourceContainerIndex: props.semesterNumber,  toastMessage: `${descText}_${nameText}_${titleText}`}});\n        props.setDisplay(false);\n    };\n    return (\n        <Modal\n            onHide={() => {\n                closeDisplay();\n            }}\n            show={props.display}\n        >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Badge bg=\"primary\">Edit Course Details</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col>\n                        Enter name here:\n                    </Col>\n                    <Col>\n                        <input\n                            onChange={elem => {\n                                setNameText(elem.target.value);\n                            }}\n                            placeholder=\"Enter Course Name\"\n                            type=\"textbox\"\n                            value={nameText}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        Enter Title here:\n                    </Col>\n                    <Col>\n                        <input\n                            onChange={elem => {\n                                setTitleText(elem.target.value);\n                            }}\n                            placeholder=\"Enter Course Title\"\n                            type=\"textbox\"\n                            value={titleText}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        Enter description here:\n                    </Col>\n                    <Col>\n                        <form>\n                            <textarea\n                                cols={45}\n                                onChange={elem => {\n                                    setDescText(elem.target.value);\n                                }}\n                                placeholder=\"Enter Course Description\"\n                                rows={10}\n                                value={descText}\n                            />\n                        </form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{ display: \"block\", textAlign: \"center\" }}>\n                <Button onClick={courseEdit} variant=\"outline-primary\" >Submit Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Col } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n\nexport const EditCoursePanel = (props: {\n    elem: CourseType;\n    ind: number;\n}): JSX.Element => {\n\n    const [display, setDisplay] = useState<boolean>(false);\n\n    return (\n        <Col lg=\"1\" xs>\n            <button\n                className=\"edit-course-button\"\n                onClick={() => {\n                    setDisplay(true);\n                }}\n            >\n                <img src={`${process.env.PUBLIC_URL}/editbutton.png`} id=\"edit-img\" />\n            </button>\n            {\n                display\n                &&\n                <EditCourse\n                    course={props.elem}\n                    display={display}\n                    semesterNumber={props.ind}\n                    setDisplay={setDisplay}\n                />\n            }\n        </Col>\n    );\n\n};\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Table, ListGroup, Accordion, Col, Row, Badge } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { Semester as SemesterType } from \"../../interfaces/semester\";\nimport { EditCoursePanel } from \"../courses/EditCoursePanel\";\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const getCourses = (semesterCourses: SemesterType[], index: number): CourseType[] => {\n\n    const result = semesterCourses[index];\n    if (result === undefined) {\n        //console.log(\">>>> undefined \");\n        return [];\n    } else {\n        const result2 = semesterCourses[index].courses.length > 0;\n        if ( result2 ) {\n            //console.log(\">>>> valid courses >>>>> \", semesterCourses[index].courses);\n            return semesterCourses[index].courses;\n        } else {\n            //console.log(\">>>> invalid courses \");\n            return [];\n        }\n    }\n\n    //const [courses, setCourses] = useState<CourseType[]>(\n    //    props.semesterCourses[props.ind] !== undefined ? \n    //    (props.semesterCourses[props.ind].courses.length > 0 ? props.semesterCourses[props.ind].courses : [])\n    //    : []);\n\n};\n\nexport const Semester = (props: {\n    ind: number;\n    semesterCourse: SemesterType;\n}): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>(\n        props.semesterCourse !== undefined ? props.semesterCourse.courses : []);\n    const [credits, setCredits] = useState<number>(0);\n    useEffect(() => {\n        return() => {\n            //console.log(\"unmounting\");\n            setCourses([]);\n        };\n    }, []);\n\n    const getCredits = (courses: CourseType[]) => {\n        const tmpCourses: CourseType[] = courses;\n        let count = 0;\n        for (const eachCourse of tmpCourses) {\n            count += eachCourse.credits;\n        }\n        setCredits(count);\n    };\n\n    useEffect(() => {\n        //console.log(\"courses changed -- \", props.semesterCourse);\n        if (props.semesterCourse !== undefined) {\n            //console.log(\"courses changed [in if]-- \", props.semesterCourse);\n            setCourses(props.semesterCourse.courses);\n            getCredits(props.semesterCourse.courses);\n            //console.log(courses);\n        }\n    }, [props.semesterCourse]);\n\n    return (\n        <Accordion data-testid=\"semesteraccordian\" defaultActiveKey=\"0\" key={`accordion ${props.ind}`} >\n            <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>\n                    <Col xs={2}>\n                        {`Semester ${props.ind + 1}`}\n                    </Col>\n                    <Col>\n                        <Badge>\n                            {`Credits: ${credits}`}\n                        </Badge>\n                    </Col>\n                </Accordion.Header>\n                <Accordion.Body>\n                    <Col key={`semester-table-col-${props.ind}`}>\n                        <Droppable droppableId={`semester-table-${props.ind + 1}`}>\n                            {(prov: DroppableProvided) =>\n                                <Table key={`semester-table-table-${props.ind}`}>\n                                    <thead>\n                                        <tr>\n                                            <td>{`${getSemesterStr(props.ind + 1)}`}</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                                        <tr>\n                                            <td>\n                                                <ListGroup data-testid=\"semestertable\">\n                                                    {\n                                                        courses.map((elem: CourseType, index: number) =>\n                                                            <ListGroup.Item key={elem.name}>\n                                                                <Row>\n                                                                    <Col>\n                                                                        <Course\n                                                                            credits={elem.credits}\n                                                                            description={elem.description}\n                                                                            ind={index}\n                                                                            name={`${elem.name}${elem.title.length > 0 ? `-${elem.title}` : \"\"}`}\n                                                                            title={elem.title}\n                                                                        />\n                                                                    </Col>\n                                                                    <EditCoursePanel \n                                                                        elem={elem}\n                                                                        ind={props.ind}\n                                                                    />\n                                                                </Row>\n                                                            </ListGroup.Item>,\n                                                        )\n                                                    }\n                                                </ListGroup>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            }\n                        </Droppable>\n                    </Col>\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    );\n\n\n};\n","import React from \"react\";\nimport { Semester as SemesterComponent } from \"./Semester\";\nimport { UseStateContext } from \"../util/DispatchLogic/UseStateContext\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (): JSX.Element => {\n        \n    const { state } = UseStateContext();\n    //console.log(\"IN SEMESTER TABLE --- state = \", state);\n    return(\n        <>\n            {\n                state.currentSaveData.semesters !== undefined ?\n                    state.currentSaveData.semesters\n                        .map((eachSemester, ind) =>\n                            <SemesterComponent\n                                ind={ind}\n                                key={`semester-table-key-${ind}`}\n                                semesterCourse={eachSemester}\n                            />\n                        )\n                    :\n                    <div>\n                No semesters available\n                    </div>\n            }\n        </>\n    );\n};\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Container, Row, Col, Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport { WelcomeToast, PreReqSameSemesterToast } from \"./util/Notifications\";\nimport React, { useReducer } from \"react\";\nimport { DropdownMenu } from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { DeleteSemesterButton } from \"./semesters/DeleteSemesterButton\";\nimport { onDragEndLogic } from \"./util/DropLogic\";\nimport { ExportPlan } from \"./util/ExportPlan\";\nimport { HowToDisplay } from \"./util/howto/howtodisplay\";\nimport { Footer } from \"./util/Footer\";\nimport { initialState } from \"../assets/data/statedata/InitialState\";\nimport { reducerFunction } from \"./util/DispatchLogic/SchedulerReducerFunction\";\nimport { DispatchContext } from \"./util/DispatchLogic/DispatchContext\";\nimport { StateContext } from \"./util/DispatchLogic/StateContext\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\n\nexport const MainPage = (): JSX.Element => {\n    const [state, dispatch] = useReducer(reducerFunction, initialState);\n    const {\n        concentration,\n        semesterCourses,\n        display,\n        concentrationContainers,\n        toastDisplay,\n        toastMessage,\n    } = state;\n\n    const dispatchValue = { dispatch };\n    const stateValue = { state };\n\n    const onDragEnd = (result: DropResult) => {\n        onDragEndLogic(\n            result,\n            state,\n            dispatch,\n            concentrationContainers,\n            state.currentSaveData.semesters\n        );\n    };\n\n    return (\n        <DispatchContext.Provider value={dispatchValue}>\n            <StateContext.Provider value={stateValue}>\n                <DragDropContext\n                    onDragEnd={onDragEnd}\n                >\n                    <Container>\n                        <br />\n                        <Row>\n                            <Col>\n                                <WelcomeToast display={display} />\n                                <PreReqSameSemesterToast display={toastDisplay} errMsg={toastMessage} />\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Navbar bg=\"light\" data-testid=\"navbar\" expand=\"lg\" >\n                                <Container>\n                                    <Navbar.Brand href=\"#home\">UDCIS Course Scheduler</Navbar.Brand>\n                                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                                        <Nav className=\"me-auto\">\n                                            <NavDropdown data-testid=\"navbardropdown\" id=\"basic-navbar-nav\" title=\"Useful Links\" >\n                                                <NavDropdown.Item data-testid=\"navdropdownitem1\" href=\"https://udapps.nss.udel.edu/CoursesSearch/\" >Course Search</NavDropdown.Item>\n                                                <NavDropdown.Item data-testid=\"navdropdownitem2\" href=\"https://www.cis.udel.edu/academics/undergraduate-programs/resources/courses/\" >CISC Undergraduate Courses</NavDropdown.Item>\n                                                <NavDropdown.Item data-testid=\"navdropdownitem3\" href=\"https://webreg.nss.udel.edu/registration/schedule/\" >Registration Add/Drop</NavDropdown.Item>\n                                                <NavDropdown.Item data-testid=\"navdropdownitem4\" href=\"https://ud-cis-teaching.github.io/student-guidance/\" >UD CIS Student Guidance</NavDropdown.Item>\n                                            </NavDropdown>\n                                            <DropdownMenu/>\n                                            <AddSemesterButton/>\n                                            <DeleteSemesterButton />\n                                            <ExportPlan semesterCourses={semesterCourses} />\n                                            <HowToDisplay />\n                                        </Nav>\n                                    </Navbar.Collapse>\n                                </Container>\n                            </Navbar>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <br />\n                                <DisplayCourseList concentration={concentration}/>\n                            </Col>\n                            <Col>\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <div>\n                                    <SemesterTable />\n                                </div>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Footer />\n                        </Row>\n                    </Container>\n                </DragDropContext>\n            </StateContext.Provider>\n        </DispatchContext.Provider>\n    );\n};\n","import React from \"react\";\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nexport const App = (): JSX.Element => {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n};\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\n            /* webpackChunkName: \"web-vitals\" */\n            \"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        })\n            .catch(err => err as string);\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}