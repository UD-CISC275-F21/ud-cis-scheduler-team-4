{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/util/EditCourse.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/concentrations/AIConc.tsx","components/courses/concentrations/BioConc.tsx","components/courses/concentrations/DataScienceConc.tsx","components/courses/concentrations/HPCConc.tsx","components/courses/concentrations/NetworksConc.tsx","components/courses/concentrations/SecurityConc.tsx","components/courses/concentrations/TheoryConc.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/semesters/DeleteSemesterButton.tsx","components/util/DNDLogic/semesterToSemester.tsx","components/util/DNDLogic/concentrationToConcentration.tsx","components/util/DropLogic.tsx","components/util/DNDLogic/semesterToConcentration.tsx","components/util/DNDLogic/concentrationToSemester.tsx","components/util/ExportPlan.tsx","components/util/howto/howtodropdown/howtodropdown.tsx","components/util/howto/howtosteps/howtonavigation.tsx","components/util/howto/howtosteps/wholeappinfo.tsx","components/util/howto/howtosteps/howtoconcentrationcontainer.tsx","components/util/howto/howtosteps/howtonavbar.tsx","components/util/howto/howtosteps/howtosemestertable.tsx","components/util/howto/howtodropdown/howtodropdownlogic.tsx","components/util/howto/howtodisplay.tsx","components/util/Footer.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","EditCourse","useState","course","nameText","setNameText","title","titleText","setTitleText","description","descText","setDescText","onHide","setDisplay","closeButton","Badge","bg","Row","Col","onChange","elem","target","value","placeholder","type","rows","cols","style","textAlign","Button","onClick","tmpSemesters","semesterCourses","tmpSemester","ind1","i","length","semesternum","semesterNumber","splice","courses","eachcourse","setSemesterCourses","variant","getSemesterStr","semesterNum","Semester","setCourses","credits","setCredits","useEffect","find","semesters","push","courseSetter","newCourses","console","log","tmpCourses","count","getCredits","Accordion","defaultActiveKey","eventKey","xs","tmpSemesterCourses","theSemester","droppableId","Table","droppableProps","map","section","lg","courseDeleteFunc","SemesterTable","Array","fill","semestersCourses","DropdownMenu","clickFunc","setConcentration","CONCENTRATIONS","NavDropdown","id","as","CourseContainer","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","lab","labCourses","setLabCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","ochem","ochemCourses","setOchemCourses","data","dataCourses","setDataCourses","DataScienceConc","mathCourses","setMathCourses","HPCConc","track","cybersecurity","learningCourses","setLearningCourses","dataTrackCourses","setDataTrackCourses","NetworksConc","secCourses","setSecCourses","systemsCourses","setSystemsCourses","SecurityConc","TheoryConc","discCourses","setDiscCourses","contCourses","setContCourses","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","setSemesters","DeleteSemesterButton","setDelete","semesterToSemester","semester","semester2","spliceInd","dropInd","diffSemester","splicedCourse","concentrationToConcentration","result","concContainers","concContainer","courseSpliceInd","setConcContainers","isDifferent","ind2","findIndex","destination","tmpConcContainerCourse","diffContainer","tmpConcContainerCourseDrag","successPrint","onDragEndLogic","concentrationContainers","sourceId","source","destinationId","sourceIdSemester","includes","destIdSemester","sourceIndex","dropIndex","semesterNum1","parseInt","substring","lastIndexOf","concentrationInd","semesterInd","courseDropInd","theCourse","semesterToConcentration","droppingSemester","concentrationToSemester","Object","values","ExportPlan","toString","courseName","csvContent","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","HowToDropDown","Dropdown","Toggle","Menu","HowToNavigation","WholeAppInfo","Image","fluid","src","process","color","ConcentrationContainerInfo","NavBarInfo","flush","SemesterTableInfo","HandleHowToDisplay","HowToDisplay","setShow","currDisplay","setCurrDisplay","handleClose","Container","className","href","rel","MainPage","deleteTriggered","setDeleteTriggered","setTimeout","undefined","slice","e","assign","onDragEnd","Navbar","expand","Brand","Collapse","Nav","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","err","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.91fa3424.chunk.js","sourcesContent":["import { Modal, Toast } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: { display: boolean }): JSX.Element =>\n    <Modal show={props.display}>\n        <Modal.Header>\n            <Modal.Title>\n                Welcome to the Course App!\n            </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            Here you can drag and drop courses into your schedule,\n            and also concentrations are available to select from the dropdown as well!\n        </Modal.Body>\n        <Modal.Footer>\n            <small>Created by Kurt, Luke, and Cameron!</small>\n        </Modal.Footer>\n    </Modal>;\n\n\nexport const PreReqSameSemesterToast = (props: { errMsg: string; display: boolean }): JSX.Element =>\n    <Toast bg=\"danger\" show={props.display} >\n        <Toast.Header>\n            <strong className=\"me-auto\">Invalid Course Selected</strong>\n            <small>Close</small>\n        </Toast.Header>\n        <Toast.Body>\n            {props.errMsg}\n        </Toast.Body>\n    </Toast>;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string; ind: number }): JSX.Element =>\n    <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n        {prov =>\n            <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n        }\n    </Draggable>;\n","import React, { useState } from \"react\";\nimport { Modal, Button, Badge, Row, Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\nexport const EditCourse = (props: {\n    display: boolean;\n    setDisplay: React.Dispatch<React.SetStateAction<boolean>>;\n    course: CourseType;\n    semesterNumber: number;\n    semesterCourses: SemesterType[];\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>;\n}): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    const [titleText, setTitleText] = useState(props.course.title);\n    const [descText, setDescText] = useState(props.course.description);\n    const setDisplay = (): boolean => {\n        props.setDisplay(false);\n        return props.display;\n    };\n    const courseEdit = () => {\n        props.setDisplay(!props.display);\n        const tmpSemesters: SemesterType[] = props.semesterCourses;\n        let tmpSemester: SemesterType = tmpSemesters[0];\n        let ind1 = -1;\n        for (let i = 0; i < tmpSemesters.length; i += 1) {\n            if (tmpSemesters[i].semesternum === props.semesterNumber) {\n                // found semester\n                tmpSemester = tmpSemesters.splice(i, 1)[0];\n                ind1 = i;\n                break;\n            }\n        }\n        for (const eachcourse of tmpSemester.courses) {\n            if (eachcourse.name === props.course.name) {\n                eachcourse.name = nameText;\n                eachcourse.title = titleText;\n                eachcourse.description = descText;\n            }\n        }\n        tmpSemesters.splice(ind1, 0, tmpSemester);\n        props.setSemesterCourses([...tmpSemesters]);\n    };\n    return (\n        <Modal onHide={() => setDisplay()} show={props.display} >\n            <Modal.Header closeButton>\n                <Modal.Title>\n                    <Badge bg=\"primary\">Edit Course Details</Badge>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col>\n                        Enter name here:\n                    </Col>\n                    <Col>\n                        <input\n                            onChange={elem => {\n                                setNameText(elem.target.value);\n                            }}\n                            placeholder=\"Enter Course Name\"\n                            type=\"textbox\"\n                            value={nameText}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        Enter Title here:\n                    </Col>\n                    <Col>\n                        <input\n                            onChange={elem => {\n                                setTitleText(elem.target.value);\n                            }}\n                            placeholder=\"Enter Course Title\"\n                            type=\"textbox\"\n                            value={titleText}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        Enter description here:\n                    </Col>\n                    <Col>\n                        <form>\n                            <textarea rows={10} cols={45}\n                                onChange={elem => {\n                                    setDescText(elem.target.value);\n                                }}\n                                placeholder=\"Enter Course Description\"\n                                value={descText}\n                            ></textarea>\n                        </form>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{ display: \"block\", textAlign: \"center\" }}>\n                <Button onClick={courseEdit} variant=\"outline-primary\" >Submit Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Table, ListGroup, Accordion, Col, Button, Row, Badge } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: {\n    ind: number;\n    semesterCourses: SemesterType[];\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>;\n}): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [credits, setCredits] = useState<number>(0);\n\n    const courseDeleteFunc = (elem: CourseType): string => {\n        const tmpCourses: CourseType[] = [...courses];\n        for (let i = 0; i < tmpCourses.length; i += 1) {\n            const theCourse: CourseType = tmpCourses[i];\n            if (theCourse.name === elem.name) {\n                // found course\n                tmpCourses.splice(i, 1);\n            }\n        }\n        setCourses([...tmpCourses]);\n        const tmpSemesters: SemesterType[] = props.semesterCourses;\n        let tmpSemester: SemesterType = tmpSemesters[0];\n        for (let i = 0; i < tmpSemesters.length; i += 1) {\n            tmpSemester = tmpSemesters[i];\n            if (tmpSemester.semesternum === props.ind + 1) {\n                // found semester\n                tmpSemester = tmpSemesters.splice(i, 1)[0];\n                tmpSemester.courses = [...tmpCourses];\n                tmpSemester.courseSetter([...tmpCourses]);\n                tmpSemesters.splice(i, 0, tmpSemester);\n                props.setSemesterCourses([...tmpSemesters]);\n                return elem.name;\n            }\n        }\n\n        return elem.name;\n    };\n\n    const semesterDeleteFunc = () => {\n\n        const tmpSemesterCourses = [...props.semesterCourses];\n\n        let theSemester = tmpSemesterCourses[0];\n\n        let ind1 = 0;\n\n        for (let i = 0; i < tmpSemesterCourses.length; i += 1) {\n\n            if (tmpSemesterCourses[i].semesternum === props.ind + 1) {\n                // found semester\n                ind1 = i;\n                theSemester = tmpSemesterCourses.splice(i, 1)[0];\n                break;\n            }\n        }\n        theSemester.courses = [];\n        theSemester.courseSetter([]);\n        tmpSemesterCourses.splice(ind1, 0, theSemester);\n        props.setSemesterCourses([...tmpSemesterCourses]);\n    };\n\n    useEffect(() => {\n\n        // console.log(\"rendering semester\");\n        if (!props.semesterCourses.find(elem => elem.semesternum === props.ind + 1)) {\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({ courseSetter: (newCourses: CourseType[]) => {\n                setCourses(newCourses);\n            }, courses, semesternum: props.ind + 1 });\n            props.setSemesterCourses(semesters);\n        }\n    }, []);\n\n    const getCredits = (courses: CourseType[]) => {\n        // console.log(\"inside getCredits\");\n        // console.log(courses);\n        const tmpCourses: CourseType[] = courses;\n        let count = 0;\n        for (const eachCourse of tmpCourses) {\n            count += eachCourse.credits;\n        }\n        setCredits(count);\n    };\n\n    useEffect(() => {\n        console.log(\"----courses are now----\");\n        console.log(courses);\n        // verify that course you are trying to add is not a prereq of course in current semester\n        getCredits(courses);\n\n    }, [courses]);\n\n    return (\n        <Accordion defaultActiveKey=\"0\" key={`accordion ${props.ind}`} >\n            <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>\n                    <Col xs={2}>\n                        {`Semester ${props.ind + 1}`}\n                    </Col>\n                    <Col>\n                        <Button onClick={semesterDeleteFunc} variant=\"danger\" />\n                    </Col>\n                    <Col>\n                        <Badge>\n                            {`Credits: ${credits}`}\n                        </Badge>\n                    </Col>\n                </Accordion.Header>\n                <Accordion.Body>\n                    <Col key={`semester-table-col-${props.ind}`}>\n                        <Droppable droppableId={`semester-table-${props.ind + 1}`}>\n                            {(prov: DroppableProvided) =>\n                                <Table key={`semester-table-table-${props.ind}`}>\n                                    <thead>\n                                        <tr>\n                                            <td>{`${getSemesterStr(props.ind + 1)}`}</td>\n                                        </tr>\n                                    </thead>\n                                    <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                                        <tr>\n                                            <td>\n                                                <ListGroup>\n                                                    {\n                                                        courses.map((elem: CourseType, index: number) =>\n                                                            <ListGroup.Item key={elem.name}>\n                                                                <Row>\n                                                                    <Col>\n                                                                        <Course ind={index} name={`${elem.name}-${elem.section}`} />\n                                                                    </Col>\n                                                                    <Col lg=\"1\" xs>\n                                                                        <Button\n                                                                            onClick={() => {\n                                                                                courseDeleteFunc(elem);\n                                                                            }}\n                                                                            variant=\"danger\"\n                                                                        />\n                                                                        <Button\n                                                                            onClick={() => {\n                                                                                setDisplay(!display);\n                                                                            }} variant=\"warning\"\n                                                                        />\n                                                                        {display &&\n                                                                        <EditCourse\n                                                                            course={elem} display={display}\n                                                                            semesterCourses={props.semesterCourses}\n                                                                            semesterNumber={props.ind + 1}\n                                                                            setDisplay={setDisplay}\n                                                                            setSemesterCourses={\n                                                                                props.setSemesterCourses\n                                                                            }\n                                                                        />\n                                                                        }\n                                                                    </Col>\n                                                                </Row>\n                                                            </ListGroup.Item>,\n                                                        )\n                                                    }\n                                                </ListGroup>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            }\n                        </Droppable>\n                    </Col>\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    );\n\n\n};\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number;\n        semestersCourses: SemesterType[];\n        setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>;\n    }): JSX.Element =>\n    <div>\n        {\n            new Array(props.semesters).fill(0)\n                .map((elem, ind) => <Semester ind={ind} key={`semester-table-key-${elem}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />)\n        }\n    </div>;\n","import { NavDropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport const DropdownMenu = (props: {\n        setConcentration: React.Dispatch<React.SetStateAction<Concentration>>;\n        semesterCourses: SemesterType[];\n        setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>;\n    }): JSX.Element => {\n\n    const clickFunc = (ind: number) => {\n\n        const tmpSemesterCourses = [...props.semesterCourses];\n\n        for (let i = 0; i < tmpSemesterCourses.length; i += 1) {\n\n            const tmpSemester = tmpSemesterCourses.splice(i, 1)[0];\n            tmpSemester.courses = [];\n            tmpSemester.courseSetter([]);\n            tmpSemesterCourses.splice(i, 0, tmpSemester);\n\n        }\n        props.setSemesterCourses([...tmpSemesterCourses]);\n\n        props.setConcentration(CONCENTRATIONS[ind]);\n\n    };\n\n    return (\n        <div>\n            <NavDropdown id=\"basic-navbar-nav\" title=\"Concentrations\" >\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(0);\n                    }}\n                >AI and Robotics\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(1);\n                    }}\n                >\n                    Bioinformatics\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(2);\n                    }}\n                >\n                    Cybersecurity\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(3);\n                    }}\n                >\n                    Data Science\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(4);\n                    }}\n                >\n                    High-Performance Computing\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(5);\n                    }}\n                >\n                    Networks and Systems\n                </NavDropdown.Item>\n\n\n                <NavDropdown.Item\n                    as=\"button\"\n                    onClick={() => {\n                        clickFunc(6);\n                    }}\n                >\n                    Theory\n                </NavDropdown.Item>\n\n            </NavDropdown>\n        </div>\n    );\n};\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[]; name: string }): JSX.Element =>\n    <Droppable droppableId={props.name}>\n        {prov =>\n            <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                {props.courses.map((elem: CourseType, index: number) => <Course ind={index} key={elem.name} name={`${elem.name}-${elem.section}`} />)}\n                {prov.placeholder}\n            </ListGroup>\n        }\n    </Droppable>;\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\n\nexport const AIConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,\n        setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,\n        setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,\n        setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,\n        setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].lab));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstone1Courses,\n                    name: \"capstone-1\",\n                    setCourses: setCapstone1Courses,\n\n                },\n                {\n                    courses: general1Courses,\n                    name: \"general-1\",\n                    setCourses: setGeneral1Courses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: capstone2Courses,\n                    name: \"capstone-2\",\n                    setCourses: setCapstone2Courses,\n                },\n                {\n                    courses: general2Courses,\n                    name: \"general-2\",\n                    setCourses: setGeneral2Courses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"elective\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab\",\n                    setCourses: setLabCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n\n    return (\n        <div>\n            <h2>Artificial Intelligence and Robotics</h2>\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>CISC Core and Concentration</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstone1Courses} name=\"capstone-1\" />\n                        <CourseContainer courses={general1Courses} name=\"general-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>Two-Course Lab Sequence</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>Writing Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>Statistics Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={capstone2Courses} name=\"capstone-2\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>Systems Course</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={general2Courses} name=\"general-2\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n                    <Accordion.Header>Electives(Select Four)</Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={electiveCourses} name=\"elective\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n            </Accordion>\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const BioConc = (props: { StringsToCourses: (\n        stringCourses: string[]) => CourseType[];\n        setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].lab));\n    const [ochemCourses,\n        setOchemCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.ochem));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.elective));\n    const [dataCourses,\n        setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.data));\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"electives\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: dataCourses,\n                    name: \"data science\",\n                    setCourses: setDataCourses,\n                },\n                {\n                    courses: ochemCourses,\n                    name: \"ochem\",\n                    setCourses: setOchemCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n\n    return (\n        <div>\n            <h2>Bioinformatics</h2>\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Chem Sequence\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Organic Chem Sequence\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={ochemCourses} name=\"ochem-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        Writing Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        One Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={statCourses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        One Data Analysis Course\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={dataCourses} name=\"data\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"6\">\n\n                    <Accordion.Header>\n                        Two Electives\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={electiveCourses} name=\"electives\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n            </Accordion>\n\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\n\nexport const DataScienceConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].writing));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].lab));\n    const [dataCourses,\n        setDataCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].conc.data));\n    const [mathCourses,\n        setMathCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].conc.stats));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(\n            CONCENTRATIONS[3].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"electives\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: dataCourses,\n                    name: \"data science\",\n                    setCourses: setDataCourses,\n                },\n                {\n                    courses: mathCourses,\n                    name: \"math\",\n                    setCourses: setMathCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n    return (\n        <div>\n            <h2>Data Science</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Data Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={dataCourses} name=\"datascience\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        One Advanced Math\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={mathCourses} name=\"math\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        One Elective\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={electiveCourses} name=\"electives\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n\n            </Accordion>\n\n\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const HPCConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].writing));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].lab));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.stats));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.elective));\n    const [mathCourses,\n        setMathCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.data));\n    const [dataCourses,\n        setDataCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.track));\n    const [learningCourses,\n        setLearningCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.cybersecurity));\n    const [dataTrackCourses,\n        setDataTrackCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[4].conc.ochem));\n    useEffect(() => {\n        props.setConcentrationContainers(\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stats\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"elective\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: mathCourses,\n                    name: \"math\",\n                    setCourses: setMathCourses,\n                },\n                {\n                    courses: dataCourses,\n                    name: \"data\",\n                    setCourses: setDataCourses,\n                },\n                { courses: learningCourses, name: \"machine learning\", setCourses: setLearningCourses },\n                { courses: dataTrackCourses, name: \"data track\", setCourses: setDataTrackCourses },\n            ],\n        );\n    }, []);\n\n    return (\n        <div>\n            <h2>High-Performance Computing</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n\n                    <Accordion.Header>\n                        Choose one of the tracks\n                    </Accordion.Header>\n                    <Accordion.Body>\n\n                        <Accordion>\n\n                            <Accordion.Item eventKey=\"4\">\n\n                                <Accordion.Header>\n                                    Applied Math\n                                </Accordion.Header>\n                                <Accordion.Body>\n\n                                    <CourseContainer courses={electiveCourses} name=\"elective\" />\n                                    <CourseContainer courses={mathCourses} name=\"math\" />\n                                    <CourseContainer courses={statCourses} name=\"stat\" />\n\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n                            <Accordion.Item eventKey=\"5\">\n\n                                <Accordion.Header>\n                                    Data Track\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={dataCourses} name=\"dataCourses\" />\n                                    <CourseContainer courses={dataTrackCourses} name=\"dataTrack\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                        </Accordion>\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"6\">\n\n                    <Accordion.Header>\n                        One Machine Learning\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={learningCourses} name=\"machineLearningCourses\" />\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n            </Accordion>\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const NetworksConc = (props:\n        { StringsToCourses: (stringCourses: string[]) => CourseType[];\n        setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].lab));\n    const [secCourses,\n        setSecCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.cybersecurity));\n    const [systemsCourses,\n        setSystemsCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.systems));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: secCourses,\n                    name: \"security\",\n                    setCourses: setSecCourses,\n                },\n                {\n                    courses: systemsCourses,\n                    name: \"systems\",\n                    setCourses: setSystemsCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"electives\",\n                    setCourses: setElectiveCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n    return (\n        <div>\n            <h2>Networks and Systems</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={statCourses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        One Security Math\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={secCourses} name=\"security\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        Two Systems Courses\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={systemsCourses} name=\"systems\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"6\">\n\n                    <Accordion.Header>\n                        Two Electives\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n                        <CourseContainer courses={electiveCourses} name=\"electives\" />\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n            </Accordion>\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const SecurityConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].lab));\n    const [electiveCourses,\n        setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.elective));\n    const [secCourses,\n        setSecCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.cybersecurity));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: electiveCourses,\n                    name: \"electives\",\n                    setCourses: setElectiveCourses,\n                },\n                {\n                    courses: secCourses,\n                    name: \"cybersecurity\",\n                    setCourses: setSecCourses,\n                },\n\n            ],\n\n        );\n    }, []);\n    return (\n        <div>\n            <h2>Cybersecurity</h2>\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={statCourses} name=\"stats\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"4\">\n                    <Accordion.Header>\n                        Two Advanced Requirements\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={secCourses} name=\"security\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"5\">\n\n                    <Accordion.Header>\n                        Two Electives\n                    </Accordion.Header>\n\n                    <Accordion.Body>\n\n                        <CourseContainer courses={electiveCourses} name=\"electives\" />\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n\n            </Accordion>\n\n\n        </div>\n    );\n};\n","import { Accordion } from \"react-bootstrap\";\nimport CONCENTRATIONS from \"../../../json/concentrations.json\";\nimport { CourseContainer } from \"../CourseContainer\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport React, { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const TheoryConc = (props: {\n    StringsToCourses: (stringCourses: string[]) => CourseType[];\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n    const [coreCourses,\n        setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses,\n        setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,\n        setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses,\n        setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses,\n        setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n    const [labCourses,\n        setLabCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].lab));\n    const [discCourses,\n        setDiscCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.track));\n    const [contCourses,\n        setContCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.cybersecurity));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [\n                {\n                    courses: coreCourses,\n                    name: \"core\",\n                    setCourses: setCoreCourses,\n                },\n                {\n                    courses: capstoneCourses,\n                    name: \"capstone\",\n                    setCourses: setCapstoneCourses,\n\n                },\n                {\n                    courses: generalCourses,\n                    name: \"general\",\n                    setCourses: setGeneralCourses,\n                },\n                {\n                    courses: writingCourses,\n                    name: \"writing\",\n                    setCourses: setWritingCourses,\n                },\n                {\n                    courses: statCourses,\n                    name: \"stat\",\n                    setCourses: setStatCourses,\n                },\n                {\n                    courses: labCourses,\n                    name: \"lab\",\n                    setCourses: setLabCourses,\n                },\n                {\n                    courses: discCourses,\n                    name: \"discTrack\",\n                    setCourses: setDiscCourses,\n                },\n                {\n                    courses: contCourses,\n                    name: \"contTrack\",\n                    setCourses: setContCourses,\n                },\n            ],\n        );\n    }, []);\n    return (\n        <div>\n            <h2>Theory</h2>\n\n            <Accordion defaultActiveKey=\"8\">\n\n                <Accordion.Item eventKey=\"0\">\n                    <Accordion.Header>\n                        CISC Core and Concentration\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={coreCourses} name=\"core\" />\n                        <CourseContainer courses={capstoneCourses} name=\"capstone\" />\n                        <CourseContainer courses={generalCourses} name=\"general\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"1\">\n                    <Accordion.Header>\n                        Two Lab Courses\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={labCourses} name=\"lab-1\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n                <Accordion.Item eventKey=\"2\">\n                    <Accordion.Header>\n                        One Writing\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={writingCourses} name=\"writing\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"3\">\n                    <Accordion.Header>\n                        One Statistics Course\n                    </Accordion.Header>\n                    <Accordion.Body>\n                        <CourseContainer courses={statCourses} name=\"stat\" />\n                    </Accordion.Body>\n                </Accordion.Item>\n\n\n                <Accordion.Item eventKey=\"4\">\n\n                    <Accordion.Header>\n                        Select One of the Four-Course Tracks\n                    </Accordion.Header>\n                    <Accordion.Body>\n\n                        <Accordion>\n\n                            <Accordion.Item eventKey=\"5\">\n\n                                <Accordion.Header>\n                                    Discrete\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={discCourses} name=\"discrete\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                            <Accordion.Item eventKey=\"6\">\n\n                                <Accordion.Header>\n                                    Continuous\n                                </Accordion.Header>\n                                <Accordion.Body>\n                                    <CourseContainer courses={contCourses} name=\"continuous\" />\n                                </Accordion.Body>\n\n                            </Accordion.Item>\n\n                        </Accordion>\n\n                    </Accordion.Body>\n\n                </Accordion.Item>\n\n\n            </Accordion>\n\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc } from \"./concentrations/AIConc\";\nimport { BioConc } from \"./concentrations/BioConc\";\nimport { DataScienceConc } from \"./concentrations/DataScienceConc\";\nimport { HPCConc } from \"./concentrations/HPCConc\";\nimport { NetworksConc } from \"./concentrations/NetworksConc\";\nimport { SecurityConc } from \"./concentrations/SecurityConc\";\nimport { TheoryConc } from \"./concentrations/TheoryConc\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport const DisplayCourseList = (props: {\n        concentration: Concentration;\n        setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>;\n    }): JSX.Element => {\n\n    function StringsToCourses(stringCourses: string[]): CourseType[] {\n        /** Takes a list of strings, and returns a list of courses by looking in courses.json for matching names.\n         *  Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n        const allCourses = COURSES as CourseType[];\n        const tmparr: CourseType[] = stringCourses.map(elem => [...allCourses.filter(i => i.name === elem)]).flat(2);\n        return tmparr;\n    }\n\n    if (props.concentration === CONCENTRATIONS[0]) {\n        return (\n            <AIConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[1]) {\n        return (\n            <BioConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[2]) {\n        return (\n            <SecurityConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[3]) {\n        return (\n            <DataScienceConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[4]) {\n        return (\n            <HPCConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[5]) {\n        return (\n            <NetworksConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } else if (props.concentration === CONCENTRATIONS[6]) {\n        return (\n            <TheoryConc\n                StringsToCourses={StringsToCourses}\n                setConcentrationContainers={props.setConcentrationContainers}\n            />\n        );\n    } return <div />;\n};\n","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: {\n        setSemesters: React.Dispatch<React.SetStateAction<number>>;\n        semesters: number;\n    }): JSX.Element =>\n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }} >Add Semester</Button>;\n","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const DeleteSemesterButton = (props: {\n        setSemesters: React.Dispatch<React.SetStateAction<number>>;\n        semesters: number;\n        setDelete: React.Dispatch<React.SetStateAction<number>>;\n    }): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n        \n        let tmpSemesters = props.semesters;\n        if (tmpSemesters > 0) {\n            --tmpSemesters;\n        }\n        props.setSemesters(tmpSemesters);\n        props.setDelete(0);\n\n    }}>Delete Last Semester</Button>;","import { SemesterType } from \"../../../interfaces/semester\";\n\nexport const semesterToSemester = (\n    semester: SemesterType,\n    semester2: SemesterType,\n    spliceInd: number,\n    dropInd: number,\n    diffSemester: boolean,\n): number => {\n    console.log(\"in semester ---> semester\");\n    if (diffSemester) {\n        const splicedCourse = semester.courses.splice(spliceInd, 1)[0];\n        semester2.courses.splice(dropInd, 0, splicedCourse);\n        semester.courseSetter([...semester.courses]);\n        semester2.courseSetter([...semester2.courses]);\n    } else {\n        const splicedCourse = semester.courses.splice(spliceInd, 1)[0];\n        semester.courses.splice(dropInd, 0, splicedCourse);\n        semester.courseSetter([...semester.courses]);\n    }\n    return 1;\n};\n","import React from \"react\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\n\nexport const concentrationToConcentration = (\n    result: DropResult,\n    concContainers: ConcentrationContainerType[],\n    concContainer: ConcentrationContainerType,\n    spliceInd: number,\n    courseSpliceInd: number,\n    dropInd: number,\n    setConcContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>,\n    isDifferent: boolean,\n): number => {\n    console.log(\"in concentration ---> concentration\");\n    const ind2 = isDifferent ?\n        concContainers.findIndex(elem => elem.name === result.destination?.droppableId) : -1;\n    if (ind2 === -1) { /* Case if we are dropping within the same _exact_ container such as core --> core */\n        const tmpConcContainerCourse = concContainer.courses.splice(courseSpliceInd, 1)[0];\n        concContainer.courses.splice(dropInd, 0, tmpConcContainerCourse);\n        concContainer.setCourses([...concContainer.courses]);/* may be able to delete this line */\n        concContainers.splice(spliceInd, 0, concContainer);/* may not have to deal with splicing, and direct reference the index like above with the implementation of semester --> concentration */\n        setConcContainers(concContainers);\n    } else if (ind2 !== -1) { /* Case if we are dropping within the concentration containers, but different containers, such as core --> elective */\n        const diffContainer = concContainers[ind2];\n        const tmpConcContainerCourseDrag = concContainer.courses.splice(courseSpliceInd, 1)[0];\n        concContainer.setCourses([...concContainer.courses]);// update courses we just spliced from\n        diffContainer.courses.splice(dropInd, 0, tmpConcContainerCourseDrag);\n        diffContainer.setCourses([...diffContainer.courses]);\n    }\n    return 1;\n};\n","import React from \"react\";\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { semesterToSemester } from \"./DNDLogic/semesterToSemester\";\nimport { semesterToConcentration } from \"./DNDLogic/semesterToConcentration\";\nimport { concentrationToConcentration } from \"./DNDLogic/concentrationToConcentration\";\nimport { concentrationToSemester } from \"./DNDLogic/concentrationToSemester\";\n\nexport const successPrint = (result: number): void => {\n    console.log(result >= 1 ? \"Success!\" : \"Failure\");\n};\n\nexport const onDragEndLogic = (result: DropResult,\n    concentrationContainers: ConcentrationContainerType[],\n    setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>,\n    semesterCourses: SemesterType[],\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>): void => {\n    if (!result.destination) {\n        return;\n    }\n    /*\n    If where you are dropping TO is a semester\n    */\n    const sourceId = result.source.droppableId;\n    const destinationId = result.destination.droppableId;\n    const sourceIdSemester = sourceId.includes(\"semester-table\");\n    const destIdSemester = destinationId.includes(\"semester-table\");\n    const sourceIndex = result.source.index;\n    const dropIndex = result.destination.index;\n    if (sourceId === destinationId) {\n        // check if both are semester table, if not then conc container\n        if (sourceIdSemester) {\n            // semestertable --> semestertable\n            const semesterNum1 = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n            const ind1 = semesterCourses.findIndex(elem => elem.semesternum === semesterNum1);\n            semesterToSemester(\n                semesterCourses[ind1],\n                semesterCourses[ind1],\n                result.source.index,\n                result.destination.index,\n                false);\n        } else {\n            // concentration --> concentration\n            const tmpContainer: ConcentrationContainerType[] = [...concentrationContainers];\n            let ind1 = tmpContainer.findIndex(elem => elem.name === destinationId);\n            ind1 = sourceId === destinationId ?\n                concentrationToConcentration(result,\n                    concentrationContainers,\n                    concentrationContainers.splice(ind1, 1)[0],\n                    ind1, sourceIndex, dropIndex, setConcentrationContainers, false) :\n                concentrationToConcentration(result,\n                    concentrationContainers,\n                    concentrationContainers.splice(ind1, 1)[0],\n                    ind1, sourceIndex, dropIndex, setConcentrationContainers, true);\n            successPrint(ind1);\n        }\n    } else if (sourceIdSemester) { // semester --> concentration\n    // dropId != destinationId\n        const semesterNum = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\") + 1), 10);\n        const ind1 = semesterCourses.findIndex(elem => elem.semesternum === semesterNum);\n        let ind2 = destIdSemester ? parseInt(destinationId.substring(destinationId.lastIndexOf(\"-\") + 1), 10) : concentrationContainers.findIndex(elem => elem.name === destinationId);\n        ind2 = destIdSemester ?\n            semesterToSemester(\n                semesterCourses[ind1],\n                semesterCourses[ind2],\n                sourceIndex, dropIndex, true) :\n            semesterToConcentration(concentrationContainers,\n                ind2,\n                result.source.index,\n                setConcentrationContainers,\n                semesterCourses, setSemesterCourses, ind1, result.destination.index);\n        successPrint(ind2);\n    } else {\n        // concentration --> semester\n        const semesterNum = parseInt(destinationId.substring(destinationId.lastIndexOf(\"-\") + 1), 10);\n        const tmpContainer: ConcentrationContainerType[] = [...concentrationContainers];\n        let ind1 = tmpContainer.findIndex(elem => elem.name === sourceId);\n        const ind2 = semesterCourses.findIndex(elem => elem.semesternum === semesterNum);\n        ind1 = ind1 > -1 ?\n            concentrationToSemester(\n                concentrationContainers[ind1],\n                result.source.index,\n                result.destination.index,\n                semesterCourses[ind2],\n            ) : -1;\n        console.log(Object.values(semesterCourses));\n        successPrint(ind1);\n    }\n};\n","import React from \"react\";\nimport { SemesterType } from \"../../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const semesterToConcentration = (\n    concContainers: ConcentrationContainerType[],\n    concentrationInd: number,\n    courseSpliceInd: number,\n    setConcContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>,\n    semesterCourses: SemesterType[],\n    setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>>,\n    semesterInd: number,\n    courseDropInd: number,\n): number => {\n    console.log(\"in semester ---> concentration\");\n    const theCourse: CourseType = semesterCourses[semesterInd].courses.splice(courseSpliceInd, 1)[0];\n    semesterCourses[semesterInd].courses = [...semesterCourses[semesterInd].courses];/* may be able to delete this line*/\n    semesterCourses[semesterInd].courseSetter([...semesterCourses[semesterInd].courses]);/* may be able to delete this line*/\n    setSemesterCourses([...semesterCourses]);\n    concContainers[concentrationInd].courses.splice(courseDropInd, 0, theCourse);\n    concContainers[concentrationInd].courses = [...concContainers[concentrationInd].courses];/* may be able to delete this line */\n    concContainers[concentrationInd].setCourses([...concContainers[concentrationInd].courses]);/* may be able to delete this line */\n    setConcContainers([...concContainers]);\n    return 1;\n};\n","import { SemesterType } from \"../../../interfaces/semester\";\nimport { ConcentrationContainerType } from \"../../../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../../../interfaces/course\";\n\nexport const concentrationToSemester = (\n    concContainer: ConcentrationContainerType,\n    spliceInd: number,\n    dropInd: number,\n    droppingSemester: SemesterType,\n): number => {\n    console.log(\"in concentration --> semester\");\n    const theCourse: CourseType = concContainer.courses.splice(spliceInd, 1)[0];\n    concContainer.setCourses([...concContainer.courses]); /*  Optional line - may be able to remove  */\n    droppingSemester.courses.splice(dropInd, 0, theCourse);\n    droppingSemester.courseSetter([...droppingSemester.courses]); /* Optional line - may be able to remove */\n    return 1;\n};\n","import React from \"react\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { Button } from \"react-bootstrap\";\n\nexport const ExportPlan = (props: { semesterCourses: SemesterType[] }): JSX.Element => {\n    const data: string[][] = [[\"Semester\", \"Course\", \"Credits\"]];\n\n    return (\n        <Button\n            onClick={() => {\n                for (let i = 0; i < props.semesterCourses.length; i += 1) {\n                    const courses = props.semesterCourses[i].courses;\n                    const semesterNum = (i + 1).toString();\n                    for (const eachcourse of courses) {\n                        const courseName = eachcourse.name;\n                        const credits = eachcourse.credits.toString();\n                        data.push([semesterNum, courseName, credits]);\n                    }\n                }\n                const csvContent = `data:text/csv;charset=utf-8,${data.map(elem => elem.join(\",\")).join(\"\\n\")}`;\n\n                const encodedUri = encodeURI(csvContent);\n                const link = document.createElement(\"a\");\n                link.setAttribute(\"href\", encodedUri);\n                link.setAttribute(\"download\", \"my_course_plan.csv\");\n                document.body.appendChild(link);\n                link.click();\n            }}\n            variant=\"outline-secondary\"\n        >\n            Export CSV\n        </Button>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const HowToDropDown = ({ setDisplay }: { setDisplay: React.Dispatch<React.SetStateAction<number>> }): JSX.Element =>\n    <Dropdown>\n        <Dropdown.Toggle id=\"dropdown-basic\" variant=\"success\">\n            Help Menu\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(1);\n                }}\n            >\n                Application Layout\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(2);\n                }}\n            >\n                Navbar\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(3);\n                }}\n            >\n                Concentration Table\n            </Dropdown.Item>\n            <Dropdown.Item\n                onClick={() => {\n                    setDisplay(4);\n                }}\n            >\n                Semester Table\n            </Dropdown.Item>\n        </Dropdown.Menu>\n    </Dropdown>;\n","import { Modal, Dropdown } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const HowToNavigation = (): JSX.Element =>\n\n    <Modal.Body>\n        How to navigate the help menu:\n        <ul>\n            <li>\n                There is a dropdown menu that looks like this:\n                <Dropdown>\n                    <Dropdown.Toggle id=\"dropdown-basic\" variant=\"outline-success\">\n                        Help Menu\n                    </Dropdown.Toggle>\n                </Dropdown>\n                This dropdown is used to access all of the help menu options\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WholeAppInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/wholeapp.PNG`} />\n        <ul>\n            <li>\n                The <b style={{ color: \"red\" }}>red box</b> is the navbar, which contains links to useful resources (such as course registration/lookup and also undergrad information about concentrations/courses)\n            </li>\n            <li>\n                The <b style={{ color: \"green\" }}>green box</b> is where the concentration requirements are stored, the name of the concentration above. In this example, the name is <b>Artificial Intelligence and Robotics</b>, to access the individual courses of each concentration requirement category, click on the category and a dropdown list of courses you can drag into the blue box appear.\n            </li>\n            <li>\n                The <b style={{ color: \"blue\" }}>blue box</b> is where your semester courses will be. To enter courses into your semester, simply drag them from the concentration requirements(that is the <b style={{ color: \"green\" }}>green box</b>) into the semester box (that is the <b style={{ color: \"blue\" }}>blue box</b>)\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const ConcentrationContainerInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/concentrationguide.gif`} />\n        <ul>\n            <li>\n                Each concentration requirement is able to be clicked on to then expand\n                and reveal a lot of courses you can select from that fit into the requirement for the concentration.\n            </li>\n            <li>\n                These courses can then be dragged and dropped into the semester to plan out your semesters!\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image, Accordion } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const NavBarInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/navbarguide.gif`} />\n        <ul>\n            <li>\n                This navbar contains a plethora of options for each student.\n                <ul>\n                    <Accordion flush>\n                        <Accordion.Item eventKey=\"1\">\n                            <Accordion.Header>\n                                Categories\n                            </Accordion.Header>\n                            <Accordion.Body>\n                                <Accordion flush>\n                                    <Accordion.Item eventKey=\"2\">\n                                        <Accordion.Header>Useful Links</Accordion.Header>\n                                        <Accordion.Body>\n                                            The <em>Useful links</em> menu contains links such as course search,\n                                            list of undergrad courses, and registration add/drop,\n                                            as well as the link to uds computer science student guidance department\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"3\">\n                                        <Accordion.Header>\n                                            Concentrations\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The <em>Concentrations</em> menu contains\n                                                all the different CISC concentrations\n                                                you can select from,\n                                                and adjusts the courses you can choose from accordingly\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"4\">\n                                        <Accordion.Header>\n                                            Add Semester\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The button works as when it is clicked,\n                                                another semester appears beneath the current one\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                    <Accordion.Item eventKey=\"5\">\n                                        <Accordion.Header>\n                                            Export CSV\n                                        </Accordion.Header>\n                                        <Accordion.Body>\n                                                The export csv button works as when it is clicked,\n                                                a CSV file containing all the semester information\n                                                is saved onto your computer.\n                                        </Accordion.Body>\n                                    </Accordion.Item>\n                                </Accordion>\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                </ul>\n            </li>\n        </ul>\n    </Modal.Body>;\n","import { Modal, Image } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const SemesterTableInfo = (): JSX.Element =>\n\n    <Modal.Body>\n        <Image fluid src={`${process.env.PUBLIC_URL}/howtoimgs/semesterguide.gif`} />\n        <ul>\n            <li>\n                Each semester comprises of: The Semester it is,\n                meaning 1st semester 2nd etc., the red button, and the credits display.\n                The semester can be toggled on and off to display the courses within it.\n            </li>\n            <li>\n                <ul>\n                    <li>Red button</li>\n                    <ul>\n                        <li>\n                            The red button works as, if you press it and there are courses\n                            in your semester, it deletes all the courses within the semester.\n                        </li>\n                    </ul>\n                    <li>\n                        Course buttons\n                        <ul>\n                            When courses are moved into a semester,\n                            two buttons appear, one that is red, and one that is yellow.\n                            The red button is to delete that single\n                            course from the semester, and the yellow button is to edit the name of\n                            that course.\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </Modal.Body>;\n","import React from \"react\";\nimport { HowToNavigation } from \"../howtosteps/howtonavigation\";\nimport { WholeAppInfo } from \"../howtosteps/wholeappinfo\";\nimport { ConcentrationContainerInfo } from \"../howtosteps/howtoconcentrationcontainer\";\nimport { NavBarInfo } from \"../howtosteps/howtonavbar\";\nimport { SemesterTableInfo } from \"../howtosteps/howtosemestertable\";\n\nexport const HandleHowToDisplay = (display: number): JSX.Element => {\n\n    switch (display) {\n\n    case 0:\n        return <HowToNavigation />;\n    case 1:\n        return <WholeAppInfo />;\n    case 2:\n        return <NavBarInfo />;\n    case 3:\n        return <ConcentrationContainerInfo />;\n    case 4:\n        return <SemesterTableInfo />;\n    default:\n        return <div />;\n\n    }\n\n};\n","import { Button, Modal, Row, Col, Container } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\nimport { HowToDropDown } from \"./howtodropdown/howtodropdown\";\nimport { HandleHowToDisplay } from \"./howtodropdown/howtodropdownlogic\";\n\nexport const HowToDisplay = (): JSX.Element => {\n\n    const [show,\n        setShow] = useState<boolean>(false);\n    const handleShow = () => {\n        setShow(true);\n    };\n    const [currDisplay,\n        setCurrDisplay] = useState<number>(0);\n    const handleClose = () => {\n        setCurrDisplay(0);\n        setShow(false);\n    };\n\n    return (\n\n        <>\n            <Button onClick={handleShow} variant=\"outline-success\">\n                How To\n            </Button>\n            <Modal onHide={handleClose} show={show}>\n                <Modal.Header closeButton>\n                    <Container>\n                        <Row style={{ textAlign: \"center\" }}>\n                            <Col>\n                                <Modal.Title>\n                                    How to use our app!\n                                </Modal.Title>\n                            </Col>\n                        </Row>\n                        <br />\n                        <br />\n                        <Row style={{ textAlign: \"left\" }}>\n                            <Col>\n                                <HowToDropDown setDisplay={setCurrDisplay} />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Modal.Header>\n                {HandleHowToDisplay(currDisplay)}\n                <Modal.Footer>\n                    <Button onClick={handleClose} variant=\"outline-danger\">\n                        Close\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n\n    );\n\n};\n","import React from \"react\";\n\nexport const Footer = (): JSX.Element =>{\n    return (\n        <div className=\"footer\">\n            <hr></hr>\n            <p>Created by Kurt Hammen, Luke Halko, and Cameron Thacker. Made 2021. Check out \n                <a href=\"https://github.com/UD-CISC275-F21/ud-cis-scheduler-team-4\" target=\"_blank\" rel=\"noopener noreferrer\"> our repository.</a>\n            </p>\n        </div>\n    );\n};\n\n//github repository\n//see what other people have\n//\n","import \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { Container, Row, Col, Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport { DropdownMenu } from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { DeleteSemesterButton } from \"./semesters/DeleteSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { onDragEndLogic } from \"./util/DropLogic\";\nimport { ExportPlan } from \"./util/ExportPlan\";\nimport { HowToDisplay } from \"./util/howto/howtodisplay\";\nimport { Footer } from \"./util/Footer\";\n\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]);\n    //const [toastDisplay, setToastDisplay] = useState<boolean>(false); //Will be implemented once basic drop logic is fully implemented\n    //const [toastMessage, setToastMessage] = useState<string>(\"\"); //Will be implemented once basic drop logic is fully implemented\n    const [deleteTriggered, setDeleteTriggered] = useState<number>(-1);\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        }, 5000);\n    }, []);\n\n    useEffect(() => {\n\n        console.log(\"Deleting semester\");\n        if (deleteTriggered === 0) {\n            console.log(\"Inside delete semester if\");\n            const theSemester: SemesterType | undefined = semesterCourses.length > 0? semesterCourses[0]: undefined;\n            if (theSemester !== undefined) {\n                // delete semester\n                theSemester.courseSetter([]);\n                setSemesterCourses(semesterCourses.slice(1).map(e => Object.assign({}, e, {semesterNum: e.semesternum-1})));\n            }\n            setDeleteTriggered(-1);\n        }\n\n    }, [semesters]);\n\n    /*\n    const displayToast = (msg: string) => {\n        setToastDisplay(true);\n        setToastMessage(msg);\n        setTimeout(() => {\n            setToastDisplay(false);\n        }, 5000);\n    };\n    */\n    \n\n    const onDragEnd = (result: DropResult) => {\n        onDragEndLogic(result,\n            concentrationContainers,\n            setConcentrationContainers,\n            semesterCourses,\n            setSemesterCourses); // onDragEndLogic(result, concentrationContainers, setConcentrationContainers, semesterCourses, setSemesterCourses, displayToast);\n    };\n\n    return (\n        <>\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            >\n                <Container>\n                    <br />\n                    <Row>\n                        <Col>\n                            {<WelcomeToast display={display}/>}\n                            { /* <PreReqSameSemesterToast errMsg={toastMessage} display={toastDisplay} /> */}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Navbar bg=\"light\" expand=\"lg\" data-testid=\"navbar\">\n                            <Container>\n                                <Navbar.Brand href=\"#home\">UDCIS Course Scheduler</Navbar.Brand>\n                                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                                <Navbar.Collapse id=\"basic-navbar-nav\">\n                                    <Nav className=\"me-auto\">\n                                        <NavDropdown title=\"Useful Links\" id=\"basic-navbar-nav\" data-testid=\"navbardropdown\">\n                                            <NavDropdown.Item href=\"https://udapps.nss.udel.edu/CoursesSearch/\" data-testid=\"navdropdownitem1\">Course Search</NavDropdown.Item>\n                                            <NavDropdown.Item href=\"https://www.cis.udel.edu/academics/undergraduate-programs/resources/courses/\" data-testid=\"navdropdownitem2\">CISC Undergraduate Courses</NavDropdown.Item>\n                                            <NavDropdown.Item href=\"https://webreg.nss.udel.edu/registration/schedule/\" data-testid=\"navdropdownitem3\">Registration Add/Drop</NavDropdown.Item>\n                                            <NavDropdown.Item href=\"https://ud-cis-teaching.github.io/student-guidance/\" data-testid=\"navdropdownitem4\">UD CIS Student Guidance</NavDropdown.Item>\n                                        </NavDropdown>\n                                        <DropdownMenu setConcentration={setConcentration} semesterCourses={semesterCourses} setSemesterCourses={setSemesterCourses}></DropdownMenu>\n                                        <AddSemesterButton setSemesters={setSemesters} semesters={semesters}/>\n                                        <ExportPlan semesterCourses={semesterCourses}/>\n                                        <HowToDisplay/>\n                                        <DeleteSemesterButton setSemesters={setSemesters} semesters={semesters} setDelete={setDeleteTriggered} />\n                                    </Nav>\n                                </Navbar.Collapse>\n                            </Container>\n                        </Navbar>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <br/>\n                            <DisplayCourseList concentration={concentration} setConcentrationContainers={setConcentrationContainers} ></DisplayCourseList>\n                        </Col>\n                        <Col>\n                            <br/>\n                            <br/>\n                            <br/>\n                            <br/>\n                            <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Footer/>\n                    </Row>\n                </Container>\n            </DragDropContext>\n        </>\n    );\n};\n","import React from \"react\";\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nexport const App = (): JSX.Element =>\n    <div className=\"App\">\n        <MainPage />\n    </div>;\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\n            /* webpackChunkName: \"web-vitals\" */\n            \"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        })\n            .catch(err => err as string);\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}