{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","getSemesterStr","semesterNum","Semester","useState","courses","setCourses","func1","console","log","forEach","e","Object","values","useEffect","semesterCourses","find","semesternum","semesters","push","courseSetter","setSemesterCourses","Col","droppableId","Table","droppableProps","map","i","Row","section","xs","lg","Button","variant","onClick","tmpCourses","length","splice","tmpSemesters","tmpSemester","SemesterTable","Array","fill","elem","Accordion","defaultActiveKey","eventKey","semestersCourses","DropdownMenu","setConcentration","Dropdown","Toggle","id","Menu","as","CONCENTRATIONS","CourseContainer","placeholder","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","SecurityConc","DataScienceConc","HPCConc","NetworksConc","TheoryConc","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","setSemesters","MainPage","setDisplay","concentrationContainers","setTimeout","entries","onDragEnd","result","destination","includes","source","parseInt","substring","lastIndexOf","theCourse","semesterNum1Id","semesterNum2Id","semesterNum1","semesterNum2","oneFound","twoFound","semester1","semester2","ind1","ind2","theSemester","semester1Courses","sourceCourse","semester2Courses","tmpConcentrationContainers","tmpContainer","tmpConcCourses","tmpConcCourse","tmpSemesterCourses","semesterDropId","semesterNumber","tmpSemesterCourses2","sourceId","tmpConcContainers","tmpConcContainer","tmpConcContainerCourses","tmpConcContainer1","tmpConcContainer2","tmpConc1Courses","tmpConc2Courses","tmpConc1Course","Container","Badge","bg","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.045f5560.chunk.js","sourcesContent":["import { Modal } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, ListGroup } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Col, Button, Row } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: { ind: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n\n    const func1 = (courses: CourseType[]) => {\n\n        console.log(\"---calling func1 with---\");\n        courses.forEach(e => console.log(Object.values(e)));\n        setCourses(courses);\n\n    };\n\n    useEffect(() => {\n\n        console.log(\"rendering semester\");\n        if(!props.semesterCourses.find(e => e.semesternum == props.ind+1)){\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({semesternum: props.ind+1, courses: courses, courseSetter: func1});\n            props.setSemesterCourses(semesters);\n            //console.log(semesters);\n        }\n\n    }, []);\n\n    useEffect(() => {\n\n        console.log(\"setter changed!\");\n\n    },[setCourses]);\n\n    useEffect(() => {\n\n        console.log(\"----courses are now----\");\n        courses.forEach(e => console.log(Object.values(e)));\n\n    }, [courses]);\n\n    return(\n        <Col key={`semester-table-col-${props.ind}`}>\n            <Droppable droppableId={`semester-table-${props.ind+1}`}>\n                {(prov: DroppableProvided) =>\n                    <Table key={`semester-table-table-${props.ind}`}>\n                        <thead>\n                            <tr>\n                                <td>{`${getSemesterStr(props.ind+1)}`}</td>\n                            </tr>\n                        </thead>\n                        <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                            <tr>\n                                <td>\n                                    <ListGroup>\n                                        {\n                                            courses.map((e, i) =>\n                                                <>\n                                                    <ListGroup.Item key={i}>\n                                                        <Row>\n                                                            <Col>\n                                                                <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                            </Col>\n                                                            <Col xs lg=\"1\">\n                                                                <Button variant=\"danger\" onClick={() => {\n                                                                    const tmpCourses: CourseType[] = [...courses];\n                                                                    for(let i = 0; i < tmpCourses.length; i++){\n                                                                        const theCourse: CourseType = tmpCourses[i];\n                                                                        if(theCourse.name === e.name){\n                                                                            // found course\n                                                                            tmpCourses.splice(i,1);\n                                                                        }\n                                                                    }\n                                                                    setCourses([...tmpCourses]);\n                                                                    const tmpSemesters: SemesterType[] = props.semesterCourses;\n                                                                    let tmpSemester: SemesterType = tmpSemesters[0];\n                                                                    for(let i = 0; i < tmpSemesters.length; i++){\n                                                                        tmpSemester = tmpSemesters[i];\n                                                                        if(tmpSemester.semesternum === props.ind+1){\n                                                                            // found semester\n                                                                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                                                                            tmpSemester.courses = [...tmpCourses];\n                                                                            tmpSemester.courseSetter([...tmpCourses]);\n                                                                            tmpSemesters.splice(i,0,tmpSemester);\n                                                                            props.setSemesterCourses([...tmpSemesters]);\n                                                                            return e.name;\n                                                                        }\n                                                                    }\n\n                                                                    return e.name;\n                                                                }}></Button>\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                </>\n                                            )\n                                        }\n                                    </ListGroup>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                }\n            </Droppable>\n        </Col>\n    );\n\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { Accordion } from \"react-bootstrap\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number, semestersCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n\n    return(\n        <>\n            {\n                new Array(props.semesters).fill(0).map((elem, ind) =>\n                    <Accordion key={`accordion ${ind}`} defaultActiveKey=\"0\">\n                        <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header>{`Semester ${ind+1}`}</Accordion.Header>\n                            <Accordion.Body>\n                                <Semester ind={ind} key={`semester-table-key-${ind}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                )\n            }\n        </>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu({setConcentration}:\n    {setConcentration: (concentration:Concentration)=>void}): JSX.Element{\n    \n    return <div>\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Concentrations:\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[0])}>AI and Robotics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[1])}>Bioinformatics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[2])}>Cybersecurity</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[3])}>Data Science</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[4])}>High-Performance Computing</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[5])}>Networks and Systems</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[6])}>Theory</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[], name: string}): JSX.Element => {\n\n    return(\n        <>\n            <Droppable droppableId={props.name}>\n                {(prov) =>\n                    <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                        {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                        {prov.placeholder}\n                    </ListGroup>\n                }\n            </Droppable>\n        </>\n    );\n};","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport function AIConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>} ): JSX.Element{\n    \n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone-1\",\n                    \"courses\": capstone1Courses,\n                    \"setCourses\": setCapstone1Courses\n\n                },\n                {\n                    \"name\": \"general-1\",\n                    \"courses\": general1Courses,\n                    \"setCourses\": setGeneral1Courses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"capstone-2\",\n                    \"courses\": capstone2Courses,\n                    \"setCourses\": setCapstone2Courses\n                },\n                {\n                    \"name\": \"general-2\",\n                    \"courses\": general2Courses,\n                    \"setCourses\": setGeneral2Courses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                }\n\n            ]\n\n        );\n    },[]);\n\n    return<div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name={\"core\"}  />\n        <CourseContainer courses={capstone1Courses} name={\"capstone-1\"} />\n        <CourseContainer courses={general1Courses} name={\"general-1\"} />\n        <p>Choose One Lab Sequence: (Needs fixing)</p>\n        \n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name={\"writing\"} />\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={capstone2Courses} name={\"capstone-2\"} />\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={general2Courses} name={\"general-2\"} />\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={electiveCourses} name={\"elective\"} />\n    </div>;\n}\n\nexport function BioConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n\n    return(\n        <div>\n            <h2>Bioinformatics</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Chem Sequence:</p>\n            <p>Choose One Organic Chem Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Data Analysis Course:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function SecurityConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n   \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Cybersecurity</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stats\"/>\n            <p>Select Two Advanced Reqs:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function DataScienceConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].writing));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n\n            ]\n\n        );\n    }, []);\n    \n    return<div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <p>Select One Advanced Data Science:</p>\n        <p>Select One Advanced Math:</p>\n        <p>Select One of the Following:</p>\n    </div>;\n}\n\nexport function HPCConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    \n    useEffect(() => {\n\n        props.setConcentrationContainers(\n\n            [\n\n                {\n\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n\n                }\n\n            ]\n\n        );\n    \n    },[]);\n\n\n    return<div>\n        <p>Come back and figure this one out later</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n    </div>;\n}\n\nexport function NetworksConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    \n    return(\n        <div>\n            <h2>Networks and Systems</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Security Requirement:</p>\n            <p>Select Two Systems Requirements:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n\nexport function TheoryConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Theory</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One of the Following Tracks:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport function DisplayCourseList(props: {concentration: Concentration, setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>> }): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n\n        const allCourses = COURSES as CourseType[];\n\n        const tmparr: CourseType[] = stringCourses.map(e => [...allCourses.filter(i => i.name == e)]).flat(2);\n\n        return tmparr;\n\n    }\n\n    if (props.concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></AIConc>;\n    } else if (props.concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></BioConc>;\n    } else if (props.concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers} ></SecurityConc>;\n    } else if (props.concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></DataScienceConc>;\n    } else if (props.concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></HPCConc>;\n    } else if (props.concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></NetworksConc>;\n    } else if (props.concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: { setSemesters: React.Dispatch<React.SetStateAction<number>>, semesters: number}): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }}>Add Semester</Button>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../interfaces/course\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]); // is initialized to the first concentration container, contains all of the parts of the concentration, outlined in the comment below\n    /*\n\n    {\n\n        \"name\": \"core\" <--- what part of the concentration it is\n        courses: [] <--- the courses in the part\n        setCourses: [] <--- the way to update the courses in the part when we drag into the semester\n\n    }\n\n\n    */\n\n    // maybe make an object like indexes are the semesters so {1: [\"CISC101\",\"CISC106\"]}\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },1);\n    },[]);  \n\n    useEffect(() => {\n\n        console.log(\"edited semesterCourses from MainPage.tsx\");\n        semesterCourses.forEach(e => console.log(Object.entries(e)));\n\n    },[semesterCourses]);\n\n    const onDragEnd = (result: DropResult) => {\n        console.log(semesterCourses);\n        console.log(result);\n        console.log(concentrationContainers);\n\n        if (!result.destination) {\n            return;\n        }if(result.destination.droppableId.includes(\"semester-table\")){\n            \n            if(!result.source.droppableId.includes(\"semester-table\")){\n\n                console.log(\"from conc container\");\n\n                const tmpConcentrationContainers = [...concentrationContainers];\n\n                let tmpContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n                let ind1 = -1;\n                for(let i = 0; i < concentrationContainers.length; i++){ // finding container , ex: core, capstone\n\n                    if(concentrationContainers[i].name === result.source.droppableId){\n                        tmpContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses = tmpContainer.courses;\n                const tmpConcCourse = tmpConcCourses.splice(result.source.index,1)[0];\n                tmpContainer.setCourses(tmpConcCourses);\n                tmpConcentrationContainers.splice(ind1,0,tmpContainer)[0];\n                setConcentrationContainers(tmpConcentrationContainers);\n                \n                // move spliced course to semester table\n                // get semester number from id\n                const tmpSemesterCourses = [...semesterCourses];\n                const semesterDropId = result.destination.droppableId;\n                const semesterNumber = parseInt(semesterDropId.substring(semesterDropId.lastIndexOf(\"-\")+1));\n                let tmpSemester: SemesterType = [...tmpSemesterCourses][0];\n                let ind2 = -1;\n                for(let i = 0; i < semesterCourses.length; i++){\n\n                    if(semesterCourses[i].semesternum == semesterNumber){\n                        tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n                \n                const tmpSemesterCourses2 = [...tmpSemester.courses]; \n                if(tmpSemesterCourses2.length === 0){\n                    tmpSemesterCourses2.push(tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n                } else{\n\n                    tmpSemesterCourses2.splice(result.destination.index,0,tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n\n                }\n            } else if(result.source.droppableId === result.destination.droppableId){\n\n                // dropping in same table\n                console.log(\"dropping in same table\");\n\n                if(result.source.droppableId.includes(\"semester-table\")){\n                    \n                    console.log(\"within same semester table\");\n\n                    const semesterNum = parseInt(result.source.droppableId.substring(result.source.droppableId.lastIndexOf(\"-\")+1));\n\n                    const tmpSemesters: SemesterType[] = [...semesterCourses];\n                    \n                    let tmpSemester: SemesterType = tmpSemesters[0];\n\n                    let ind = 0;\n\n                    for(let i = 0; i < tmpSemesters.length; i++){\n\n                        if(tmpSemesters[i].semesternum == semesterNum){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind = i;\n                            break;\n                        }\n\n                    }\n\n                    console.log(Object.entries(tmpSemester));\n\n                    const courses: CourseType[] = [...tmpSemester.courses];\n                    console.log(\"----before any splicing----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    const theCourse: CourseType = courses.splice(result.source.index,1)[0]; // gets 108\n                    console.log(`---spliced course--- : ${Object.values(theCourse)}`);\n                    console.log(\"----before----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    courses.splice(result.destination.index,0,theCourse);\n                    console.log(\"----after----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemester.courseSetter([...courses]);\n                    tmpSemester.courses = [...courses];\n                    console.log(\"----after setting----\");\n                    tmpSemester.courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemesters.splice(ind,0,tmpSemester);\n                    console.log(\"----before setting semesters----\");\n                    setSemesterCourses(tmpSemesters);\n\n                }\n\n\n\n            } else if(result.source.droppableId.includes(\"semester-table\") && result.destination.droppableId.includes(\"semester-table\")){\n\n                // dropping from one semester table to the next\n\n                console.log(\"semestertable --> semestertable\");\n\n                const semesterNum1Id = result.source.droppableId;\n                const semesterNum2Id = result.destination.droppableId;\n\n                //console.log(`semesterNum1Id = ${semesterNum1Id}`);\n                //console.log(`semesterNum2Id = ${semesterNum2Id}`);\n\n                const semesterNum1 = parseInt(semesterNum1Id.substring(semesterNum1Id.lastIndexOf(\"-\")+1));\n\n                const semesterNum2 = parseInt(semesterNum2Id.substring(semesterNum2Id.lastIndexOf(\"-\")+1));\n\n                // got the numbers of semester1 and semester2\n\n                const tmpSemesters = [...semesterCourses];\n\n                let oneFound = false;\n                let twoFound = false;\n                let semester1 = tmpSemesters[0];\n                let semester2 = tmpSemesters[0];\n                //console.log(`semester1# = ${semesterNum1}`);\n                //console.log(`semester2# = ${semesterNum2}`);\n\n                let i = 0;\n\n                let ind1 = 0;\n                let ind2 = 0;\n\n                for(i = 0; !oneFound || !twoFound ;){\n\n                    const theSemester = tmpSemesters[i];\n                    if(theSemester){\n                        //console.log(`the semester = ${Object.entries(theSemester)}, onefound = ${oneFound} and twofound = ${twoFound}, semesterstatus = ${theSemester === null || theSemester == undefined}`);\n                    } else{\n                        //console.log(\"semester is null\");\n                    }\n\n\n                    if(oneFound && twoFound){\n                        break;\n                    } else if(!oneFound && theSemester.semesternum == semesterNum1){\n                        //console.log(\"splicing first semester\");\n                        oneFound = true;\n                        semester1 = tmpSemesters.splice(i,1)[0];\n                        ind1 = i;\n                        i = 0;\n                        continue;\n                    } else if(!twoFound && theSemester.semesternum == semesterNum2){\n                        //console.log(\"splicing second semester\");\n                        twoFound = true;\n                        semester2 = tmpSemesters.splice(i,1)[0];\n                        ind2 = i;\n                        i = 0;\n                        continue;\n                    } else{\n                        i++;\n                    }\n                    //console.log(\"else\");\n                    //console.log(Object.values(tmpSemesters));\n\n                }\n\n                // got both semesters\n\n                // splice from source\n\n                const semester1Courses: CourseType[] = [...semester1.courses];\n                const sourceCourse = semester1Courses.splice(result.source.index,1)[0];\n                semester1.courseSetter(semester1Courses);\n                semester1.courses = [...semester1Courses];\n\n                const semester2Courses: CourseType[] = [...semester2.courses];\n                semester2Courses.splice(result.destination.index,0,sourceCourse);\n                semester2.courses = [...semester2Courses];\n                semester2.courseSetter([...semester2Courses]);\n\n                tmpSemesters.splice(ind1,0,semester1);\n                tmpSemesters.splice(ind2,0,semester2);\n                setSemesterCourses(tmpSemesters);\n\n            }\n        } else{\n\n            if ( result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\") ) {\n                \n                const tmpSemesters: SemesterType[] = [...semesterCourses];\n\n                const sourceId: string = result.source.droppableId;\n                const semesterNum: number = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\")));\n                let tmpSemester: SemesterType = tmpSemesters[0];\n                let ind = -1;\n\n                for(let i = 0; i < tmpSemesters.length; i++){\n\n                    if(tmpSemesters[i].semesternum === semesterNum){\n                        // found semester\n                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                        ind = i;\n                        break;\n                    }\n\n                }\n\n                const tmpSemesterCourses: CourseType[] = [...tmpSemester.courses];\n                const theCourse: CourseType = tmpSemesterCourses.splice(result.source.index,1)[0];\n\n                tmpSemester.courses = [...tmpSemesterCourses];\n                tmpSemester.courseSetter([...tmpSemesterCourses]);\n\n                tmpSemesters.splice(ind,0,tmpSemester);\n\n                setSemesterCourses(tmpSemesters);\n\n                // semester updated\n\n\n                const tmpConcContainers = [...concentrationContainers];\n\n                let tmpConcContainer: ConcentrationContainerType = tmpConcContainers[0];\n\n                let ind2 = -1;\n\n                for(let i = 0; i < tmpConcContainers.length; i++){\n\n                    if(tmpConcContainers[i].name === result.destination.droppableId){\n                        // found concentration container\n                        tmpConcContainer = tmpConcContainers.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcContainerCourses = [...tmpConcContainer.courses];\n\n                tmpConcContainerCourses.splice(result.destination.index,0,theCourse);\n\n                tmpConcContainer.courses = [...tmpConcContainerCourses];\n                \n                tmpConcContainer.setCourses([...tmpConcContainerCourses]);\n\n                // found concentration container\n\n                tmpConcContainers.splice(ind2,0,tmpConcContainer);\n\n                setConcentrationContainers(tmpConcContainers);\n\n\n\n\n            } else if(result.source.droppableId !== result.destination.droppableId && !result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\")){\n                // dropping from core --> language for instance\n                const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n                let tmpConcContainer1: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let tmpConcContainer2: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let ind1 = -1;\n\n                let ind2 = -1;\n\n                for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                    if(ind1 !== -1 && ind2 !== -1){\n                        break;\n                    } else if(tmpConcentrationContainers[i].name == result.source.droppableId){\n                        tmpConcContainer1 = tmpConcentrationContainers[i];\n                        ind1 = i;\n                        continue;\n                    } else if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                        tmpConcContainer2 = tmpConcentrationContainers[i];\n                        ind2 = i;\n                        continue;\n                    }\n\n                }\n\n                const tmpConc1Courses: CourseType[] = [...tmpConcContainer1.courses];\n\n                const tmpConc2Courses: CourseType[] = [...tmpConcContainer2.courses];\n\n                const tmpConc1Course: CourseType = tmpConc1Courses.splice(result.source.index,1)[0];\n\n                tmpConcContainer1.courses = [...tmpConc1Courses];\n\n                tmpConcContainer1.setCourses([...tmpConc1Courses]);\n\n                tmpConc2Courses.splice(result.destination.index,0,tmpConc1Course);\n\n                tmpConcContainer2.courses = [...tmpConc2Courses];\n\n                tmpConcContainer2.setCourses([...tmpConc2Courses]);\n\n                tmpConcentrationContainers.splice(ind1,0,tmpConcContainer1);\n\n                tmpConcentrationContainers.splice(ind2,0,tmpConcContainer2);\n\n                setConcentrationContainers([...tmpConcentrationContainers]);\n\n            } else {\n\n                console.log(\"container --> container\");\n\n                const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n                let tmpConcContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let ind1 = -1;\n                \n                for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                    if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                        // found container\n                        tmpConcContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses: CourseType[] = [...tmpConcContainer.courses];\n\n                const tmpConcCourse: CourseType = tmpConcCourses.splice(result.source.index,1)[0];\n\n                // spliced course, now place course\n\n                tmpConcCourses.splice(result.destination.index,0,tmpConcCourse);\n\n                tmpConcContainer.courses = tmpConcCourses;\n\n                tmpConcContainer.setCourses([...tmpConcCourses]);\n\n                tmpConcentrationContainers.splice(ind1,0,tmpConcContainer);\n\n                setConcentrationContainers(tmpConcentrationContainers);\n\n            }\n\n        }\n    };\n\n    return (\n        <>\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            >\n                <Container>\n                    <br />\n                    <Row>\n                        <Col>\n                            {<WelcomeToast display={display}/>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Badge bg=\"primary\"><h1>Course Scheduler</h1></Badge>\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <DropdownMenu setConcentration={setConcentration}></DropdownMenu>\n                                </Col>\n                            </Row>\n                            <br />\n                            <Row>\n                                <Col>\n                                    <AddSemesterButton setSemesters={setSemesters} semesters={semesters} />\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            <DisplayCourseList concentration={concentration} setConcentrationContainers={setConcentrationContainers} ></DisplayCourseList>\n                        </Col>\n                        <Col>\n                            <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </DragDropContext>\n        </>\n    );\n};\n","import React from \"react\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}