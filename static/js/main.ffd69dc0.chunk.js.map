{"version":3,"sources":["components/util/Notifications.tsx","components/courses/Course.tsx","components/util/EditCourse.tsx","components/semesters/Semester.tsx","components/semesters/SemesterTable.tsx","components/util/DropdownMenu.tsx","components/courses/CourseContainer.tsx","components/courses/CourseLists.tsx","components/courses/DisplayCourseList.tsx","components/semesters/AddSemesterButton.tsx","components/MainPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WelcomeToast","props","Modal","show","display","Header","Title","Body","Footer","Course","draggableId","name","index","ind","prov","ListGroup","Item","ref","innerRef","draggableProps","dragHandleProps","EditCourse","useState","course","nameText","setNameText","Row","Col","style","textAlign","Badge","bg","placeholder","type","value","onChange","e","target","Button","variant","onClick","setDisplay","tmpSemesters","semesterCourses","tmpSemester","ind1","i","length","semesternum","semesterNumber","splice","courses","setSemesterCourses","getSemesterStr","semesterNum","Semester","setCourses","func1","console","log","forEach","Object","values","useEffect","find","semesters","push","courseSetter","droppableId","Table","droppableProps","map","section","xs","lg","tmpCourses","SemesterTable","Array","fill","elem","Accordion","defaultActiveKey","eventKey","semestersCourses","DropdownMenu","setConcentration","Dropdown","Toggle","id","Menu","as","CONCENTRATIONS","CourseContainer","AIConc","StringsToCourses","core","coreCourses","setCoreCourses","capstone","capstone1Courses","setCapstone1Courses","conc","general","general1Courses","setGeneral1Courses","writing","writingCourses","setWritingCourses","stats","capstone2Courses","setCapstone2Courses","systems","general2Courses","setGeneral2Courses","elective","electiveCourses","setElectiveCourses","setConcentrationContainers","BioConc","capstoneCourses","setCapstoneCourses","generalCourses","setGeneralCourses","statCourses","setStatCourses","SecurityConc","DataScienceConc","HPCConc","NetworksConc","TheoryConc","DisplayCourseList","stringCourses","allCourses","COURSES","filter","flat","concentration","AddSemesterButton","setSemesters","MainPage","concentrationContainers","setTimeout","entries","onDragEnd","result","destination","includes","source","parseInt","substring","lastIndexOf","theCourse","semesterNum1Id","semesterNum2Id","semesterNum1","semesterNum2","oneFound","twoFound","semester1","semester2","ind2","theSemester","semester1Courses","sourceCourse","semester2Courses","tmpConcentrationContainers","tmpContainer","tmpConcCourses","tmpConcCourse","tmpSemesterCourses","semesterDropId","tmpSemesterCourses2","sourceId","tmpConcContainers","tmpConcContainer","tmpConcContainerCourses","tmpConcContainer1","tmpConcContainer2","tmpConc1Courses","tmpConc2Courses","tmpConc1Course","Container","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffd69dc0.chunk.js","sourcesContent":["import { Modal } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const WelcomeToast = (props: {display: boolean }): JSX.Element =>\n    <>\n        <Modal show={props.display}>\n            <Modal.Header>\n                <Modal.Title>\n                    Welcome to the Course App!\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Here you can drag and drop courses into your schedule, and also concentrations are available to select from the dropdown as well!</Modal.Body>\n            <Modal.Footer>\n                <small>Created by Kurt, Luke, and Cameron!</small>\n            </Modal.Footer>\n        </Modal>\n    </>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\n\nexport const Course = (props: { name: string, ind: number }): JSX.Element =>\n    <>\n        <Draggable draggableId={props.name} index={props.ind} key={props.name}>\n            {(prov) => \n                <>\n                    <ListGroup.Item ref={prov.innerRef} {...prov.draggableProps} {...prov.dragHandleProps}>{`${props.name}`}</ListGroup.Item>\n                </>\n            }\n        </Draggable>\n    </>;\n","import React, { useState } from \"react\";\nimport { Modal, Button, Badge, Row, Col } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\n\nexport const EditCourse = (props: {display: boolean, setDisplay: React.Dispatch<React.SetStateAction<boolean>>, course: CourseType, setCourses: React.Dispatch<React.SetStateAction<CourseType[]>>, semesterNumber: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [nameText, setNameText] = useState(props.course.name);\n    return (\n        <Modal show={true}>\n            <Row>\n                <Col>\n                    <Modal.Header style={{ display: \"block\", textAlign: \"center\" }}>\n                        <Modal.Title>\n                            <Badge bg=\"primary\">Edit Course Details</Badge>\n                        </Modal.Title>\n                    </Modal.Header>\n                </Col>\n            </Row>\n            <Modal.Body>\n                <Row>\n                    <Col>\n                        Enter name here:\n                    </Col>\n                    <Col>\n                        <input placeholder=\"Enter Course Name\"type=\"textbox\" value={nameText} \n                            onChange={(e) =>{\n                                setNameText(e.target.value);\n                            }\n                            }/>\n                    </Col>\n                </Row>\n            </Modal.Body>\n            <Modal.Footer style={{ display: \"block\", textAlign: \"center\" }}>\n                <Button variant=\"outline-primary\" onClick={() => {\n                    props.setDisplay(!props.display);\n                    const tmpSemesters: SemesterType[] = props.semesterCourses;\n                    let tmpSemester: SemesterType = tmpSemesters[0];\n                    let ind1 = -1;\n                    for(let i = 0; i < tmpSemesters.length; i++){\n                        if(tmpSemesters[i].semesternum === props.semesterNumber){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind1 = i;\n                            break;\n                        }\n                    }\n                    for(let i=0;i<tmpSemester.courses.length;i++){\n                        if(tmpSemester.courses[i].name===props.course.name){\n                            //found course\n                            tmpSemester.courses[i].name = nameText;\n                        }\n                    }\n                    tmpSemesters.splice(ind1,0,tmpSemester);\n                    props.setSemesterCourses([...tmpSemesters]);\n                }}>Submit Changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Table, ListGroup } from \"react-bootstrap\";\nimport React, { useState, useEffect } from \"react\";\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\nimport { Course } from \"../courses/Course\";\nimport { Col, Button, Row } from \"react-bootstrap\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { EditCourse } from \"../util/EditCourse\";\n\n/*\n\n    @param : integer - semester number\n    @return : Returns string representing semester\n\n*/\n\nexport const getSemesterStr = (semesterNum: number): string => {\n    switch (semesterNum % 10) {\n    case 1:\n        return `${semesterNum}st`;\n    case 2:\n        return `${semesterNum}nd`;\n    case 3:\n        return `${semesterNum}rd`;\n    default:\n        return `${semesterNum}th`;\n    }\n};\n\nexport const Semester = (props: { ind: number, semesterCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n    const [courses, setCourses] = useState<CourseType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n\n    const func1 = (courses: CourseType[]) => {\n\n        console.log(\"---calling func1 with---\");\n        courses.forEach(e => console.log(Object.values(e)));\n        setCourses(courses);\n\n    };\n\n    useEffect(() => {\n\n        console.log(\"rendering semester\");\n        if(!props.semesterCourses.find(e => e.semesternum == props.ind+1)){\n            // not in list\n            const semesters: SemesterType[] = [...props.semesterCourses];\n            semesters.push({semesternum: props.ind+1, courses: courses, courseSetter: func1});\n            props.setSemesterCourses(semesters);\n            //console.log(semesters);\n        }\n\n    }, []);\n\n    useEffect(() => {\n\n        console.log(\"setter changed!\");\n\n    },[setCourses]);\n\n    useEffect(() => {\n\n        console.log(\"----courses are now----\");\n        courses.forEach(e => console.log(Object.values(e)));\n\n    }, [courses]);\n\n    return(\n        <Col key={`semester-table-col-${props.ind}`}>\n            <Droppable droppableId={`semester-table-${props.ind+1}`}>\n                {(prov: DroppableProvided) =>\n                    <Table key={`semester-table-table-${props.ind}`}>\n                        <thead>\n                            <tr>\n                                <td>{`${getSemesterStr(props.ind+1)}`}</td>\n                            </tr>\n                        </thead>\n                        <tbody {...prov.droppableProps} ref={prov.innerRef}>\n                            <tr>\n                                <td>\n                                    <ListGroup>\n                                        {\n                                            courses.map((e, i) =>\n                                                <>\n                                                    <ListGroup.Item key={i}>\n                                                        <Row>\n                                                            <Col>\n                                                                <Course name={`${e.name}-${e.section}`} ind={i}/>\n                                                            </Col>\n                                                            <Col xs lg=\"1\">\n                                                                <Button variant=\"danger\" onClick={() => {\n                                                                    const tmpCourses: CourseType[] = [...courses];\n                                                                    for(let i = 0; i < tmpCourses.length; i++){\n                                                                        const theCourse: CourseType = tmpCourses[i];\n                                                                        if(theCourse.name === e.name){\n                                                                            // found course\n                                                                            tmpCourses.splice(i,1);\n                                                                        }\n                                                                    }\n                                                                    setCourses([...tmpCourses]);\n                                                                    const tmpSemesters: SemesterType[] = props.semesterCourses;\n                                                                    let tmpSemester: SemesterType = tmpSemesters[0];\n                                                                    for(let i = 0; i < tmpSemesters.length; i++){\n                                                                        tmpSemester = tmpSemesters[i];\n                                                                        if(tmpSemester.semesternum === props.ind+1){\n                                                                            // found semester\n                                                                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                                                                            tmpSemester.courses = [...tmpCourses];\n                                                                            tmpSemester.courseSetter([...tmpCourses]);\n                                                                            tmpSemesters.splice(i,0,tmpSemester);\n                                                                            props.setSemesterCourses([...tmpSemesters]);\n                                                                            return e.name;\n                                                                        }\n                                                                    }\n\n                                                                    return e.name;\n                                                                }}></Button>\n                                                                <Button variant=\"warning\" onClick={()=>{\n                                                                    setDisplay(!display);\n                                                                }}>\n                                                                </Button>\n                                                                {display && <EditCourse display={display} setDisplay={setDisplay} course={e} setCourses={setCourses} semesterNumber={props.ind+1} semesterCourses={props.semesterCourses} setSemesterCourses={props.setSemesterCourses} ></EditCourse>}\n                                                            </Col>\n                                                        </Row>\n                                                    </ListGroup.Item>\n                                                </>\n                                            )\n                                        }\n                                    </ListGroup>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                }\n            </Droppable>\n        </Col>\n    );\n\n\n};","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { Semester } from \"./Semester\";\nimport { SemesterType } from \"../../interfaces/semester\";\nimport { Accordion } from \"react-bootstrap\";\n\n/*\n\n    @param - props - object that contains a key of id(number)\n    @return JSX.Element\n\n*/\n\nexport const SemesterTable = (props: { semesters: number, semestersCourses: SemesterType[], setSemesterCourses: React.Dispatch<React.SetStateAction<SemesterType[]>> }): JSX.Element => {\n\n    return(\n        <>\n            {\n                new Array(props.semesters).fill(0).map((elem, ind) =>\n                    <Accordion key={`accordion ${ind}`} defaultActiveKey=\"0\">\n                        <Accordion.Item eventKey=\"0\">\n                            <Accordion.Header>{`Semester ${ind+1}`}</Accordion.Header>\n                            <Accordion.Body>\n                                <Semester ind={ind} key={`semester-table-key-${ind}`} semesterCourses={props.semestersCourses} setSemesterCourses={props.setSemesterCourses} />\n                            </Accordion.Body>\n                        </Accordion.Item>\n                    </Accordion>\n                )\n            }\n        </>\n    );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport React from \"react\";\n\nexport function DropdownMenu({setConcentration}:\n    {setConcentration: (concentration:Concentration)=>void}): JSX.Element{\n    \n    return <div>\n        <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                Concentrations:\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[0])}>AI and Robotics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[1])}>Bioinformatics</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[2])}>Cybersecurity</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[3])}>Data Science</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[4])}>High-Performance Computing</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[5])}>Networks and Systems</Dropdown.Item>\n                <Dropdown.Item as=\"button\" onClick={()=>setConcentration(CONCENTRATIONS[6])}>Theory</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    </div>;\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { Course } from \"./Course\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport React from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\nexport const CourseContainer = (props: { courses: CourseType[], name: string}): JSX.Element => {\n\n    return(\n        <>\n            <Droppable droppableId={props.name}>\n                {(prov) =>\n                    <ListGroup {...prov.droppableProps} ref={prov.innerRef}>\n                        {props.courses.map((e, i) => <Course name={`${e.name}-${e.section}`} ind={i} key={i} />)}\n                        {prov.placeholder}\n                    </ListGroup>\n                }\n            </Droppable>\n        </>\n    );\n};","import React from \"react\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport { Course } from \"../../interfaces/course\";\nimport { CourseContainer } from \"./CourseContainer\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\nimport { useState, useEffect } from \"react\";\nimport { Course as CourseType } from \"../../interfaces/course\";\n\n\nexport function AIConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>} ): JSX.Element{\n    \n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].core));\n    const [capstone1Courses,setCapstone1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].capstone));\n    const [general1Courses,setGeneral1Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.general));\n    const [writingCourses,setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].writing));\n    const [capstone2Courses,setCapstone2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.stats));\n    const [general2Courses,setGeneral2Courses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.systems));\n    const [electiveCourses,setElectiveCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[0].conc.elective));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone-1\",\n                    \"courses\": capstone1Courses,\n                    \"setCourses\": setCapstone1Courses\n\n                },\n                {\n                    \"name\": \"general-1\",\n                    \"courses\": general1Courses,\n                    \"setCourses\": setGeneral1Courses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"capstone-2\",\n                    \"courses\": capstone2Courses,\n                    \"setCourses\": setCapstone2Courses\n                },\n                {\n                    \"name\": \"general-2\",\n                    \"courses\": general2Courses,\n                    \"setCourses\": setGeneral2Courses\n                },\n                {\n                    \"name\": \"elective\",\n                    \"courses\": electiveCourses,\n                    \"setCourses\": setElectiveCourses\n                }\n\n            ]\n\n        );\n    },[]);\n\n    return<div>\n        <h2>Artificial Intelligence and Robotics</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name={\"core\"}  />\n        <CourseContainer courses={capstone1Courses} name={\"capstone-1\"} />\n        <CourseContainer courses={general1Courses} name={\"general-1\"} />\n        <p>Choose One Lab Sequence: (Needs fixing)</p>\n        \n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name={\"writing\"} />\n        <p>Select One Statistics Course:</p>\n        <CourseContainer courses={capstone2Courses} name={\"capstone-2\"} />\n        <p>Select One Systems Course:</p>\n        <CourseContainer courses={general2Courses} name={\"general-2\"} />\n        <p>Select Four from the Following:</p>\n        <CourseContainer courses={electiveCourses} name={\"elective\"} />\n    </div>;\n}\n\nexport function BioConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[1].conc.stats));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n\n    return(\n        <div>\n            <h2>Bioinformatics</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Chem Sequence:</p>\n            <p>Choose One Organic Chem Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Data Analysis Course:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function SecurityConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].conc.stats));\n   \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Cybersecurity</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stats\"/>\n            <p>Select Two Advanced Reqs:</p>\n            <p>Select Two from the Following:</p>\n        </div>\n    );\n}\n\nexport function DataScienceConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[3].writing));\n    \n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n\n            ]\n\n        );\n    }, []);\n    \n    return<div>\n        <h2>Data Science</h2>\n        <p>CISC Core and Concentration:</p>\n        <CourseContainer courses={coreCourses} name=\"core\"/>\n        <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n        <CourseContainer courses={generalCourses} name=\"general\"/>\n        <p>Choose One Lab Sequence:</p>\n        <p>Select One Writing Course:</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n        <p>Select One Advanced Data Science:</p>\n        <p>Select One Advanced Math:</p>\n        <p>Select One of the Following:</p>\n    </div>;\n}\n\nexport function HPCConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[2].writing));\n    \n    useEffect(() => {\n\n        props.setConcentrationContainers(\n\n            [\n\n                {\n\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n\n                }\n\n            ]\n\n        );\n    \n    },[]);\n\n\n    return<div>\n        <p>Come back and figure this one out later</p>\n        <CourseContainer courses={writingCourses} name=\"writing\"/>\n    </div>;\n}\n\nexport function NetworksConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[5].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    \n    return(\n        <div>\n            <h2>Networks and Systems</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One Security Requirement:</p>\n            <p>Select Two Systems Requirements:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n\nexport function TheoryConc(props: {StringsToCourses: (stringCourses:string[]) => Course[], setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>>}): JSX.Element{\n    const [coreCourses, setCoreCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].core));\n    const [capstoneCourses, setCapstoneCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].capstone));\n    const [generalCourses,setGeneralCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.general));\n    const [writingCourses, setWritingCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].writing));\n    const [statCourses, setStatCourses] = useState<CourseType[]>(props.StringsToCourses(CONCENTRATIONS[6].conc.stats));\n\n    useEffect(() => {\n        props.setConcentrationContainers(\n\n            [   \n                {\n                    \"name\": \"core\",\n                    \"courses\": coreCourses,\n                    \"setCourses\": setCoreCourses\n                },\n                {\n                    \"name\": \"capstone\",\n                    \"courses\": capstoneCourses,\n                    \"setCourses\": setCapstoneCourses\n\n                },\n                {\n                    \"name\": \"general\",\n                    \"courses\": generalCourses,\n                    \"setCourses\": setGeneralCourses\n                },\n                {\n                    \"name\": \"writing\",\n                    \"courses\": writingCourses,\n                    \"setCourses\": setWritingCourses\n                },\n                {\n                    \"name\": \"stat\",\n                    \"courses\": statCourses,\n                    \"setCourses\": setStatCourses\n                }\n\n            ]\n\n        );\n    }, []);\n    \n    return(\n        <div>\n            <h2>Theory</h2>\n            <p>CISC Core and Concentration:</p>\n            <CourseContainer courses={coreCourses} name=\"core\"/>\n            <CourseContainer courses={capstoneCourses} name=\"capstone\"/>\n            <CourseContainer courses={generalCourses} name=\"general\"/>\n            <p>Choose One Lab Sequence:</p>\n            <p>Select One Writing Course:</p>\n            <CourseContainer courses={writingCourses} name=\"writing\"/>\n            <p>Select One Statistics Course:</p>\n            <CourseContainer courses={statCourses} name=\"stat\"/>\n            <p>Select One of the Following Tracks:</p>\n            <p>Select Two of the Following:</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Concentration } from \"../../interfaces/concentration\";\nimport { AIConc, BioConc, SecurityConc, DataScienceConc, HPCConc, NetworksConc, TheoryConc } from \"./CourseLists\";\nimport CONCENTRATIONS from \"../../json/concentrations.json\";\nimport COURSES from \"../../json/courses.json\";\nimport { Course as CourseType } from \"../../interfaces/course\";\nimport { ConcentrationContainerType } from \"../../interfaces/concentrationcontainer\";\n\nexport function DisplayCourseList(props: {concentration: Concentration, setConcentrationContainers: React.Dispatch<React.SetStateAction<ConcentrationContainerType[]>> }): JSX.Element{\n\n    function StringsToCourses(stringCourses: string[]): CourseType[]{\n        /**Takes a list of strings, and returns a list of courses by looking in courses.json for matching names. \n         * Will need to be optimized to not be O^n, since it currently just loops through the entire json.\n         */\n\n        const allCourses = COURSES as CourseType[];\n\n        const tmparr: CourseType[] = stringCourses.map(e => [...allCourses.filter(i => i.name == e)]).flat(2);\n\n        return tmparr;\n\n    }\n\n    if (props.concentration==CONCENTRATIONS[0]){\n        return <AIConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></AIConc>;\n    } else if (props.concentration==CONCENTRATIONS[1]){\n        return <BioConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></BioConc>;\n    } else if (props.concentration==CONCENTRATIONS[2]){\n        return <SecurityConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers} ></SecurityConc>;\n    } else if (props.concentration==CONCENTRATIONS[3]){\n        return <DataScienceConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></DataScienceConc>;\n    } else if (props.concentration==CONCENTRATIONS[4]){\n        return <HPCConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></HPCConc>;\n    } else if (props.concentration==CONCENTRATIONS[5]){\n        return <NetworksConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></NetworksConc>;\n    } else if (props.concentration==CONCENTRATIONS[6]){\n        return <TheoryConc StringsToCourses={StringsToCourses} setConcentrationContainers={props.setConcentrationContainers}></TheoryConc>;\n    } else {\n        return <div></div>;\n    }\n}","import { Button } from \"react-bootstrap\";\nimport React from \"react\";\n\nexport const AddSemesterButton = (props: { setSemesters: React.Dispatch<React.SetStateAction<number>>, semesters: number}): JSX.Element => \n\n    <Button variant=\"primary\" onClick={() => {\n\n        let tmpSemesters = props.semesters;\n        ++tmpSemesters;\n        props.setSemesters(tmpSemesters);\n\n    }}>Add Semester</Button>;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, Badge } from \"react-bootstrap\";\nimport { WelcomeToast } from \"./util/Notifications\";\nimport { SemesterTable } from \"./semesters/SemesterTable\";\nimport React, { useState, useEffect } from \"react\";\nimport {DropdownMenu} from \"./util/DropdownMenu\";\nimport { DisplayCourseList } from \"./courses/DisplayCourseList\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { Concentration } from \"../interfaces/concentration\";\nimport CONCENTRATIONS from \"../json/concentrations.json\";\nimport { SemesterType } from \"../interfaces/semester\";\nimport { AddSemesterButton } from \"./semesters/AddSemesterButton\";\nimport { ConcentrationContainerType } from \"../interfaces/concentrationcontainer\";\nimport { Course as CourseType } from \"../interfaces/course\";\n\nexport const MainPage = (): JSX.Element => {\n    const [concentration, setConcentration] = useState<Concentration>(CONCENTRATIONS[0] as Concentration);\n    const [semesterCourses, setSemesterCourses] = useState<SemesterType[]>([]);\n    const [display, setDisplay] = useState<boolean>(false);\n    const [semesters, setSemesters] = useState<number>(1);\n    const [concentrationContainers, setConcentrationContainers] = useState<ConcentrationContainerType[]>([]); // is initialized to the first concentration container, contains all of the parts of the concentration, outlined in the comment below\n    /*\n\n    {\n\n        \"name\": \"core\" <--- what part of the concentration it is\n        courses: [] <--- the courses in the part\n        setCourses: [] <--- the way to update the courses in the part when we drag into the semester\n\n    }\n\n\n    */\n\n    // maybe make an object like indexes are the semesters so {1: [\"CISC101\",\"CISC106\"]}\n\n    useEffect(() => {\n        setDisplay(true);\n        setTimeout(() => {\n            setDisplay(false);\n        },1);\n    },[]);  \n\n    useEffect(() => {\n\n        console.log(\"edited semesterCourses from MainPage.tsx\");\n        semesterCourses.forEach(e => console.log(Object.entries(e)));\n\n    },[semesterCourses]);\n\n    const onDragEnd = (result: DropResult) => {\n        console.log(semesterCourses);\n        console.log(result);\n        console.log(concentrationContainers);\n\n        if (!result.destination) {\n            return;\n        }if(result.destination.droppableId.includes(\"semester-table\")){\n            \n            if(!result.source.droppableId.includes(\"semester-table\")){\n\n                console.log(\"from conc container\");\n\n                const tmpConcentrationContainers = [...concentrationContainers];\n\n                let tmpContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n                let ind1 = -1;\n                for(let i = 0; i < concentrationContainers.length; i++){ // finding container , ex: core, capstone\n\n                    if(concentrationContainers[i].name === result.source.droppableId){\n                        tmpContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses = tmpContainer.courses;\n                const tmpConcCourse = tmpConcCourses.splice(result.source.index,1)[0];\n                tmpContainer.setCourses(tmpConcCourses);\n                tmpConcentrationContainers.splice(ind1,0,tmpContainer)[0];\n                setConcentrationContainers(tmpConcentrationContainers);\n                \n                // move spliced course to semester table\n                // get semester number from id\n                const tmpSemesterCourses = [...semesterCourses];\n                const semesterDropId = result.destination.droppableId;\n                const semesterNumber = parseInt(semesterDropId.substring(semesterDropId.lastIndexOf(\"-\")+1));\n                let tmpSemester: SemesterType = [...tmpSemesterCourses][0];\n                let ind2 = -1;\n                for(let i = 0; i < semesterCourses.length; i++){\n\n                    if(semesterCourses[i].semesternum == semesterNumber){\n                        tmpSemester = tmpSemesterCourses.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n                \n                const tmpSemesterCourses2 = [...tmpSemester.courses]; \n                if(tmpSemesterCourses2.length === 0){\n                    tmpSemesterCourses2.push(tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n                } else{\n\n                    tmpSemesterCourses2.splice(result.destination.index,0,tmpConcCourse);\n                    tmpSemester.courses = tmpSemesterCourses2;\n                    tmpSemester.courseSetter(tmpSemesterCourses2);\n                    tmpSemesterCourses.splice(ind2,0,tmpSemester);\n                    setSemesterCourses(tmpSemesterCourses);\n\n                }\n            } else if(result.source.droppableId === result.destination.droppableId){\n\n                // dropping in same table\n                console.log(\"dropping in same table\");\n\n                if(result.source.droppableId.includes(\"semester-table\")){\n                    \n                    console.log(\"within same semester table\");\n\n                    const semesterNum = parseInt(result.source.droppableId.substring(result.source.droppableId.lastIndexOf(\"-\")+1));\n\n                    const tmpSemesters: SemesterType[] = [...semesterCourses];\n                    \n                    let tmpSemester: SemesterType = tmpSemesters[0];\n\n                    let ind = 0;\n\n                    for(let i = 0; i < tmpSemesters.length; i++){\n\n                        if(tmpSemesters[i].semesternum == semesterNum){\n                            // found semester\n                            tmpSemester = tmpSemesters.splice(i,1)[0];\n                            ind = i;\n                            break;\n                        }\n\n                    }\n\n                    console.log(Object.entries(tmpSemester));\n\n                    const courses: CourseType[] = [...tmpSemester.courses];\n                    console.log(\"----before any splicing----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    const theCourse: CourseType = courses.splice(result.source.index,1)[0]; // gets 108\n                    console.log(`---spliced course--- : ${Object.values(theCourse)}`);\n                    console.log(\"----before----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    courses.splice(result.destination.index,0,theCourse);\n                    console.log(\"----after----\");\n                    courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemester.courseSetter([...courses]);\n                    tmpSemester.courses = [...courses];\n                    console.log(\"----after setting----\");\n                    tmpSemester.courses.forEach(e => console.log(Object.values(e)));\n                    tmpSemesters.splice(ind,0,tmpSemester);\n                    console.log(\"----before setting semesters----\");\n                    setSemesterCourses(tmpSemesters);\n\n                }\n\n\n\n            } else if(result.source.droppableId.includes(\"semester-table\") && result.destination.droppableId.includes(\"semester-table\")){\n\n                // dropping from one semester table to the next\n\n                console.log(\"semestertable --> semestertable\");\n\n                const semesterNum1Id = result.source.droppableId;\n                const semesterNum2Id = result.destination.droppableId;\n\n                //console.log(`semesterNum1Id = ${semesterNum1Id}`);\n                //console.log(`semesterNum2Id = ${semesterNum2Id}`);\n\n                const semesterNum1 = parseInt(semesterNum1Id.substring(semesterNum1Id.lastIndexOf(\"-\")+1));\n\n                const semesterNum2 = parseInt(semesterNum2Id.substring(semesterNum2Id.lastIndexOf(\"-\")+1));\n\n                // got the numbers of semester1 and semester2\n\n                const tmpSemesters = [...semesterCourses];\n\n                let oneFound = false;\n                let twoFound = false;\n                let semester1 = tmpSemesters[0];\n                let semester2 = tmpSemesters[0];\n                //console.log(`semester1# = ${semesterNum1}`);\n                //console.log(`semester2# = ${semesterNum2}`);\n\n                let i = 0;\n\n                let ind1 = 0;\n                let ind2 = 0;\n\n                for(i = 0; !oneFound || !twoFound ;){\n\n                    const theSemester = tmpSemesters[i];\n                    if(theSemester){\n                        //console.log(`the semester = ${Object.entries(theSemester)}, onefound = ${oneFound} and twofound = ${twoFound}, semesterstatus = ${theSemester === null || theSemester == undefined}`);\n                    } else{\n                        //console.log(\"semester is null\");\n                    }\n\n\n                    if(oneFound && twoFound){\n                        break;\n                    } else if(!oneFound && theSemester.semesternum == semesterNum1){\n                        //console.log(\"splicing first semester\");\n                        oneFound = true;\n                        semester1 = tmpSemesters.splice(i,1)[0];\n                        ind1 = i;\n                        i = 0;\n                        continue;\n                    } else if(!twoFound && theSemester.semesternum == semesterNum2){\n                        //console.log(\"splicing second semester\");\n                        twoFound = true;\n                        semester2 = tmpSemesters.splice(i,1)[0];\n                        ind2 = i;\n                        i = 0;\n                        continue;\n                    } else{\n                        i++;\n                    }\n                    //console.log(\"else\");\n                    //console.log(Object.values(tmpSemesters));\n\n                }\n\n                // got both semesters\n\n                // splice from source\n\n                const semester1Courses: CourseType[] = [...semester1.courses];\n                const sourceCourse = semester1Courses.splice(result.source.index,1)[0];\n                semester1.courseSetter(semester1Courses);\n                semester1.courses = [...semester1Courses];\n\n                const semester2Courses: CourseType[] = [...semester2.courses];\n                semester2Courses.splice(result.destination.index,0,sourceCourse);\n                semester2.courses = [...semester2Courses];\n                semester2.courseSetter([...semester2Courses]);\n\n                tmpSemesters.splice(ind1,0,semester1);\n                tmpSemesters.splice(ind2,0,semester2);\n                setSemesterCourses(tmpSemesters);\n\n            }\n        } else{\n\n            if ( result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\") ) {\n                \n                const tmpSemesters: SemesterType[] = [...semesterCourses];\n\n                const sourceId: string = result.source.droppableId;\n                const semesterNum: number = parseInt(sourceId.substring(sourceId.lastIndexOf(\"-\")));\n                let tmpSemester: SemesterType = tmpSemesters[0];\n                let ind = -1;\n\n                for(let i = 0; i < tmpSemesters.length; i++){\n\n                    if(tmpSemesters[i].semesternum === semesterNum){\n                        // found semester\n                        tmpSemester = tmpSemesters.splice(i,1)[0];\n                        ind = i;\n                        break;\n                    }\n\n                }\n\n                const tmpSemesterCourses: CourseType[] = [...tmpSemester.courses];\n                const theCourse: CourseType = tmpSemesterCourses.splice(result.source.index,1)[0];\n\n                tmpSemester.courses = [...tmpSemesterCourses];\n                tmpSemester.courseSetter([...tmpSemesterCourses]);\n\n                tmpSemesters.splice(ind,0,tmpSemester);\n\n                setSemesterCourses(tmpSemesters);\n\n                // semester updated\n\n\n                const tmpConcContainers = [...concentrationContainers];\n\n                let tmpConcContainer: ConcentrationContainerType = tmpConcContainers[0];\n\n                let ind2 = -1;\n\n                for(let i = 0; i < tmpConcContainers.length; i++){\n\n                    if(tmpConcContainers[i].name === result.destination.droppableId){\n                        // found concentration container\n                        tmpConcContainer = tmpConcContainers.splice(i,1)[0];\n                        ind2 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcContainerCourses = [...tmpConcContainer.courses];\n\n                tmpConcContainerCourses.splice(result.destination.index,0,theCourse);\n\n                tmpConcContainer.courses = [...tmpConcContainerCourses];\n                \n                tmpConcContainer.setCourses([...tmpConcContainerCourses]);\n\n                // found concentration container\n\n                tmpConcContainers.splice(ind2,0,tmpConcContainer);\n\n                setConcentrationContainers(tmpConcContainers);\n\n\n\n\n            } else if(result.source.droppableId !== result.destination.droppableId && !result.source.droppableId.includes(\"semester-table\") && !result.destination.droppableId.includes(\"semester-table\")){\n                // dropping from core --> language for instance\n                const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n                let tmpConcContainer1: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let tmpConcContainer2: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let ind1 = -1;\n\n                let ind2 = -1;\n\n                for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                    if(ind1 !== -1 && ind2 !== -1){\n                        break;\n                    } else if(tmpConcentrationContainers[i].name == result.source.droppableId){\n                        tmpConcContainer1 = tmpConcentrationContainers[i];\n                        ind1 = i;\n                        continue;\n                    } else if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                        tmpConcContainer2 = tmpConcentrationContainers[i];\n                        ind2 = i;\n                        continue;\n                    }\n\n                }\n\n                const tmpConc1Courses: CourseType[] = [...tmpConcContainer1.courses];\n\n                const tmpConc2Courses: CourseType[] = [...tmpConcContainer2.courses];\n\n                const tmpConc1Course: CourseType = tmpConc1Courses.splice(result.source.index,1)[0];\n\n                tmpConcContainer1.courses = [...tmpConc1Courses];\n\n                tmpConcContainer1.setCourses([...tmpConc1Courses]);\n\n                tmpConc2Courses.splice(result.destination.index,0,tmpConc1Course);\n\n                tmpConcContainer2.courses = [...tmpConc2Courses];\n\n                tmpConcContainer2.setCourses([...tmpConc2Courses]);\n\n                tmpConcentrationContainers.splice(ind1,0,tmpConcContainer1);\n\n                tmpConcentrationContainers.splice(ind2,0,tmpConcContainer2);\n\n                setConcentrationContainers([...tmpConcentrationContainers]);\n\n            } else {\n\n                console.log(\"container --> container\");\n\n                const tmpConcentrationContainers: ConcentrationContainerType[] = [...concentrationContainers];\n\n                let tmpConcContainer: ConcentrationContainerType = tmpConcentrationContainers[0];\n\n                let ind1 = -1;\n                \n                for(let i = 0; i < tmpConcentrationContainers.length; i++){\n\n                    if(tmpConcentrationContainers[i].name == result.destination.droppableId){\n                        // found container\n                        tmpConcContainer = tmpConcentrationContainers.splice(i,1)[0];\n                        ind1 = i;\n                        break;\n                    }\n\n                }\n\n                const tmpConcCourses: CourseType[] = [...tmpConcContainer.courses];\n\n                const tmpConcCourse: CourseType = tmpConcCourses.splice(result.source.index,1)[0];\n\n                // spliced course, now place course\n\n                tmpConcCourses.splice(result.destination.index,0,tmpConcCourse);\n\n                tmpConcContainer.courses = tmpConcCourses;\n\n                tmpConcContainer.setCourses([...tmpConcCourses]);\n\n                tmpConcentrationContainers.splice(ind1,0,tmpConcContainer);\n\n                setConcentrationContainers(tmpConcentrationContainers);\n\n            }\n\n        }\n    };\n\n    return (\n        <>\n            <DragDropContext\n                onDragEnd={onDragEnd}\n            >\n                <Container>\n                    <br />\n                    <Row>\n                        <Col>\n                            {<WelcomeToast display={display}/>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Badge bg=\"primary\"><h1>Course Scheduler</h1></Badge>\n                        </Col>\n                    </Row>\n                    <br />\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <DropdownMenu setConcentration={setConcentration}></DropdownMenu>\n                                </Col>\n                            </Row>\n                            <br />\n                            <Row>\n                                <Col>\n                                    <AddSemesterButton setSemesters={setSemesters} semesters={semesters} />\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    <Row>\n                        <Col>\n                            <DisplayCourseList concentration={concentration} setConcentrationContainers={setConcentrationContainers} ></DisplayCourseList>\n                        </Col>\n                        <Col>\n                            <SemesterTable semesters={semesters} semestersCourses={semesterCourses} setSemesterCourses={setSemesterCourses}/>\n                        </Col>\n                    </Row>\n                </Container>\n            </DragDropContext>\n        </>\n    );\n};\n","import React from \"react\";\nimport { MainPage } from \"./components/MainPage\";\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <MainPage />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}